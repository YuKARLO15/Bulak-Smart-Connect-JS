var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUpdateUserDto.html",[0,0.031,1,1.91]],["body/classes/AdminUpdateUserDto.html",[0,0.049,1,2.615,2,1.245,3,0.181,4,0.16,5,0.16,6,3.689,7,2.146,8,3.125,9,3.052,10,2.387,11,1.815,12,1.363,13,1.815,14,3.615,15,0.247,16,0.959,17,1.641,18,3.335,19,3.689,20,2.872,21,3.052,22,2.501,23,2.013,24,2.013,25,3.052,26,3.052,27,2.849,28,2.501,29,0.759,30,0.022,31,1.344,32,1.532,33,4.995,34,1.934,35,2.212,36,1.138,37,4.427,38,2.84,39,0.929,40,2.84,41,2.587,42,3.127,43,2.827,44,1.171,45,2.84,46,2.84,47,0.912,48,3.528,49,3.528,50,3.528,51,3.528,52,3.528,53,3.528,54,2.421,55,6.422,56,2.84,57,3.127,58,2.421,59,2.84,60,2.421,61,2.84,62,2.587,63,1.377,64,2.421,65,2.84,66,3.127,67,2.146,68,2.84,69,3.127,70,2.146,71,2.84,72,3.127,73,3.127,74,3.689,75,3.127,76,2.146,77,2.84,78,3.127,79,3.052,80,3.127,81,2.827,82,3.689,83,2.421,84,2.84,85,2.421,86,2.84,87,0.263,88,3.127,89,3.581,90,3.44,91,3.528,92,3.528,93,1.327,94,1.94,95,5.051,96,1.521,97,1.638,98,1.638,99,2.146,100,0.263,101,1.94,102,2.146,103,2.146,104,2.146,105,2.146,106,2.146,107,2.146,108,2.421,109,3.528,110,1.638,111,0.013,112,0.013]],["title/controllers/AppController.html",[113,1.163,114,2.436]],["body/controllers/AppController.html",[0,0.043,3,0.315,4,0.278,5,0.278,15,0.431,30,0.022,32,1.391,39,0.843,47,0.845,87,0.382,100,0.315,111,0.018,112,0.018,113,1.958,114,4.1,115,1.922,116,4.22,117,2.073,118,5.727,119,6.717,120,4.95,121,2.073,122,6.003,123,4.95,124,2.073,125,0.903,126,3.727,127,4.22,128,2.041,129,2.855,130,1.56,131,4.95,132,4.95]],["title/modules/AppModule.html",[133,1.306,134,2.436]],["body/modules/AppModule.html",[0,0.03,3,0.218,4,0.193,5,0.193,27,1.713,28,1.504,29,0.386,30,0.023,47,0.619,87,0.437,100,0.218,111,0.014,112,0.014,114,3.699,115,1.837,125,0.626,126,3.654,127,2.924,133,1.982,134,4.838,135,1.603,136,1.713,137,1.978,138,1.978,139,1.713,140,3.125,141,1.837,142,2.924,143,2.924,144,2.924,145,3.959,146,3.959,147,3.959,148,3.654,149,3.959,150,2.729,151,1.978,152,1.837,153,3.429,154,3.125,155,4.731,156,3.988,157,2.144,158,1.978,159,1.414,160,2.591,161,3.429,162,3.429,163,3.429,164,3.429,165,2.924,166,3.429,167,3.429,168,3.429,169,3.429,170,2.233,171,3.429,172,2.342,173,2.924,174,2.924,175,2.924,176,3.429,177,2.924,178,3.429,179,3.429,180,3.429,181,2.591,182,3.429,183,1.603,184,2.924,185,2.924,186,4.034,187,4.731,188,4.411,189,3.231,190,3.429,191,5.223,192,2.924,193,2.591,194,3.429,195,3.429,196,3.429,197,1.837,198,3.429,199,3.429,200,3.429,201,3.429,202,2.534,203,3.429,204,3.429,205,3.429,206,1.95,207,5.839,208,3.65,209,4.034,210,1.057,211,3.429,212,3.574,213,4.731,214,2.924,215,3.429,216,2.924,217,3.429,218,2.233,219,3.429,220,3.429,221,3.231,222,4.731,223,3.429,224,3.429,225,3.429,226,2.924,227,3.429,228,3.429,229,3.429,230,3.429,231,3.429,232,3.429,233,3.429,234,3.429]],["title/injectables/AppService.html",[126,2.058,235,0.981]],["body/injectables/AppService.html",[0,0.046,3,0.339,4,0.3,5,0.3,15,0.464,30,0.022,39,0.748,47,0.821,87,0.339,100,0.339,111,0.019,112,0.019,117,2.166,118,5.868,121,1.84,125,0.972,126,3.618,130,1.384,235,1.725,236,2.661,237,4.541,238,5.327,239,5.327,240,5.327]],["title/entities/Appointment.html",[241,1.306,242,2.058]],["body/entities/Appointment.html",[0,0.029,3,0.211,4,0.187,5,0.187,12,1.326,15,0.289,16,1.072,20,2.488,23,2.195,24,2.195,29,0.8,30,0.023,31,1.259,32,1.634,34,2.488,36,1.464,39,0.991,44,1.369,47,0.931,63,0.726,87,0.294,100,0.294,111,0.014,112,0.014,124,1.839,170,2.652,183,1.552,202,2.477,241,1.215,242,2.668,243,2.508,244,4.022,245,4.022,246,4.022,247,3.328,248,3.328,249,3.071,250,3.071,251,3.071,252,5.323,253,2.091,254,4.118,255,3.319,256,3.494,257,3.358,258,3.319,259,2.508,260,3.319,261,3.319,262,4.022,263,3.319,264,3.319,265,3.071,266,3.319,267,2.477,268,3.319,269,3.319,270,3.319,271,3.494,272,3.319,273,3.319,274,3.319,275,3.493,276,4.135,277,3.319,278,5.323,279,3.319,280,2.508,281,3.322,282,2.267,283,3.494,284,4.625,285,3.319,286,3.319,287,3.494,288,3.159,289,1.369,290,1.658,291,2.477,292,3.494,293,2.891,294,2.891,295,3.319,296,2.267,297,2.83]],["title/controllers/AppointmentController.html",[113,1.163,298,2.436]],["body/controllers/AppointmentController.html",[0,0.019,3,0.14,4,0.124,5,0.124,10,2.722,11,2.24,12,1.35,15,0.192,17,1.418,29,0.688,30,0.023,31,0.481,32,1.466,36,1.818,39,0.889,47,0.914,63,1.337,87,0.389,100,0.14,111,0.01,112,0.01,113,0.718,115,0.855,117,1.18,121,2.185,124,1.948,125,0.402,128,0.908,129,1.971,130,1.619,193,2.581,206,2.942,210,1.053,212,1.663,218,1.726,242,3.778,245,3.163,257,3.388,275,2.722,290,1.099,298,2.333,299,1.877,300,1.376,301,4.355,302,2.135,303,2.722,304,2.913,305,1.971,306,3.416,307,2.913,308,3.416,309,4.186,310,3.565,311,2.581,312,3.163,313,1.877,314,3.118,315,2.415,316,2.201,317,2.418,318,2.912,319,2.201,320,4.355,321,6.117,322,2.201,323,1.877,324,4.718,325,3.416,326,2.201,327,1.27,328,2.581,329,2.201,330,2.201,331,6.117,332,2.201,333,2.201,334,1.877,335,3.416,336,3.569,337,2.201,338,2.201,339,2.201,340,2.201,341,2.201,342,4.608,343,3.416,344,2.201,345,2.201,346,4.023,347,2.201,348,2.201,349,1.877,350,2.201,351,2.201,352,1.503,353,3.644,354,2.201,355,2.201,356,1.663,357,2.201,358,2.201,359,2.135,360,1.877,361,1.27,362,2.913,363,1.27,364,1.663,365,2.201,366,2.201,367,2.415,368,1.877,369,1.503,370,2.581,371,1.179,372,1.099,373,1.663,374,1.376,375,2.7,376,1.877,377,0.806,378,1.877,379,1.376,380,2.201,381,2.201,382,1.27,383,2.325,384,2.201,385,2.201,386,2.201,387,2.201,388,2.201,389,2.201,390,3.644,391,3.489,392,3.416,393,2.201,394,2.201,395,2.201,396,5.405,397,3.569,398,2.201,399,1.877,400,2.201,401,2.201,402,2.201,403,2.228,404,3.416,405,3.416,406,4.186,407,2.201,408,1.877,409,2.201,410,2.201,411,2.201,412,2.201,413,2.201,414,2.201,415,1.663,416,2.201,417,1.663,418,4.186,419,2.201,420,2.201,421,1.877,422,3.416,423,1.83,424,3.416,425,3.416,426,3.416,427,3.416,428,3.416,429,3.416,430,3.416,431,3.416,432,3.416,433,3.416,434,2.201,435,1.877,436,2.201,437,2.201,438,2.201,439,1.877,440,2.201,441,2.201,442,2.201,443,2.201,444,2.201,445,2.201,446,2.201,447,2.201]],["title/modules/AppointmentModule.html",[133,1.306,145,2.23]],["body/modules/AppointmentModule.html",[0,0.042,3,0.309,4,0.273,5,0.273,30,0.022,87,0.435,100,0.309,111,0.018,112,0.018,115,2.301,125,0.885,133,2.344,135,2.266,136,2.422,137,2.797,138,2.797,139,2.422,140,3.694,141,3.429,145,4.406,150,3.42,151,2.797,152,2.597,154,2.797,158,2.797,159,1.999,242,2.797,298,4.373,367,4.198,368,4.134,379,3.031,448,4.134,449,4.134,450,4.134,451,4.849,452,4.849,453,4.849]],["title/injectables/AppointmentService.html",[235,0.981,367,2.058]],["body/injectables/AppointmentService.html",[0,0.015,3,0.109,4,0.097,5,0.097,11,1.56,15,0.15,17,1.374,29,0.667,30,0.023,31,1.357,36,1.707,39,0.872,47,0.873,63,1.296,79,1.075,87,0.326,97,1.62,100,0.109,110,0.992,111,0.008,112,0.008,117,0.97,121,2.115,124,2.083,125,0.314,130,1.51,159,0.709,206,2.883,208,4.147,210,2.032,218,2.34,221,3.877,235,0.772,236,0.859,242,3.694,244,4.031,245,2.687,246,3.664,253,0.97,257,3.591,275,2.367,289,0.709,291,0.921,292,1.3,293,1.075,294,1.075,297,3.032,301,3.855,302,1.755,303,2.052,304,2.394,305,1.62,307,2.394,311,2.121,312,2.121,313,2.394,314,2.608,317,2.302,318,0.804,323,2.394,327,1.62,334,2.394,336,3.499,342,3.855,346,2.394,349,2.394,352,1.917,353,3.335,356,2.121,364,1.3,367,1.62,369,1.175,370,2.121,371,0.921,379,1.075,382,2.952,383,2.34,403,2.588,408,1.467,415,2.121,423,2.422,454,1.467,455,2.807,456,2.807,457,4.104,458,2.807,459,2.807,460,4.104,461,1.504,462,1.72,463,2.565,464,1.72,465,2.807,466,2.807,467,1.72,468,1.72,469,1.72,470,2.807,471,1.72,472,1.72,473,1.72,474,1.72,475,2.807,476,1.72,477,2.807,478,1.72,479,1.72,480,1.72,481,1.72,482,1.72,483,1.72,484,1.3,485,1.175,486,1.72,487,1.467,488,1.72,489,2.687,490,1.72,491,1.72,492,1.72,493,1.72,494,1.72,495,1.467,496,1.72,497,2.956,498,1.72,499,1.72,500,1.72,501,3.032,502,1.72,503,3.556,504,1.72,505,4.05,506,1.467,507,1.72,508,1.72,509,1.72,510,1.72,511,3.032,512,2.807,513,4.521,514,3.499,515,4.135,516,1.72,517,3.556,518,3.556,519,2.052,520,2.394,521,1.72,522,2.807,523,2.807,524,2.807,525,2.807,526,2.807,527,3.556,528,2.807,529,1.72,530,1.62,531,1.72,532,2.807,533,1.72,534,2.858,535,3.573,536,3.865,537,0.921,538,1.72,539,1.72,540,1.72,541,1.72,542,1.72,543,1.72,544,1.72,545,2.807,546,2.807,547,2.807,548,1.72,549,1.72,550,3.556,551,1.467,552,1.72,553,1.72,554,1.72,555,1.3,556,1.72,557,1.72,558,1.72,559,1.72,560,1.72,561,1.72,562,1.72,563,1.72,564,1.72,565,3.499,566,1.72,567,1.72,568,1.72,569,1.72,570,1.72,571,1.72,572,1.72,573,2.394,574,2.807,575,2.394,576,2.394,577,2.394,578,1.3,579,4.85,580,1.72,581,1.72,582,1.72,583,2.807,584,1.72,585,1.72,586,1.72,587,1.72,588,1.467,589,1.175,590,1.72,591,3.556,592,1.917,593,2.807,594,2.807,595,1.72,596,1.467,597,2.807,598,1.72]],["title/controllers/AuthController.html",[113,1.163,599,2.23]],["body/controllers/AuthController.html",[0,0.016,1,2.512,3,0.118,4,0.104,5,0.104,8,3.305,10,2.154,11,2.603,12,1.39,13,0.81,14,3.292,15,0.161,16,0.992,17,1.087,22,2.481,28,2.404,29,0.763,30,0.023,31,1.096,32,1.087,35,1.764,36,1.45,39,0.659,41,1.859,44,1.539,47,0.826,63,1.096,87,0.36,96,0.989,98,2.154,100,0.118,111,0.009,112,0.009,113,0.602,115,0.717,117,1.027,121,1.62,124,2.224,125,0.337,128,0.762,130,1.219,197,2.292,206,2.494,210,0.569,218,1.539,253,1.027,300,1.155,315,1.066,317,1.821,318,2,320,1.575,359,2.334,361,1.066,363,1.066,371,0.989,372,0.923,374,1.155,375,1.486,377,1.566,383,2.066,390,2.334,391,1.262,403,2.066,423,1.999,497,1.999,519,2.154,530,2.154,534,1.999,535,3.031,537,1.593,592,3.423,599,1.859,600,1.396,601,3.648,602,2.82,603,2.536,604,2.932,605,2.536,606,3.183,607,1.847,608,3.111,609,2.82,610,4.691,611,3.648,612,2.536,613,2.247,614,2.536,615,1.847,616,1.847,617,1.847,618,4.674,619,2.675,620,1.847,621,4.273,622,4.273,623,3.425,624,4.485,625,2.536,626,3.733,627,4.674,628,4.273,629,1.847,630,2.536,631,2.536,632,2.536,633,1.847,634,2.536,635,1.847,636,4.273,637,4.273,638,2.974,639,1.847,640,1.847,641,2.536,642,1.847,643,3.787,644,1.847,645,1.847,646,4.57,647,2.247,648,2.974,649,1.847,650,1.847,651,1.847,652,1.575,653,3.162,654,1.847,655,3.648,656,3.648,657,2.974,658,1.847,659,1.847,660,1.847,661,1.575,662,3.162,663,1.847,664,2.536,665,2.82,666,1.847,667,1.847,668,1.847,669,1.847,670,1.847,671,1.847,672,1.847,673,1.847,674,1.847,675,2.675,676,1.999,677,1.396,678,1.396,679,1.396,680,1.575,681,1.396,682,1.262,683,1.575,684,1.575,685,4.273,686,5.538,687,1.575,688,2.536,689,3.999,690,0.81,691,1.155,692,1.575,693,1.575,694,3.999,695,2.247,696,2.536,697,2.536,698,2.031,699,2.82,700,1.575,701,1.575,702,1.396,703,1.575,704,1.575,705,2.82,706,2.82,707,2.334,708,1.575,709,1.575,710,1.575,711,1.262,712,1.575,713,1.262,714,1.575,715,1.575,716,3.183,717,1.575,718,1.575,719,2.55,720,2.504,721,2.82,722,3.183,723,3.183,724,4.273,725,2.334,726,1.575,727,1.575,728,1.575,729,2.536,730,2.247,731,1.575,732,1.396,733,1.262,734,1.575,735,1.575,736,1.575,737,1.575]],["title/modules/AuthModule.html",[133,1.306,146,2.23]],["body/modules/AuthModule.html",[0,0.036,3,0.266,4,0.235,5,0.235,12,0.862,30,0.023,87,0.448,100,0.266,111,0.016,112,0.016,115,2.097,125,0.764,130,1.087,133,2.19,135,1.955,136,2.09,137,2.413,138,2.413,139,2.09,140,3.452,141,3.205,146,4.46,148,3.868,150,3.117,151,2.413,152,2.241,154,3.117,156,4.087,157,2.615,158,2.413,159,1.725,165,3.567,172,2.857,173,3.567,290,2.09,599,3.741,676,3.822,677,3.161,738,3.567,739,3.567,740,3.567,741,4.184,742,4.117,743,4.184,744,4.184,745,3.161,746,5.403,747,2.615,748,4.184,749,4.184,750,4.184,751,4.184,752,2.615,753,4.184,754,4.184,755,4.184,756,4.184,757,4.184,758,4.184,759,4.184,760,3.567]],["title/injectables/AuthService.html",[235,0.981,676,1.91]],["body/injectables/AuthService.html",[0,0.013,1,1.986,3,0.093,4,0.082,5,0.082,10,2.743,11,2.473,12,1.377,14,3.02,15,0.127,17,1.156,18,0.996,21,0.912,22,2.609,23,1.01,24,0.601,25,1.978,26,1.531,27,2.971,28,2.275,29,0.561,30,0.023,31,1.204,34,2.222,35,2.487,36,1.231,39,0.701,43,1.673,47,0.32,62,1.531,63,1.172,87,0.341,97,0.842,98,1.413,99,2.391,100,0.093,111,0.007,112,0.007,117,0.846,121,1.642,125,0.266,130,1.236,159,0.601,181,1.85,189,0.996,206,2.518,208,1.531,210,2.041,214,3.161,218,2.595,235,0.674,236,0.729,253,1.427,267,0.781,289,0.601,290,0.729,311,2.391,317,1.937,318,1.931,364,3.769,371,0.781,377,2.064,382,2.384,383,2.637,397,1.244,403,2.744,423,2.546,461,1.312,463,2.317,485,0.996,489,2.801,497,2.87,501,2.088,505,0.996,519,2.581,530,2.581,534,3.02,535,3.675,537,2.396,555,1.102,589,2.532,592,3.247,602,2.391,603,2.088,604,1.531,605,2.088,609,3.92,646,1.85,647,1.102,652,2.088,653,3.092,661,2.088,662,2.581,675,1.978,676,1.312,678,1.102,679,1.102,681,1.102,691,0.912,695,1.102,698,2.532,702,1.102,705,3.769,706,1.85,707,3.118,720,0.729,721,1.102,725,1.531,730,2.801,732,1.85,733,1.673,745,1.102,761,1.244,762,2.449,763,2.449,764,2.449,765,1.459,766,4.754,767,2.546,768,1.459,769,2.088,770,1.459,771,1.459,772,3.707,773,1.459,774,1.459,775,1.459,776,1.459,777,1.459,778,1.459,779,2.449,780,1.459,781,2.449,782,1.459,783,3.165,784,2.088,785,1.459,786,1.244,787,4.423,788,3.707,789,1.459,790,3.165,791,3.707,792,2.801,793,3.161,794,3.161,795,3.707,796,3.707,797,3.707,798,3.707,799,1.459,800,1.102,801,1.459,802,1.459,803,1.459,804,1.459,805,1.459,806,1.459,807,2.449,808,3.165,809,1.459,810,1.459,811,1.459,812,1.459,813,4.132,814,1.459,815,3.707,816,1.102,817,2.449,818,2.532,819,1.459,820,1.459,821,1.244,822,3.165,823,2.449,824,2.449,825,1.459,826,1.102,827,1.459,828,2.801,829,1.459,830,3.707,831,3.165,832,3.165,833,3.707,834,2.449,835,2.449,836,1.459,837,1.459,838,1.459,839,2.449,840,3.165,841,1.459,842,1.459,843,3.165,844,1.459,845,1.459,846,2.699,847,1.244,848,2.699,849,1.459,850,1.459,851,3.165,852,1.459,853,2.449,854,1.459,855,1.459,856,2.449,857,3.165,858,1.85,859,3.165,860,2.449,861,3.165,862,1.459,863,3.707,864,1.459,865,1.459,866,1.459,867,1.459,868,1.459,869,1.459,870,2.449,871,1.459,872,1.459,873,1.459,874,2.449,875,1.459,876,1.459,877,2.449,878,1.459,879,1.244,880,1.459,881,2.449,882,1.459,883,1.459,884,1.459,885,1.459,886,1.102,887,3.707,888,1.459,889,1.459,890,2.449,891,2.449,892,1.459,893,1.459,894,1.459,895,3.165,896,1.459,897,4.132,898,1.459,899,1.102,900,1.459,901,2.449,902,1.459,903,1.459,904,2.449,905,1.459,906,1.459,907,1.459,908,1.459,909,1.459,910,1.459,911,1.459,912,1.459,913,1.459]],["title/entities/Counter.html",[241,1.306,914,1.91]],["body/entities/Counter.html",[0,0.036,3,0.267,4,0.236,5,0.236,15,0.365,16,1.253,29,0.755,30,0.022,31,1.384,32,1.518,34,2.528,36,1.648,39,0.92,44,1.728,47,0.708,63,1.432,87,0.344,100,0.344,111,0.016,112,0.016,124,2.069,170,2.469,183,1.959,241,1.534,254,3.779,256,3.166,265,3.455,276,4.474,281,3.651,282,2.862,283,4.086,288,3.694,289,1.728,720,3.161,914,2.897,915,3.166,916,5.106,917,5.989,918,2.942,919,3.573,920,5.409,921,6.328,922,5.409,923,4.191,924,2.862,925,4.191,926,4.191,927,4.191,928,4.95,929,4.191,930,4.612,931,4.191,932,4.612,933,4.612,934,4.191,935,4.191]],["title/classes/CreateAppointmentDto.html",[0,0.031,314,2.058]],["body/classes/CreateAppointmentDto.html",[0,0.044,2,1.708,3,0.248,4,0.219,5,0.219,15,0.339,16,1.195,17,1.524,20,2.702,23,2.383,24,2.383,29,0.789,30,0.022,31,1.127,32,1.625,39,0.985,47,0.941,87,0.328,89,3.593,90,3.647,93,1.821,100,0.248,111,0.016,112,0.016,124,1.997,244,4.367,246,4.367,248,3.613,249,3.335,250,3.335,251,3.335,253,1.997,267,2.762,275,3.335,314,2.975,379,2.435,936,6.021,937,2.943,938,6.576,939,3.896,940,3.896,941,3.896,942,3.896,943,3.896,944,3.896,945,3.896,946,3.896,947,3.896,948,3.896,949,3.896,950,3.322,951,3.896,952,3.896,953,4.651,954,2.943,955,5.157,956,3.322]],["title/classes/CreateQueueDto.html",[0,0.031,957,2.23]],["body/classes/CreateQueueDto.html",[0,0.046,2,1.787,3,0.259,4,0.229,5,0.229,15,0.355,16,1.231,17,1.625,20,2.762,23,2.436,24,2.436,29,0.782,30,0.022,31,1.161,32,1.611,39,0.977,47,0.946,87,0.259,89,3.632,90,3.683,93,1.905,100,0.259,111,0.016,112,0.016,248,3.694,249,3.409,250,3.409,251,3.409,253,2.041,267,2.845,953,4.435,957,3.321,958,5.98,959,3.079,960,4.465,961,5.039,962,4.076,963,6.262,964,4.076,965,4.076,966,4.076,967,4.076,968,4.076,969,4.076,970,4.076,971,4.076,972,4.076,973,5.312]],["title/injectables/JwtAuthGuard.html",[235,0.981,372,1.782]],["body/injectables/JwtAuthGuard.html",[0,0.047,3,0.346,4,0.306,5,0.306,13,2.783,30,0.022,87,0.404,100,0.346,111,0.019,112,0.019,125,0.992,235,1.746,236,2.715,372,3.17,747,3.398,974,4.635,975,4.635,976,6.347,977,5.436]],["title/interfaces/JwtPayload.html",[690,1.564,978,2.436]],["body/interfaces/JwtPayload.html",[0,0.037,3,0.271,4,0.24,5,0.24,13,1.871,15,0.371,16,1.268,17,1.268,22,2.956,29,0.68,30,0.023,31,1.32,39,0.599,44,1.759,47,0.882,87,0.405,100,0.271,111,0.017,112,0.017,125,0.779,128,1.759,130,1.109,156,4.125,157,2.667,202,2.285,210,1.963,235,1.505,253,1.89,377,2.467,383,2.256,403,2.256,675,2.667,690,1.871,691,4.118,725,2.667,742,2.461,747,2.667,752,2.667,816,4.563,818,2.914,978,4.351,979,2.914,980,3.223,981,3.637,982,3.637,983,3.637,984,3.223,985,3.637,986,5.149,987,3.637,988,3.637,989,3.637,990,2.914,991,3.637,992,3.637,993,3.637,994,3.637,995,3.637,996,3.637,997,3.637,998,3.637,999,3.637,1000,3.637,1001,3.637,1002,3.637,1003,3.637]],["title/injectables/JwtStrategy.html",[235,0.981,742,2.058]],["body/injectables/JwtStrategy.html",[0,0.036,3,0.268,4,0.237,5,0.237,13,2.38,15,0.367,17,1.258,22,2.633,29,0.611,30,0.023,31,0.921,39,0.843,44,1.737,47,0.71,63,1.187,87,0.404,100,0.268,111,0.016,112,0.016,117,1.875,121,1.455,125,0.769,128,1.737,130,1.095,156,4.588,157,2.634,202,2.257,210,1.954,235,1.493,236,2.104,253,1.875,317,2.107,377,2.198,383,2.238,403,2.238,461,2.257,675,2.634,690,1.848,691,3.393,725,2.634,742,3.131,747,2.634,752,2.634,816,4.791,818,2.878,828,4.1,978,4.588,980,3.183,981,3.592,982,3.592,983,3.592,984,3.183,985,4.627,986,5.119,987,3.592,988,3.592,989,3.592,990,2.878,991,3.592,992,3.592,993,3.592,994,3.592,995,3.592,996,4.627,997,3.592,998,3.592,999,3.592,1000,3.592,1001,3.592,1002,3.592,1003,3.592,1004,4.213,1005,4.213,1006,4.213]],["title/classes/LoginDto.html",[0,0.031,653,2.058]],["body/classes/LoginDto.html",[0,0.055,2,2.071,3,0.301,4,0.266,5,0.266,8,2.958,9,3.646,12,1.362,15,0.411,16,1.352,22,2.558,27,3.392,28,2.558,29,0.656,30,0.022,32,1.352,37,4.132,39,0.819,47,0.865,81,3.226,87,0.371,90,3.124,93,2.208,94,4.323,96,2.53,100,0.301,101,3.226,111,0.018,112,0.018,604,4.132,653,3.651,953,4.323,1007,4.027,1008,6.329,1009,4.974,1010,4.724,1011,4.724,1012,4.974,1013,4.724,1014,4.724]],["title/entities/Queue.html",[241,1.306,918,1.564]],["body/entities/Queue.html",[0,0.031,3,0.232,4,0.205,5,0.205,15,0.318,16,1.144,29,0.774,30,0.023,31,1.31,32,1.576,34,2.308,36,1.539,39,0.955,44,1.505,47,0.784,63,1.369,87,0.356,100,0.314,111,0.015,112,0.015,124,1.932,170,2.835,183,1.706,241,1.336,247,3.497,254,3.723,256,2.758,257,3.21,262,3.73,265,3.228,276,4.277,281,3.872,289,1.505,291,2.644,293,3.086,294,3.086,296,3.372,914,3.643,918,2.453,919,3.112,924,4.094,930,4.21,1015,2.758,1016,4.227,1017,4.227,1018,4.277,1019,4.227,1020,3.821,1021,4.937,1022,3.651,1023,4.21,1024,3.651,1025,4.937,1026,3.651,1027,3.112,1028,4.21,1029,3.651,1030,3.458,1031,3.651,1032,4.937,1033,3.651,1034,4.937,1035,3.651,1036,3.651,1037,4.937,1038,3.651,1039,3.612,1040,3.651,1041,4.937,1042,2.758,1043,2.758,1044,3.086,1045,3.651,1046,3.112]],["title/controllers/QueueController.html",[113,1.163,1047,2.436]],["body/controllers/QueueController.html",[0,0.018,3,0.136,4,0.12,5,0.12,9,1.336,11,1.802,12,0.441,15,0.186,17,1.456,29,0.751,30,0.023,31,0.467,32,1.566,36,1.822,39,0.949,44,0.881,47,0.905,63,1.392,87,0.34,97,1.927,100,0.136,111,0.01,112,0.01,113,0.697,115,0.83,117,1.153,121,2.334,124,2.135,125,0.39,128,0.881,129,1.233,130,1.775,170,0.881,197,1.789,202,1.789,206,2.202,210,1.266,218,1.377,253,1.604,276,1.46,291,1.145,300,1.336,302,2.087,303,2.679,305,1.927,310,3.509,312,2.523,315,1.927,317,2.439,318,1.561,327,1.233,328,2.523,352,1.46,356,1.615,359,3.865,360,1.823,361,1.233,362,2.847,363,1.233,369,1.46,371,1.145,372,1.068,373,1.615,374,1.336,390,1.336,399,2.847,403,0.881,417,1.615,421,2.847,435,2.847,497,1.789,530,1.233,534,1.789,535,2.86,536,2.523,537,1.789,596,1.823,613,1.615,619,1.336,623,1.233,624,1.615,643,2.523,707,2.903,711,3.172,720,1.068,752,1.336,792,2.523,818,1.46,828,1.615,918,2.342,957,3.488,1018,3.441,1020,2.281,1039,2.907,1044,1.336,1047,2.281,1048,1.823,1049,2.847,1050,2.847,1051,3.339,1052,2.847,1053,2.847,1054,4.645,1055,4.645,1056,4.645,1057,4.645,1058,4.645,1059,3.96,1060,2.847,1061,2.847,1062,2.847,1063,2.138,1064,4.035,1065,3.339,1066,2.138,1067,1.823,1068,3.339,1069,2.138,1070,2.523,1071,2.138,1072,3.339,1073,2.138,1074,2.138,1075,2.138,1076,2.138,1077,2.138,1078,1.823,1079,3.339,1080,2.138,1081,1.823,1082,3.339,1083,2.138,1084,3.339,1085,2.138,1086,2.138,1087,3.339,1088,2.138,1089,3.339,1090,2.138,1091,3.339,1092,2.138,1093,3.339,1094,2.138,1095,3.339,1096,2.138,1097,2.138,1098,3.339,1099,2.138,1100,2.138,1101,3.339,1102,2.138,1103,2.138,1104,3.339,1105,2.138,1106,2.138,1107,3.609,1108,2.138,1109,2.138,1110,1.615,1111,2.138,1112,2.138,1113,2.138,1114,2.053,1115,1.46,1116,2.847,1117,1.336,1118,2.138,1119,2.138,1120,1.823,1121,3.339,1122,2.138,1123,2.138,1124,2.138,1125,2.847,1126,2.138,1127,3.105,1128,2.847,1129,2.847,1130,2.138,1131,2.138,1132,2.138,1133,2.138,1134,2.138,1135,2.138,1136,2.138,1137,1.823,1138,1.823,1139,2.138,1140,1.615,1141,2.138,1142,1.823,1143,2.138,1144,2.138,1145,2.138,1146,2.138,1147,2.807,1148,2.138,1149,2.138,1150,4.109,1151,2.138,1152,2.138,1153,3.339,1154,2.138,1155,2.138,1156,2.138,1157,2.138,1158,2.138,1159,2.138,1160,2.138,1161,2.138,1162,2.138,1163,2.138,1164,2.138,1165,2.138,1166,2.138,1167,2.138,1168,2.138,1169,2.138,1170,2.138]],["title/entities/QueueDetails.html",[241,1.306,1030,2.058]],["body/entities/QueueDetails.html",[0,0.028,3,0.207,4,0.183,5,0.183,12,1.318,15,0.283,16,1.057,20,2.462,23,2.172,24,2.172,29,0.778,30,0.022,31,1.362,32,1.602,34,2.133,36,1.449,39,0.971,47,0.91,63,1.486,87,0.335,100,0.207,111,0.014,112,0.014,170,2.736,183,1.522,189,3.117,202,2.444,241,1.192,248,3.293,249,3.039,250,3.039,251,3.039,253,1.82,254,3.92,265,3.039,267,2.444,271,2.46,280,3.448,281,3.828,282,2.224,283,4.314,287,3.98,288,3.598,289,1.342,290,1.626,720,2.279,918,2.91,924,4.532,960,3.98,1030,2.632,1171,5.932,1172,2.776,1173,3.98,1174,3.256,1175,4.563,1176,3.256,1177,3.891,1178,3.256,1179,3.256,1180,4.563,1181,3.256,1182,3.891,1183,3.256,1184,4.563,1185,3.256,1186,4.563,1187,3.256,1188,3.891,1189,5.709,1190,3.256,1191,5.709,1192,4.563,1193,3.256,1194,3.256,1195,4.563,1196,3.256,1197,4.868,1198,4.563,1199,3.256,1200,3.256,1201,3.256,1202,3.256,1203,3.256]],["title/classes/QueueGateway.html",[0,0.031,1204,2.058]],["body/classes/QueueGateway.html",[0,0.025,2,1.27,3,0.184,4,0.163,5,0.163,11,1.84,15,0.252,16,0.973,17,1.495,29,0.737,30,0.023,31,1.503,32,1.332,34,1.353,39,0.932,63,1.411,87,0.345,100,0.184,111,0.013,112,0.013,117,1.705,121,2.187,125,0.528,129,3.123,130,1.407,170,1.73,172,1.977,193,4.09,197,3.456,206,2.767,210,1.293,218,2.369,315,1.67,317,2.505,318,2.53,382,3.123,383,1.73,461,2.248,619,1.81,699,2.187,719,1.977,821,2.468,858,2.187,886,3.73,914,1.551,918,2.165,1070,4.09,1114,3.088,1115,1.977,1147,1.977,1173,4.671,1204,2.421,1205,2.468,1206,3.171,1207,4.937,1208,4.937,1209,5.11,1210,4.197,1211,4.197,1212,4.197,1213,4.197,1214,4.197,1215,4.197,1216,4.197,1217,4.197,1218,2.895,1219,4.197,1220,4.197,1221,2.895,1222,4.937,1223,4.197,1224,7.021,1225,2.895,1226,6.182,1227,6.332,1228,4.197,1229,2.895,1230,4.197,1231,4.197,1232,2.895,1233,4.197,1234,4.197,1235,2.895,1236,4.197,1237,4.197,1238,2.895,1239,4.197,1240,4.197,1241,2.895,1242,4.197,1243,2.895,1244,4.197,1245,2.895,1246,4.197,1247,2.895,1248,2.468,1249,3.578,1250,2.187,1251,4.197,1252,2.895,1253,2.895,1254,4.197,1255,2.895,1256,2.895,1257,2.895,1258,2.895,1259,2.468,1260,4.197,1261,2.895,1262,4.937,1263,2.895,1264,2.895,1265,4.197,1266,2.895,1267,3.578,1268,2.895,1269,2.895,1270,2.895,1271,4.937,1272,2.895,1273,2.895,1274,2.895,1275,2.468,1276,2.895,1277,2.895,1278,2.895,1279,4.197,1280,2.895,1281,2.895]],["title/modules/QueueModule.html",[133,1.306,147,2.23]],["body/modules/QueueModule.html",[0,0.039,3,0.285,4,0.252,5,0.252,30,0.022,87,0.45,100,0.285,111,0.017,112,0.017,115,2.192,125,0.818,133,2.262,135,2.095,136,2.239,137,2.586,138,2.586,139,2.239,140,3.566,141,3.311,147,4.382,150,3.257,151,2.586,152,2.401,154,2.586,158,2.586,159,1.848,914,3.024,918,1.966,1030,3.257,1042,3.387,1043,3.387,1047,4.222,1110,3.387,1114,3.598,1115,3.062,1117,2.802,1204,4.044,1250,4.266,1282,3.822,1283,3.822,1284,3.822,1285,4.483,1286,4.222,1287,3.387,1288,3.822,1289,4.483,1290,4.483,1291,3.822,1292,3.822,1293,4.483]],["title/injectables/QueueService.html",[235,0.981,1114,1.782]],["body/injectables/QueueService.html",[0,0.011,3,0.085,4,0.075,5,0.075,11,1.72,12,0.611,15,0.116,17,1.296,20,0.623,23,0.55,24,0.55,29,0.629,30,0.023,31,1.411,36,1.506,39,0.827,41,0.834,42,1.715,44,0.55,47,0.596,62,0.834,63,1.268,87,0.318,97,0.769,100,0.085,110,0.769,111,0.007,112,0.007,113,0.435,117,0.784,121,2.003,124,2.15,125,0.243,130,1.667,159,0.55,172,0.911,189,1.55,197,0.714,206,2.845,208,1.419,210,2.077,212,1.008,218,2.716,221,1.55,226,1.137,235,0.624,236,0.666,247,2.847,248,2.187,249,0.769,250,0.769,251,0.769,253,1.573,257,2.101,289,0.55,291,1.874,293,1.853,294,0.834,302,2.187,303,2.018,305,1.31,310,2.643,317,2.172,318,2.666,327,1.31,352,1.55,369,0.911,371,0.714,382,2.018,383,2.062,403,1.617,423,0.714,439,1.137,461,1.216,463,3.238,484,1.008,485,0.911,487,1.137,489,1.008,497,1.587,505,3.645,511,1.935,514,2.983,515,2.983,519,2.018,520,1.137,530,1.71,534,1.587,535,2.44,536,1.715,537,2.44,551,1.137,555,1.008,573,1.935,575,1.935,576,1.935,577,1.935,578,1.008,588,1.935,589,0.911,619,1.419,707,1.419,713,0.911,719,0.911,720,1.48,792,2.239,793,1.137,800,2.643,847,1.137,848,1.137,858,1.008,914,2.679,916,1.935,918,3.033,928,1.715,957,2.452,960,1.008,1016,1.715,1018,4.214,1019,1.008,1020,2.68,1023,2.527,1030,1.71,1039,2.628,1042,1.008,1043,1.008,1044,0.834,1046,3.345,1049,1.935,1050,1.935,1052,1.935,1053,1.935,1059,2.983,1060,1.935,1061,1.935,1062,1.935,1067,1.935,1070,2.643,1078,1.935,1081,1.935,1107,2.998,1110,1.008,1114,1.134,1116,1.935,1117,0.834,1127,4.135,1128,3.345,1129,1.137,1140,1.008,1142,2.983,1173,3.779,1204,2.767,1250,1.008,1259,1.137,1267,3.884,1275,2.527,1287,1.008,1288,1.935,1291,1.137,1292,1.137,1294,1.137,1295,2.27,1296,2.27,1297,1.334,1298,2.964,1299,2.964,1300,1.334,1301,2.27,1302,2.27,1303,1.334,1304,1.334,1305,2.27,1306,1.334,1307,2.27,1308,1.334,1309,1.334,1310,1.334,1311,1.334,1312,2.27,1313,1.334,1314,1.334,1315,1.334,1316,2.27,1317,1.334,1318,2.27,1319,1.334,1320,2.27,1321,1.334,1322,1.334,1323,1.334,1324,1.334,1325,1.334,1326,1.334,1327,1.137,1328,2.964,1329,2.27,1330,1.334,1331,1.334,1332,1.334,1333,2.27,1334,2.964,1335,1.334,1336,1.334,1337,1.334,1338,1.334,1339,2.27,1340,4.555,1341,1.334,1342,1.334,1343,2.27,1344,1.334,1345,1.334,1346,2.27,1347,1.334,1348,2.27,1349,1.137,1350,1.334,1351,2.27,1352,1.334,1353,1.334,1354,2.964,1355,2.27,1356,1.334,1357,1.334,1358,2.27,1359,1.334,1360,1.334,1361,2.27,1362,1.334,1363,1.334,1364,1.334,1365,1.55,1366,2.27,1367,1.334,1368,2.27,1369,1.334,1370,1.334,1371,1.334,1372,1.334,1373,1.334,1374,1.334,1375,1.334,1376,1.334,1377,1.334,1378,1.334,1379,1.334,1380,3.499,1381,1.334,1382,3.499,1383,3.499,1384,3.499,1385,2.27,1386,2.27,1387,2.27,1388,1.334,1389,1.334,1390,1.334,1391,1.935,1392,1.137,1393,3.499,1394,1.334,1395,2.527,1396,1.334,1397,3.499,1398,1.137,1399,2.27,1400,1.137,1401,3.499,1402,1.334,1403,1.334,1404,2.27,1405,1.334,1406,1.334,1407,1.334,1408,1.334,1409,1.334,1410,1.334,1411,1.334,1412,2.27,1413,2.964,1414,2.27,1415,1.334,1416,1.334,1417,1.334,1418,1.334,1419,1.334,1420,1.334,1421,2.27,1422,1.334,1423,1.334,1424,1.334,1425,1.334,1426,1.334,1427,1.334,1428,1.334,1429,1.334,1430,2.27,1431,2.27,1432,1.334,1433,2.27,1434,2.27,1435,1.137,1436,1.334,1437,1.137,1438,1.334,1439,1.137,1440,1.137,1441,1.334,1442,1.334,1443,1.334,1444,1.334,1445,1.334,1446,1.334,1447,1.334,1448,1.334,1449,3.923,1450,2.27,1451,2.964,1452,2.27,1453,1.137,1454,1.334,1455,1.334,1456,2.27,1457,1.334,1458,2.27,1459,1.334,1460,2.27,1461,1.334,1462,1.935,1463,1.334,1464,1.334,1465,1.334,1466,1.334,1467,1.334,1468,1.334,1469,1.334,1470,2.27,1471,1.334,1472,1.334,1473,1.334,1474,1.334,1475,1.334,1476,1.334,1477,2.964,1478,2.27,1479,2.27,1480,1.334,1481,1.334,1482,1.334,1483,1.334,1484,1.334,1485,1.334,1486,1.334,1487,1.334,1488,1.334]],["title/controllers/QueuesController.html",[113,1.163,1286,2.436]],["body/controllers/QueuesController.html",[0,0.034,3,0.247,4,0.219,5,0.219,15,0.339,20,1.818,23,1.603,24,1.603,30,0.023,32,0.901,36,1.07,39,0.546,87,0.368,100,0.247,111,0.016,112,0.016,113,1.269,115,1.51,117,1.995,121,1.343,124,1.779,125,0.71,128,1.603,129,2.244,130,1.339,206,2.381,210,1.894,218,1.603,247,2.431,249,2.244,250,2.244,251,2.244,291,2.759,300,2.431,315,2.244,318,1.818,359,2.431,361,2.244,363,2.244,403,1.603,497,2.083,534,2.083,535,3.094,537,2.759,578,2.938,589,2.656,711,3.518,713,2.656,720,3.283,846,3.316,918,1.706,1016,2.938,1017,2.938,1018,4.199,1019,2.938,1020,2.656,1039,2.244,1044,3.22,1114,2.885,1115,2.656,1117,2.431,1120,3.316,1127,5.066,1137,3.316,1138,3.316,1140,2.938,1188,3.316,1286,3.518,1365,3.518,1392,4.392,1395,4.392,1398,3.316,1400,3.316,1435,4.392,1437,3.316,1439,3.316,1440,3.316,1462,3.316,1489,3.316,1490,6.148,1491,5.151,1492,3.889,1493,3.889,1494,3.889,1495,3.889,1496,3.889,1497,3.889,1498,5.151,1499,3.889,1500,3.889,1501,3.889,1502,3.889,1503,5.151,1504,5.151,1505,3.889,1506,3.889,1507,3.889,1508,3.889,1509,3.889,1510,3.889,1511,3.889,1512,3.889,1513,3.889,1514,3.889,1515,3.889,1516,3.889,1517,3.889,1518,3.889,1519,3.889,1520,3.889,1521,3.889,1522,3.889,1523,3.889,1524,3.889,1525,3.889,1526,5.151]],["title/classes/RegisterDto.html",[0,0.031,662,2.058]],["body/classes/RegisterDto.html",[0,0.046,2,1.446,3,0.21,4,0.185,5,0.185,8,3.15,9,2.877,12,1.416,15,0.287,16,1.067,17,1.562,20,2.151,21,3.315,22,2.648,23,2.187,24,2.187,25,3.315,26,3.315,27,3.016,28,2.648,29,0.749,30,0.022,31,1.006,32,1.542,33,4.337,37,4.442,39,0.935,47,0.93,57,3.478,62,2.877,63,1.514,66,3.478,67,2.49,69,3.478,70,2.49,72,3.478,73,3.478,74,4.007,75,3.478,76,2.49,78,3.478,79,3.315,80,3.478,81,3.144,82,4.007,87,0.293,88,3.478,89,3.075,90,3.564,93,1.541,94,4.273,95,4.562,96,1.766,100,0.21,101,2.251,102,2.49,103,2.49,104,4.007,105,4.007,106,3.478,107,2.49,111,0.014,112,0.014,604,2.877,662,3.06,665,3.478,826,3.478,953,4.273,1009,5.149,1527,2.811,1528,3.296,1529,3.296,1530,3.296,1531,3.296,1532,3.296,1533,3.296,1534,3.296,1535,3.296,1536,3.296,1537,4.603,1538,4.603,1539,3.296,1540,3.296,1541,3.296,1542,3.296,1543,3.296,1544,3.296]],["title/interfaces/RequestWithUser.html",[608,1.91,690,1.564]],["body/interfaces/RequestWithUser.html",[0,0.02,1,2.289,3,0.145,4,0.128,5,0.128,8,3.189,10,2.022,11,2.503,12,1.39,13,1.537,14,3.057,15,0.198,16,1.269,22,2.402,28,2.274,29,0.778,30,0.023,31,1.198,35,1.445,36,1.507,41,2.191,44,1.762,47,0.845,63,0.497,87,0.385,96,1.218,98,2.022,100,0.145,111,0.011,112,0.011,113,0.742,124,2.313,125,0.415,128,0.938,130,1.348,197,2.572,206,1.98,210,0.701,218,1.762,253,0.786,315,1.312,359,2.672,361,1.312,363,1.312,371,1.218,372,1.136,374,1.422,375,1.75,377,1.757,383,2.258,390,2.672,391,1.554,403,2.258,423,2.289,497,2.289,519,2.022,530,2.022,534,2.289,535,3.238,537,1.877,592,2.919,599,1.422,600,1.719,601,3.644,602,1.719,604,2.191,606,1.94,608,2.777,609,1.719,611,2.988,612,1.94,613,1.719,614,1.94,618,4.094,619,2.672,621,3.644,622,3.644,623,3.487,624,4.138,625,1.94,627,4.094,628,4.094,630,1.94,631,1.94,632,1.94,634,1.94,636,3.644,637,3.644,641,1.94,643,3.229,646,4.312,647,1.719,653,2.992,655,2.988,656,2.988,662,2.992,664,1.94,665,2.648,675,3.002,676,2.289,677,1.719,678,1.719,679,1.719,680,1.94,681,1.719,682,1.554,683,1.94,684,1.94,685,4.67,686,5.75,687,1.94,688,2.988,689,4.421,690,0.998,691,1.422,692,1.94,693,1.94,694,4.421,695,2.648,696,2.988,697,2.988,698,2.393,699,3.229,700,1.94,701,1.94,702,1.719,703,1.94,704,1.94,705,3.229,706,3.229,707,2.672,708,1.94,709,1.94,710,1.94,711,1.554,712,1.94,713,1.554,714,1.94,715,1.94,716,3.644,717,1.94,718,1.94,719,2.919,720,2.736,721,3.229,722,3.644,723,3.644,724,4.67,725,2.672,726,1.94,727,1.94,728,1.94,729,2.988,730,2.648,731,1.94,732,1.719,733,1.554,734,1.94,735,1.94,736,1.94,737,1.94,979,1.554,1064,2.648]],["title/interfaces/RequestWithUser-1.html",[110,1.721,608,1.597,690,1.308]],["body/interfaces/RequestWithUser-1.html",[0,0.04,3,0.296,4,0.262,5,0.262,12,1.394,13,2.536,15,0.406,16,1.34,17,1.34,29,0.708,30,0.023,47,0.61,87,0.4,100,0.296,111,0.017,112,0.017,125,0.85,128,1.921,130,1.503,170,1.921,210,1.938,235,1.591,267,2.495,375,2.327,377,1.705,608,3.098,623,3.795,682,3.182,690,2.536,899,3.52,979,3.182,1064,4.37,1206,3.52,1545,3.52,1546,4.931,1547,4.37,1548,5.363,1549,3.52,1550,3.95,1551,3.972,1552,3.972,1553,4.931,1554,3.972,1555,3.972,1556,3.972,1557,3.972,1558,3.972,1559,3.972,1560,3.972]],["title/entities/Role.html",[35,1.471,241,1.306]],["body/entities/Role.html",[0,0.04,3,0.296,4,0.261,5,0.261,8,2.937,12,1.42,15,0.405,16,1.339,29,0.74,30,0.022,31,1.263,32,1.523,35,2.382,36,1.729,39,0.923,47,0.86,63,1.374,87,0.368,100,0.296,111,0.017,112,0.017,170,2.71,183,2.173,202,3.094,241,1.702,254,3.625,259,3.513,265,3.625,271,3.513,281,3.625,289,1.917,290,2.323,296,3.176,1125,5.358,1561,3.964,1562,4.65,1563,4.65,1564,4.65,1565,4.65,1566,4.925,1567,4.65,1568,4.925,1569,4.65]],["title/controllers/RolesController.html",[113,1.163,1570,2.436]],["body/controllers/RolesController.html",[0,0.038,3,0.281,4,0.248,5,0.248,15,0.384,17,1.295,29,0.629,30,0.022,32,1.421,36,1.537,39,0.861,47,0.889,63,1.221,87,0.423,100,0.281,111,0.017,112,0.017,113,1.438,115,1.711,117,1.93,121,2.118,125,0.805,128,1.817,129,2.543,130,1.594,253,1.93,300,2.756,303,3.72,305,3.223,317,2.169,327,2.543,328,3.331,361,2.543,363,2.543,372,2.202,373,3.331,374,2.756,375,2.791,376,3.759,377,2.045,378,3.759,390,2.756,391,4.189,417,3.331,733,4.643,767,3.285,1570,3.816,1571,3.759,1572,4.763,1573,4.408,1574,4.408,1575,4.408,1576,4.408,1577,3.759,1578,4.408,1579,4.408,1580,3.759,1581,4.408,1582,4.408,1583,4.408,1584,4.408,1585,4.408,1586,4.408]],["title/guards/RolesGuard.html",[375,1.782,1587,2.695]],["body/guards/RolesGuard.html",[0,0.039,3,0.288,4,0.255,5,0.255,12,1.171,13,1.985,15,0.394,17,1.316,29,0.639,30,0.023,39,0.798,47,0.592,63,1.242,87,0.395,100,0.288,111,0.017,112,0.017,117,1.962,121,1.563,125,0.826,128,1.866,130,1.476,170,1.866,210,1.913,235,1.563,267,3.042,317,2.205,375,2.837,377,1.657,461,2.424,608,2.424,623,3.581,682,3.091,690,2.491,899,3.419,1206,3.419,1545,3.419,1546,5.551,1547,4.919,1548,5.835,1549,3.419,1550,3.88,1551,3.859,1552,4.843,1553,4.843,1554,3.859,1555,3.859,1556,3.859,1557,3.859,1558,3.859,1559,3.859,1560,3.859,1588,4.526,1589,4.526,1590,4.526,1591,4.526,1592,4.526]],["title/modules/RolesModule.html",[133,1.306,148,2.058]],["body/modules/RolesModule.html",[0,0.041,3,0.305,4,0.269,5,0.269,12,1.213,30,0.022,35,1.975,87,0.442,100,0.305,111,0.018,112,0.018,115,2.284,125,0.874,133,2.331,135,2.239,136,2.393,137,2.763,138,2.763,139,2.393,140,3.674,141,3.411,148,4.056,150,3.394,151,2.763,152,2.566,154,2.763,158,2.763,159,1.975,290,2.393,767,3.892,1570,4.35,1580,4.084,1593,4.084,1594,4.084,1595,4.084,1596,4.79,1597,4.084,1598,4.79,1599,4.79]],["title/injectables/RolesService.html",[235,0.981,767,1.91]],["body/injectables/RolesService.html",[0,0.029,3,0.215,4,0.19,5,0.19,12,1.332,15,0.294,17,1.412,19,4.061,29,0.686,30,0.023,31,1.509,35,2.665,36,1.779,39,0.886,43,2.309,47,0.703,63,1.463,87,0.388,100,0.215,111,0.014,112,0.014,117,1.618,121,2.105,125,0.617,130,1.508,159,1.394,206,2.901,208,4.235,210,1.878,218,2.6,235,1.289,236,1.689,253,2.004,289,1.394,290,1.689,303,3.348,305,2.702,317,2.366,327,2.702,377,2.308,382,2.702,383,2.216,403,2.216,461,2.509,463,4.041,484,2.554,485,2.309,519,3.101,767,2.509,769,4.583,786,2.882,787,3.994,800,3.539,1365,2.309,1391,3.994,1566,3.994,1572,3.994,1577,3.994,1597,2.882,1600,2.882,1601,4.684,1602,4.684,1603,3.381,1604,3.381,1605,4.684,1606,4.684,1607,3.381,1608,3.381,1609,4.684,1610,3.381,1611,3.381,1612,3.381,1613,3.381,1614,3.381,1615,4.684,1616,4.684,1617,3.381,1618,3.381,1619,3.381,1620,3.381,1621,3.381,1622,3.381,1623,3.381,1624,3.381]],["title/classes/UpdateAppointmentDto.html",[0,0.031,353,2.23]],["body/classes/UpdateAppointmentDto.html",[0,0.052,2,2.212,3,0.321,4,0.284,5,0.284,13,2.663,15,0.439,16,1.407,17,1.407,29,0.568,30,0.022,32,1.169,39,0.709,87,0.43,89,3.252,93,2.358,100,0.321,111,0.018,112,0.018,124,2.25,275,3.758,302,3.153,314,2.91,353,3.795,370,3.811,379,3.153,937,3.811,950,4.301,954,3.811,956,4.301,1625,5.177,1626,6.072,1627,5.044,1628,5.044,1629,5.044,1630,5.044]],["title/classes/UpdateQueueDto.html",[0,0.031,1107,2.23]],["body/classes/UpdateQueueDto.html",[0,0.052,2,2.203,3,0.32,4,0.282,5,0.282,15,0.437,16,1.403,17,1.564,29,0.681,30,0.022,32,1.403,39,0.851,47,0.792,87,0.385,89,3.483,90,3.244,93,2.348,100,0.32,111,0.018,112,0.018,124,2.246,954,3.795,959,3.795,961,4.283,1017,4.912,1039,3.751,1107,3.786,1117,3.14,1631,5.544,1632,5.023,1633,5.023,1634,5.023,1635,5.023]],["title/classes/UpdateUserDto.html",[0,0.031,14,1.91]],["body/classes/UpdateUserDto.html",[0,0.05,1,2.319,2,1.326,3,0.192,4,0.17,5,0.17,6,5,7,2.285,8,3.163,9,3.162,10,1.745,11,1.326,12,1.344,13,1.326,14,2.959,15,0.263,16,1.004,17,1.629,18,2.065,19,2.285,20,2.928,21,3.162,22,2.564,23,2.086,24,2.086,25,3.162,26,3.162,27,2.92,28,2.564,29,0.745,30,0.022,31,1.278,32,1.511,33,4.928,34,1.413,35,1.785,36,0.832,37,4.429,39,0.916,41,1.89,42,2.285,43,2.065,47,0.92,48,3.692,49,3.692,50,3.692,51,3.692,52,3.692,53,3.692,54,2.578,57,3.272,58,2.578,60,2.578,62,2.707,63,1.401,64,2.578,66,3.272,67,2.285,69,3.272,70,2.285,72,3.272,73,3.272,74,3.822,75,3.272,76,2.285,78,3.272,79,3.162,80,3.272,81,2.958,82,3.822,83,2.578,85,2.578,87,0.276,88,3.272,89,3.624,90,3.493,91,3.692,92,3.692,93,1.413,94,2.065,95,5.112,96,1.62,97,2.498,98,2.498,99,3.272,100,0.276,101,2.065,102,2.285,103,2.285,104,2.285,105,2.285,106,2.285,107,2.285,108,2.578,109,3.692,110,1.745,111,0.013,112,0.013,1636,3.024,1637,3.024,1638,3.024,1639,3.024,1640,3.024,1641,3.024,1642,3.024,1643,3.024,1644,3.024]],["title/entities/User.html",[12,0.735,241,1.306]],["body/entities/User.html",[0,0.028,3,0.21,4,0.186,5,0.186,12,0.95,15,0.288,16,1.069,18,3.628,21,3.32,22,2.329,23,2.19,24,2.19,25,3.32,26,3.32,27,2.653,28,2.329,29,0.785,30,0.023,31,1.256,32,1.616,35,2.649,36,1.663,39,0.98,44,1.901,47,0.93,63,1.525,87,0.293,100,0.21,111,0.014,112,0.014,170,2.856,183,1.545,241,1.21,247,3.32,254,3.997,257,2.47,259,3.484,262,3.484,265,3.064,280,2.497,281,3.89,282,2.258,287,3.484,288,3.925,289,1.363,296,3.15,377,1.944,698,3.628,924,4.276,1027,2.818,1028,3.932,1177,3.932,1182,3.932,1197,2.818,1568,3.932,1645,2.818,1646,4.612,1647,3.306,1648,3.306,1649,5.747,1650,3.306,1651,3.306,1652,3.306,1653,3.306,1654,3.306,1655,3.306,1656,4.612,1657,3.306,1658,3.306,1659,4.612,1660,3.306,1661,3.306,1662,3.306,1663,4.612,1664,4.612,1665,3.306,1666,3.306,1667,4.612,1668,3.306,1669,3.306,1670,3.306,1671,3.306,1672,3.306,1673,4.612,1674,3.306]],["title/modules/UsersModule.html",[133,1.306,149,2.23]],["body/modules/UsersModule.html",[0,0.046,3,0.342,4,0.302,5,0.302,12,1.108,30,0.022,87,0.426,100,0.342,111,0.019,112,0.019,125,0.981,133,2.308,135,2.512,141,2.879,149,3.941,154,3.101,158,3.637,159,2.216,760,4.583,1675,5.375,1676,5.375]],["title/coverage.html",[1677,3.672]],["body/coverage.html",[0,0.058,1,1.94,5,0.204,6,3.711,7,3.711,12,1.012,14,1.94,29,0.408,30,0.022,35,1.494,79,2.265,111,0.015,112,0.015,113,2.1,114,2.474,116,3.089,126,2.09,139,1.81,160,2.737,235,1.812,237,3.089,241,2.357,242,2.09,243,2.737,298,2.474,299,3.089,314,2.09,353,2.265,367,2.09,372,1.81,375,1.81,377,1.326,383,1.494,454,3.089,505,5.044,599,2.265,600,3.711,608,2.631,653,2.09,662,2.09,676,1.94,690,2.444,742,2.09,761,3.089,767,1.94,914,1.94,915,2.737,918,1.589,936,3.089,937,3.711,957,2.265,958,3.089,959,3.711,974,3.089,975,3.089,978,2.474,980,3.711,1007,3.089,1015,2.737,1030,2.09,1047,2.474,1048,3.089,1107,2.265,1114,1.81,1171,3.089,1172,3.089,1204,2.09,1205,3.089,1286,2.474,1294,3.089,1489,3.089,1527,3.089,1545,3.711,1550,2.474,1561,3.089,1570,2.474,1571,3.089,1587,2.737,1600,3.089,1625,3.089,1631,3.089,1645,3.089,1677,2.737,1678,3.089,1679,3.623,1680,3.623,1681,5.975,1682,6.245,1683,3.623,1684,3.623,1685,4.188,1686,5.975,1687,7.027,1688,3.089,1689,3.623,1690,3.623,1691,4.912,1692,4.912,1693,3.623,1694,4.912,1695,3.089,1696,4.188,1697,4.912,1698,3.089,1699,3.623,1700,3.623,1701,4.912,1702,3.623,1703,3.623,1704,3.623,1705,3.623,1706,3.623,1707,3.623]],["title/dependencies.html",[136,2.142,1708,2.543]],["body/dependencies.html",[0,0.051,30,0.023,93,2.266,96,2.597,111,0.018,112,0.018,125,0.885,136,2.422,157,3.031,159,1.999,257,2.597,289,1.999,495,4.134,745,3.663,747,3.031,752,3.031,784,4.134,984,4.479,1248,4.134,1249,5.054,1549,3.663,1709,6.841,1710,4.849,1711,5.928,1712,4.849,1713,5.928,1714,5.928,1715,4.849,1716,4.849,1717,4.849,1718,4.849,1719,4.849,1720,4.849,1721,4.849,1722,4.849,1723,4.849,1724,4.849,1725,4.849,1726,4.849,1727,4.849,1728,4.849,1729,4.849,1730,4.849,1731,4.849,1732,4.849,1733,4.849,1734,4.849,1735,4.849,1736,4.849]],["title/miscellaneous/enumerations.html",[1737,1.721,1738,3.656]],["body/miscellaneous/enumerations.html",[15,0.444,30,0.022,111,0.018,112,0.018,243,3.852,275,3.525,291,3.634,292,4.617,293,4.241,294,4.241,915,3.852,928,4.617,932,5.21,933,5.21,1015,3.852,1039,3.525,1044,3.82,1147,4.962,1737,2.941,1738,4.347,1739,5.098,1740,5.098,1741,5.098]],["title/miscellaneous/functions.html",[1737,1.721,1742,3.656]],["body/miscellaneous/functions.html",[15,0.48,17,1.277,29,0.62,30,0.02,63,1.205,111,0.019,112,0.019,139,3.377,317,2.14,1696,4.699,1698,5.455,1737,3.18,1742,4.699,1743,6.398,1744,5.512,1745,6.761]],["title/index.html",[15,0.26,565,2.543,1746,2.983]],["body/index.html",[4,0.205,8,1.706,30,0.022,37,3.747,98,2.106,111,0.015,112,0.015,152,3.457,188,3.73,191,3.112,216,3.112,221,3.821,423,3.457,463,2.282,794,3.112,826,2.758,879,3.112,886,2.758,1012,4.21,1209,3.112,1287,2.758,1327,3.112,1349,3.112,1365,2.493,1453,5.11,1677,2.758,1678,4.21,1747,3.651,1748,3.651,1749,5.595,1750,4.937,1751,3.651,1752,3.651,1753,3.651,1754,4.937,1755,5.595,1756,3.651,1757,5.993,1758,3.651,1759,6.711,1760,3.651,1761,6.598,1762,3.651,1763,3.651,1764,4.937,1765,3.651,1766,3.651,1767,5.595,1768,3.651,1769,3.651,1770,3.651,1771,3.651,1772,3.651,1773,3.651,1774,5.993,1775,6.711,1776,6.454,1777,4.937,1778,3.651,1779,3.651,1780,3.651,1781,3.651,1782,3.651,1783,4.937,1784,4.937,1785,3.651,1786,4.937,1787,6.454,1788,5.993,1789,3.651,1790,4.937,1791,3.651,1792,3.651,1793,3.651,1794,3.651,1795,5.993,1796,3.651,1797,3.651,1798,3.651,1799,4.937,1800,3.651,1801,3.651,1802,3.651,1803,3.651,1804,3.651,1805,4.937,1806,3.651,1807,3.651,1808,3.651,1809,4.937,1810,3.651,1811,3.651,1812,5.11,1813,4.937,1814,3.651,1815,3.651,1816,3.651,1817,3.651,1818,3.651,1819,3.651,1820,3.651,1821,3.651,1822,4.937,1823,3.651,1824,3.112,1825,3.651,1826,3.651,1827,3.651,1828,3.651,1829,3.651,1830,4.937,1831,3.651,1832,3.651,1833,3.651,1834,3.651,1835,4.937,1836,3.651,1837,3.651,1838,3.651,1839,4.937,1840,4.937,1841,3.651,1842,3.651,1843,3.651,1844,3.651,1845,3.651,1846,3.651,1847,3.651,1848,3.651,1849,3.651,1850,3.651,1851,3.112,1852,3.651,1853,3.651,1854,3.651,1855,3.651,1856,3.651,1857,3.651,1858,3.112]],["title/modules.html",[135,2.272]],["body/modules.html",[30,0.019,111,0.019,112,0.019,134,3.679,135,2.518,145,3.367,146,3.367,147,3.367,148,3.108,149,3.367,415,4.07,1812,6.002,1824,4.593,1859,7.04,1860,7.04,1861,7.131]],["title/overview.html",[1862,4.144]],["body/overview.html",[2,1.861,30,0.022,110,2.448,111,0.016,112,0.016,115,1.647,126,3.475,133,1.553,134,4.927,135,1.983,136,2.119,137,2.448,138,2.448,139,2.119,140,2.448,141,2.273,142,3.618,143,3.618,144,3.618,145,4.207,146,4.444,147,4.279,148,3.949,149,3.766,150,3.145,151,2.448,152,2.273,183,1.983,236,2.119,367,3.949,448,3.618,449,3.618,450,3.618,506,5.136,676,3.666,738,3.618,739,3.618,740,3.618,742,3.949,767,3.666,979,2.898,1114,3.419,1204,3.668,1282,3.618,1283,3.618,1284,3.618,1587,3.206,1593,3.618,1594,3.618,1595,3.618,1862,3.618,1863,4.243,1864,4.243,1865,4.243]],["title/properties.html",[16,0.994,1708,2.543]],["body/properties.html",[8,2.631,16,1.304,30,0.022,111,0.02,112,0.02,1851,4.799,1858,4.799,1866,5.629,1867,5.629,1868,5.629]],["title/miscellaneous/variables.html",[990,2.929,1737,1.721]],["body/miscellaneous/variables.html",[12,1.201,15,0.41,27,2.355,28,2.067,29,0.711,30,0.022,34,3.087,47,0.762,111,0.018,112,0.018,130,1.225,160,4.402,174,4.019,175,4.019,177,4.019,181,3.562,183,2.203,184,4.019,185,4.019,186,4.019,188,4.402,192,4.019,197,2.525,209,4.967,210,1.453,318,2.203,377,2.484,623,2.72,990,3.22,1147,4.511,1547,3.562,1550,3.979,1685,4.019,1688,4.019,1695,4.019,1737,2.72,1869,4.714,1870,5.826,1871,4.714,1872,4.714,1873,4.714,1874,4.714,1875,4.714,1876,4.714,1877,4.714,1878,4.714,1879,4.714,1880,4.714,1881,4.714,1882,4.714,1883,4.714,1884,4.714,1885,4.714,1886,4.714]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":505,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["0')}${string(today.getdate()).padstart(2",{"_index":1332,"title":{},"body":{"injectables/QueueService.html":{}}}],["0.0.1",{"_index":1867,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1719,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1729,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":1736,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1718,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1725,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1687,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1702,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1701,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1699,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1700,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1704,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1682,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1703,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1681,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1694,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1683,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1705,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1684,"title":{},"body":{"coverage.html":{}}}],["08:00",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["09123456789",{"_index":107,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["09123456789'})@isstring",{"_index":1528,"title":{},"body":{"classes/RegisterDto.html":{}}}],["09123456789'})@isstring()@isoptional",{"_index":58,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["1",{"_index":110,"title":{"interfaces/RequestWithUser-1.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":1331,"title":{},"body":{"injectables/QueueService.html":{}}}],["1).padstart(4",{"_index":1345,"title":{},"body":{"injectables/QueueService.html":{}}}],["1/10",{"_index":1692,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":1693,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1690,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1691,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":1711,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":1712,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1709,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":1715,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":49,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["15",{"_index":1348,"title":{},"body":{"injectables/QueueService.html":{}}}],["16.5.0",{"_index":1722,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":759,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":109,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["200",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["201",{"_index":664,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["2})@isnumber()@isoptional",{"_index":38,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["3",{"_index":1865,"title":{},"body":{"overview.html":{}}}],["3.14.1",{"_index":1724,"title":{},"body":{"dependencies.html":{}}}],["30min",{"_index":559,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["33",{"_index":1689,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":1876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":1726,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1710,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1720,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1732,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":621,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["401",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["403",{"_index":630,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["404",{"_index":634,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["409",{"_index":636,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["5.0.1",{"_index":1735,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1716,"title":{},"body":{"dependencies.html":{}}}],["5:00",{"_index":557,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["6",{"_index":506,"title":{},"body":{"injectables/AppointmentService.html":{},"overview.html":{}}}],["60000",{"_index":1484,"title":{},"body":{"injectables/QueueService.html":{}}}],["7",{"_index":1863,"title":{},"body":{"overview.html":{}}}],["7.8.2",{"_index":1731,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":79,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["8:00",{"_index":556,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["8})@isstring()@isnotempty()@minlength(8",{"_index":1541,"title":{},"body":{"classes/RegisterDto.html":{}}}],["8})@isstring()@isoptional()@minlength(8",{"_index":83,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["9",{"_index":1864,"title":{},"body":{"overview.html":{}}}],["__dirname",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":798,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":695,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["action",{"_index":1382,"title":{},"body":{"injectables/QueueService.html":{}}}],["active",{"_index":932,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":719,"title":{},"body":{"controllers/AuthController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["addcounter",{"_index":1049,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["addcounter(@body",{"_index":1166,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(data",{"_index":1063,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(name",{"_index":1302,"title":{},"body":{"injectables/QueueService.html":{}}}],["adddays",{"_index":490,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["adddays(today",{"_index":568,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["address",{"_index":20,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["admin",{"_index":10,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["adminid",{"_index":772,"title":{},"body":{"injectables/AuthService.html":{}}}],["administrators",{"_index":612,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["adminrolenames",{"_index":868,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminrolenames.some",{"_index":871,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles",{"_index":866,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles.map((role",{"_index":869,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminupdateuser",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["adminupdateuser(adminid",{"_index":770,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminupdateuser(req",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{}}}],["adminupdateuserdto",{"_index":1,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["adminupdateuserdto})@apiresponse({status",{"_index":617,"title":{},"body":{"controllers/AuthController.html":{}}}],["advanced",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["afterconnect",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["ahead",{"_index":1406,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails",{"_index":1418,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.foreach((detail",{"_index":1426,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.length",{"_index":1422,"title":{},"body":{"injectables/QueueService.html":{}}}],["allow",{"_index":427,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["allowing",{"_index":1800,"title":{},"body":{"index.html":{}}}],["allows",{"_index":611,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["allqueues",{"_index":1507,"title":{},"body":{"controllers/QueuesController.html":{}}}],["allqueues.map(queue",{"_index":1511,"title":{},"body":{"controllers/QueuesController.html":{}}}],["alltimeslots",{"_index":561,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["alltimeslots.filter(slot",{"_index":563,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["already",{"_index":592,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["amazing",{"_index":1845,"title":{},"body":{"index.html":{}}}],["api",{"_index":1496,"title":{},"body":{"controllers/QueuesController.html":{}}}],["apibearerauth",{"_index":687,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apibearerauth('jwt",{"_index":716,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apibody",{"_index":689,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apioperation",{"_index":685,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apioperation({summary",{"_index":610,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiparam",{"_index":688,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apiproperty",{"_index":94,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":1009,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["apipropertyoptional",{"_index":95,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional({description",{"_index":33,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiresponse",{"_index":686,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apitags",{"_index":684,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apitags('authentication",{"_index":692,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["app's",{"_index":1255,"title":{},"body":{"classes/QueueGateway.html":{}}}],["app.appointmenttime",{"_index":554,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["app.controller",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":127,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":114,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1776,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1754,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":134,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":242,"title":{"entities/Appointment.html":{}},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{}}}],["appointment.appointmentdate",{"_index":526,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.appointmenttime",{"_index":528,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.controller",{"_index":452,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["appointment.dto",{"_index":370,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts",{"_index":937,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["appointment.dto.ts:11",{"_index":945,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:15",{"_index":947,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:19",{"_index":939,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:23",{"_index":948,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:27",{"_index":949,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:31",{"_index":941,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:35",{"_index":942,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:39",{"_index":951,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:42",{"_index":952,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:45",{"_index":944,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:7",{"_index":943,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:9",{"_index":1627,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.service",{"_index":368,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{}}}],["appointment.status",{"_index":542,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.userid",{"_index":430,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment_type",{"_index":1175,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmentcontroller",{"_index":298,"title":{"controllers/AppointmentController.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"coverage.html":{}}}],["appointmentdate",{"_index":244,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmentmodule",{"_index":145,"title":{"modules/AppointmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules.html":{},"overview.html":{}}}],["appointmentnumber",{"_index":245,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentrepository",{"_index":465,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointments",{"_index":301,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentservice",{"_index":367,"title":{"injectables/AppointmentService.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{},"overview.html":{}}}],["appointmentstatus",{"_index":275,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"miscellaneous/enumerations.html":{}}}],["appointmentstatus.cancelled",{"_index":581,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.completed",{"_index":580,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.confirmed",{"_index":550,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.pending",{"_index":297,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{}}}],["appointmenttime",{"_index":246,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmenttype",{"_index":960,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["appropriately",{"_index":880,"title":{},"body":{"injectables/AuthService.html":{}}}],["appservice",{"_index":126,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":41,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["array.isarray(payload.roles",{"_index":1002,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["array.isarray(queue.details",{"_index":1515,"title":{},"body":{"controllers/QueuesController.html":{}}}],["asc",{"_index":515,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["assign",{"_index":43,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{}}}],["assigned",{"_index":895,"title":{},"body":{"injectables/AuthService.html":{}}}],["assigning",{"_index":890,"title":{},"body":{"injectables/AuthService.html":{}}}],["assignments",{"_index":731,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["assignments'})@apiparam({name",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{}}}],["assignrolestouser",{"_index":1601,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":1606,"title":{},"body":{"injectables/RolesService.html":{}}}],["associated",{"_index":1461,"title":{},"body":{"injectables/QueueService.html":{}}}],["async",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["attempt",{"_index":799,"title":{},"body":{"injectables/AuthService.html":{}}}],["attempting",{"_index":862,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["auth')@apibody({type",{"_index":672,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard",{"_index":639,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard)@get('profile",{"_index":650,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":748,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":374,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["auth.guard.ts",{"_index":975,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":677,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":378,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/RolesController.html":{}}}],["auth/decorators/user.decorator",{"_index":380,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["auth/guards/jwt",{"_index":373,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["auth/guards/roles.guard",{"_index":376,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/RolesController.html":{}}}],["authcontroller",{"_index":599,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authenticated",{"_index":1121,"title":{},"body":{"controllers/QueueController.html":{}}}],["authguard",{"_index":977,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":976,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":146,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1851,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":676,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1537,"title":{},"body":{"classes/RegisterDto.html":{}}}],["availability",{"_index":522,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["available",{"_index":415,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"modules.html":{}}}],["average",{"_index":1473,"title":{},"body":{"injectables/QueueService.html":{}}}],["averagewaittime",{"_index":1477,"title":{},"body":{"injectables/QueueService.html":{}}}],["await",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["aws",{"_index":1790,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1846,"title":{},"body":{"index.html":{}}}],["backward",{"_index":1671,"title":{},"body":{"entities/User.html":{}}}],["bad",{"_index":622,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception",{"_index":364,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{}}}],["badrequestexception('cannot",{"_index":507,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('date",{"_index":404,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["badrequestexception('failed",{"_index":856,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":501,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{}}}],["badrequestexception('start",{"_index":411,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["badrequestexception('this",{"_index":595,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('user",{"_index":910,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('you",{"_index":431,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["badrequestexception(`invalid",{"_index":438,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["badrequestexception(`role",{"_index":893,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`user",{"_index":875,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":1327,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["basic",{"_index":877,"title":{},"body":{"injectables/AuthService.html":{}}}],["basicupdate",{"_index":881,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":784,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":809,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":789,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":721,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["being",{"_index":839,"title":{},"body":{"injectables/AuthService.html":{}}}],["belongs",{"_index":424,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["below",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["better",{"_index":1416,"title":{},"body":{"injectables/QueueService.html":{}}}],["between",{"_index":486,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["between(startdate",{"_index":566,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["board",{"_index":1838,"title":{},"body":{"index.html":{}}}],["body",{"_index":359,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["body('status",{"_index":436,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["body.status",{"_index":1150,"title":{},"body":{"controllers/QueueController.html":{}}}],["book",{"_index":508,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["booked",{"_index":593,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots",{"_index":552,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots.includes(slot",{"_index":564,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["boolean",{"_index":267,"title":{},"body":{"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":1501,"title":{},"body":{"controllers/QueuesController.html":{}}}],["break",{"_index":1409,"title":{},"body":{"injectables/QueueService.html":{}}}],["browse",{"_index":1861,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1859,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1750,"title":{},"body":{"index.html":{}}}],["bulacan",{"_index":108,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulacan'})@isstring()@isoptional",{"_index":54,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulak_smart_connect",{"_index":1881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bulk",{"_index":1139,"title":{},"body":{"controllers/QueueController.html":{}}}],["calculate",{"_index":1472,"title":{},"body":{"injectables/QueueService.html":{}}}],["called",{"_index":1462,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["callnext",{"_index":1050,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["callnext(@param('counterid",{"_index":1164,"title":{},"body":{"controllers/QueueController.html":{}}}],["callnext(counterid",{"_index":1067,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["canactivate",{"_index":1546,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":1552,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["cancelled",{"_index":294,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":576,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["cascade",{"_index":1203,"title":{},"body":{"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":1190,"title":{},"body":{"entities/QueueDetails.html":{}}}],["catch",{"_index":534,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["caught",{"_index":884,"title":{},"body":{"injectables/AuthService.html":{}}}],["change",{"_index":847,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["changing",{"_index":521,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["channel",{"_index":1815,"title":{},"body":{"index.html":{}}}],["characters",{"_index":80,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["check",{"_index":423,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["checkexists",{"_index":1295,"title":{},"body":{"injectables/QueueService.html":{}}}],["checkexists(id",{"_index":1305,"title":{},"body":{"injectables/QueueService.html":{}}}],["checking",{"_index":596,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/QueueController.html":{}}}],["checkqueueexists",{"_index":1051,"title":{},"body":{"controllers/QueueController.html":{}}}],["checkqueueexists(@param('id",{"_index":1169,"title":{},"body":{"controllers/QueueController.html":{}}}],["checkqueueexists(id",{"_index":1071,"title":{},"body":{"controllers/QueueController.html":{}}}],["checks",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["checktimeslotavailability",{"_index":455,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["checktimeslotavailability(date",{"_index":466,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["citizen",{"_index":99,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":1799,"title":{},"body":{"index.html":{}}}],["client",{"_index":1226,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":1262,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join('queue_updates",{"_index":1272,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":1269,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":1264,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":1275,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["cloud",{"_index":1785,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule",{"_index":448,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_exports",{"_index":449,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_providers",{"_index":450,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":738,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":740,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":741,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":739,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":1282,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":1283,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":1284,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":1593,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":1594,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":1595,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["code",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":254,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({default",{"_index":268,"title":{},"body":{"entities/Appointment.html":{}}}],["column({name",{"_index":924,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":271,"title":{},"body":{"entities/Appointment.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":256,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":259,"title":{},"body":{"entities/Appointment.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["combine",{"_index":1437,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["come",{"_index":1806,"title":{},"body":{"index.html":{}}}],["compatibility",{"_index":1672,"title":{},"body":{"entities/User.html":{}}}],["complete",{"_index":48,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["completed",{"_index":293,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":1021,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":1016,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["completedcount",{"_index":575,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["completedqueues",{"_index":1475,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.length",{"_index":1478,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.reduce((total",{"_index":1480,"title":{},"body":{"injectables/QueueService.html":{}}}],["completion",{"_index":1396,"title":{},"body":{"injectables/QueueService.html":{}}}],["config",{"_index":754,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":756,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/database.config",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":987,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmed",{"_index":292,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"miscellaneous/enumerations.html":{}}}],["confirmedcount",{"_index":574,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["conflict",{"_index":637,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["conflictexception",{"_index":783,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('email",{"_index":831,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('username",{"_index":834,"title":{},"body":{"injectables/AuthService.html":{}}}],["conn",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query(\"set",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":1261,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["console",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error('admin",{"_index":911,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('error",{"_index":589,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.error('login",{"_index":825,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('user",{"_index":853,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(`error",{"_index":536,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["console.error(`invalid",{"_index":1149,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log",{"_index":861,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('comparing",{"_index":806,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('creating",{"_index":1362,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('found",{"_index":1392,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log('generated",{"_index":820,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('get",{"_index":1499,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('getting",{"_index":1411,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('login",{"_index":702,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('password",{"_index":810,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('processing",{"_index":1512,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('queue",{"_index":1402,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('register",{"_index":710,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('stored",{"_index":804,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":801,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`changing",{"_index":1394,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`deleted",{"_index":540,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.log(`finding",{"_index":1432,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`found",{"_index":1421,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`patch",{"_index":1145,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log(`queue",{"_index":1154,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log(`returning",{"_index":1439,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log(`updated",{"_index":532,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.log(`updating",{"_index":1390,"title":{},"body":{"injectables/QueueService.html":{}}}],["const",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":461,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor(appointmentrepository",{"_index":462,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["constructor(configservice",{"_index":1004,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":128,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{}}}],["constructor(queuerepository",{"_index":1297,"title":{},"body":{"injectables/QueueService.html":{}}}],["constructor(queueservice",{"_index":1218,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":1589,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":1603,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":765,"title":{},"body":{"injectables/AuthService.html":{}}}],["contact",{"_index":57,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["contact_number",{"_index":1646,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":21,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["context",{"_index":1592,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":1556,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":1555,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1557,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":113,"title":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["controller('appointments",{"_index":381,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["controller('auth",{"_index":693,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["controller('queue",{"_index":1118,"title":{},"body":{"controllers/QueueController.html":{}}}],["controller('queues",{"_index":1493,"title":{},"body":{"controllers/QueuesController.html":{}}}],["controller('roles",{"_index":1581,"title":{},"body":{"controllers/RolesController.html":{}}}],["controllers",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["convert",{"_index":1485,"title":{},"body":{"injectables/QueueService.html":{}}}],["converting",{"_index":722,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["cors",{"_index":1251,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":1333,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter",{"_index":914,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":1023,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["counter.currentqueue.completedat",{"_index":1447,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueue.status",{"_index":1446,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueueid",{"_index":1450,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.id",{"_index":1467,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.name",{"_index":1458,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter/entities/counter.entity",{"_index":1043,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["counter_number",{"_index":1025,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":1070,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["countername",{"_index":1466,"title":{},"body":{"injectables/QueueService.html":{}}}],["counternumber",{"_index":1017,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["counterrepository",{"_index":1299,"title":{},"body":{"injectables/QueueService.html":{}}}],["counters",{"_index":1487,"title":{},"body":{"injectables/QueueService.html":{}}}],["counterstatus",{"_index":928,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":935,"title":{},"body":{"entities/Counter.html":{}}}],["counts",{"_index":570,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["courses",{"_index":1821,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1677,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":302,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["create(@body",{"_index":385,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["create(@request",{"_index":1119,"title":{},"body":{"controllers/QueueController.html":{}}}],["create(createappointmentdto",{"_index":313,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["create(createqueuedto",{"_index":1307,"title":{},"body":{"injectables/QueueService.html":{}}}],["create(req",{"_index":1074,"title":{},"body":{"controllers/QueueController.html":{}}}],["createappointmentdto",{"_index":314,"title":{"classes/CreateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["createappointmentdto.firstname",{"_index":387,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["createappointmentdto.lastname",{"_index":388,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["created",{"_index":1334,"title":{},"body":{"injectables/QueueService.html":{}}}],["created_at",{"_index":1028,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":247,"title":{},"body":{"entities/Appointment.html":{},"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":262,"title":{},"body":{"entities/Appointment.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":1027,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createparamdecorator",{"_index":1883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createqueuedto",{"_index":957,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["createqueuedto.address",{"_index":1372,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.appointmenttype",{"_index":1375,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.firstname",{"_index":1369,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.isguest",{"_index":1129,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["createqueuedto.lastname",{"_index":1370,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.middleinitial",{"_index":1371,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.phonenumber",{"_index":1373,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.reasonofvisit",{"_index":1374,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.userid",{"_index":1128,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["creating",{"_index":1126,"title":{},"body":{"controllers/QueueController.html":{}}}],["credentials",{"_index":699,"title":{},"body":{"controllers/AuthController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["credentials'})@apibody({type",{"_index":658,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials'})@apiresponse({status",{"_index":629,"title":{},"body":{"controllers/AuthController.html":{}}}],["ctx",{"_index":1884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1445,"title":{},"body":{"injectables/QueueService.html":{}}}],["current_queue_id",{"_index":921,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueue",{"_index":916,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{}}}],["currentqueueid",{"_index":917,"title":{},"body":{"entities/Counter.html":{}}}],["data",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["data'})@apiresponse({status",{"_index":626,"title":{},"body":{"controllers/AuthController.html":{}}}],["database",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":1745,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":257,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["date')@useguards(jwtauthguard",{"_index":339,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["date(today",{"_index":1337,"title":{},"body":{"injectables/QueueService.html":{}}}],["date.getday",{"_index":504,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["datestr",{"_index":1329,"title":{},"body":{"injectables/QueueService.html":{}}}],["datetime",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["dayofweek",{"_index":503,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["dd",{"_index":587,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["debug",{"_index":803,"title":{},"body":{"injectables/AuthService.html":{}}}],["debugging",{"_index":713,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["declarations",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["decorators",{"_index":32,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["decorators/roles.decorator",{"_index":682,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["deeper",{"_index":1817,"title":{},"body":{"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":1649,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":698,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["defaultroleid",{"_index":18,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["defaultstrategy",{"_index":751,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":1551,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":39,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["delete",{"_index":362,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{}}}],["delete(':id",{"_index":442,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content)@useguards(jwtauthguard",{"_index":350,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["deleting",{"_index":541,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["deletion",{"_index":445,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["dependencies",{"_index":136,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1774,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1789,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1783,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1798,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":1620,"title":{},"body":{"injectables/RolesService.html":{}}}],["desc",{"_index":516,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"properties.html":{}}}],["detail",{"_index":1428,"title":{},"body":{"injectables/QueueService.html":{}}}],["details",{"_index":1018,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["details.entity",{"_index":1042,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["details.entity.ts",{"_index":1172,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":1179,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":1194,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":1193,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":1200,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":1199,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":1178,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":1183,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":1185,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":1174,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":1187,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":1196,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":1176,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:52",{"_index":1181,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":1032,"title":{},"body":{"entities/Queue.html":{}}}],["details?.address",{"_index":1524,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.firstname",{"_index":1520,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.lastname",{"_index":1521,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.middleinitial",{"_index":1522,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.phonenumber",{"_index":1525,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.reasonofvisit",{"_index":1523,"title":{},"body":{"controllers/QueuesController.html":{}}}],["detailsmap",{"_index":1413,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[detail.queueid",{"_index":1427,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[queue.id",{"_index":1438,"title":{},"body":{"injectables/QueueService.html":{}}}],["determine",{"_index":1335,"title":{},"body":{"injectables/QueueService.html":{}}}],["development",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":1827,"title":{},"body":{"index.html":{}}}],["different",{"_index":571,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["disable",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["disconnected",{"_index":1263,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":1814,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1816,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1678,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":106,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":1534,"title":{},"body":{"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":67,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["don't",{"_index":426,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["dotenv",{"_index":1721,"title":{},"body":{"dependencies.html":{}}}],["dropschema",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":9,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"controllers/QueueController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/create",{"_index":369,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["dto/login.dto",{"_index":678,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":679,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":371,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["during",{"_index":883,"title":{},"body":{"injectables/AuthService.html":{}}}],["e.g",{"_index":73,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["e2e",{"_index":1769,"title":{},"body":{"index.html":{}}}],["easy",{"_index":1424,"title":{},"body":{"injectables/QueueService.html":{}}}],["efficient",{"_index":1751,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1781,"title":{},"body":{"index.html":{}}}],["email",{"_index":22,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["emailorusername",{"_index":1008,"title":{},"body":{"classes/LoginDto.html":{}}}],["empty",{"_index":1430,"title":{},"body":{"injectables/QueueService.html":{}}}],["end",{"_index":412,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["enddate",{"_index":342,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["endofday",{"_index":494,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["endpoint",{"_index":711,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["ensure",{"_index":1779,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1829,"title":{},"body":{"index.html":{}}}],["entities",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/appointment.entity",{"_index":379,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["entities/queue",{"_index":1292,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["entities/queue.entity",{"_index":1117,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":1597,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":1676,"title":{},"body":{"modules/UsersModule.html":{}}}],["entity",{"_index":241,"title":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('appointments",{"_index":295,"title":{},"body":{"entities/Appointment.html":{}}}],["entity('counters",{"_index":934,"title":{},"body":{"entities/Counter.html":{}}}],["entity('queue_details",{"_index":1202,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":1045,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":1569,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":1669,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":276,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{}}}],["enumerations",{"_index":1738,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":989,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["environments",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["er_dup_entry",{"_index":855,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":535,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["error('jwt_secret",{"_index":988,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('user",{"_index":1617,"title":{},"body":{"injectables/RolesService.html":{}}}],["error.code",{"_index":854,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.message",{"_index":706,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["errors",{"_index":859,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint",{"_index":791,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/no",{"_index":795,"title":{},"body":{"injectables/AuthService.html":{}}}],["estimated_wait_time",{"_index":1034,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedwaittime",{"_index":1019,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["estimation",{"_index":1350,"title":{},"body":{"injectables/QueueService.html":{}}}],["event",{"_index":1273,"title":{},"body":{"classes/QueueGateway.html":{}}}],["example",{"_index":37,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["exceptions",{"_index":912,"title":{},"body":{"injectables/AuthService.html":{}}}],["executioncontext",{"_index":1547,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":889,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":837,"title":{},"body":{"injectables/AuthService.html":{}}}],["existingappointment",{"_index":594,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments",{"_index":549,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments.map(app",{"_index":553,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existinguserbyemail",{"_index":830,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyemail.id",{"_index":842,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername",{"_index":833,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername.id",{"_index":845,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":707,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["exists'})@apibearerauth('jwt",{"_index":638,"title":{},"body":{"controllers/AuthController.html":{}}}],["exists'})@apibody({type",{"_index":666,"title":{},"body":{"controllers/AuthController.html":{}}}],["expectation",{"_index":1258,"title":{},"body":{"classes/QueueGateway.html":{}}}],["experience",{"_index":1819,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":758,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":100,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1714,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":13,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":72,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["extract",{"_index":1120,"title":{},"body":{"controllers/QueueController.html":{},"controllers/QueuesController.html":{}}}],["extractjwt",{"_index":982,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":993,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["failed",{"_index":730,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["failing",{"_index":1431,"title":{},"body":{"injectables/QueueService.html":{}}}],["false",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"entities/Appointment.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["fast",{"_index":1793,"title":{},"body":{"index.html":{}}}],["features",{"_index":1802,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":1414,"title":{},"body":{"injectables/QueueService.html":{}}}],["fetching",{"_index":1140,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["few",{"_index":1795,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":1391,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":303,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findallbyuser",{"_index":456,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findallbyuser(userid",{"_index":470,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findbyappointmentnumber",{"_index":304,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyappointmentnumber(@param('number",{"_index":419,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyappointmentnumber(appointmentnumber",{"_index":323,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyids",{"_index":1621,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname",{"_index":1602,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":1609,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyqueuenumber",{"_index":1052,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbyqueuenumber(@param('queuenumber",{"_index":1157,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbyqueuenumber(queuenumber",{"_index":1078,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus",{"_index":1053,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus(@param('status",{"_index":1132,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbystatus(status",{"_index":1081,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatuswithdetails",{"_index":1296,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatuswithdetails(status",{"_index":1312,"title":{},"body":{"injectables/QueueService.html":{}}}],["findcompleted",{"_index":1054,"title":{},"body":{"controllers/QueueController.html":{}}}],["finding",{"_index":1441,"title":{},"body":{"injectables/QueueService.html":{}}}],["findone",{"_index":305,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findone(@param('id",{"_index":417,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":327,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findpending",{"_index":1055,"title":{},"body":{"controllers/QueueController.html":{}}}],["findpendingwithdetails",{"_index":1056,"title":{},"body":{"controllers/QueueController.html":{}}}],["findserving",{"_index":1057,"title":{},"body":{"controllers/QueueController.html":{}}}],["findservingwithdetails",{"_index":1058,"title":{},"body":{"controllers/QueueController.html":{}}}],["finduserappointments",{"_index":306,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(@user",{"_index":395,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(user",{"_index":330,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["first",{"_index":62,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["first_name",{"_index":1177,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":23,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["fk_appointment_user",{"_index":284,"title":{},"body":{"entities/Appointment.html":{}}}],["fk_current_queue",{"_index":922,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":1192,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":1198,"title":{},"body":{"entities/QueueDetails.html":{}}}],["flatten",{"_index":1510,"title":{},"body":{"controllers/QueuesController.html":{}}}],["fns",{"_index":495,"title":{},"body":{"injectables/AppointmentService.html":{},"dependencies.html":{}}}],["focus",{"_index":1801,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1832,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":631,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["foreign",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":283,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["format",{"_index":489,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["format(today",{"_index":584,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["forwardref",{"_index":1250,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["found",{"_index":519,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["found'})@apiresponse({status",{"_index":635,"title":{},"body":{"controllers/AuthController.html":{}}}],["framework",{"_index":1749,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1498,"title":{},"body":{"controllers/QueuesController.html":{}}}],["full",{"_index":826,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"index.html":{}}}],["fully",{"_index":907,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":1697,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":1113,"title":{},"body":{"controllers/QueueController.html":{}}}],["functions",{"_index":1742,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1797,"title":{},"body":{"index.html":{}}}],["generate",{"_index":555,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["generatealltimeslots",{"_index":457,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["generated",{"_index":1538,"title":{},"body":{"classes/RegisterDto.html":{}}}],["get(':id",{"_index":328,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["get(':id')@roles('admin",{"_index":1575,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id/details",{"_index":1101,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/exists",{"_index":1072,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/position",{"_index":1104,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('available",{"_index":335,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('by",{"_index":324,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('completed",{"_index":1084,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('counters",{"_index":1095,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('date",{"_index":343,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('health",{"_index":122,"title":{},"body":{"controllers/AppController.html":{}}}],["get('mine",{"_index":394,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('mine')@useguards(jwtauthguard",{"_index":332,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('number/:queuenumber",{"_index":1079,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending",{"_index":1087,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending/details",{"_index":1089,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('profile",{"_index":717,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["get('serving",{"_index":1091,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('serving/details",{"_index":1093,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('stats",{"_index":399,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{}}}],["get('stats')@useguards(jwtauthguard",{"_index":347,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('status/:status",{"_index":1082,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('user/:userid",{"_index":1584,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":1578,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('walk",{"_index":1491,"title":{},"body":{"controllers/QueuesController.html":{}}}],["get()@roles('admin",{"_index":1573,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@useguards(jwtauthguard",{"_index":319,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getappointmentsbydate",{"_index":458,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydate(date",{"_index":475,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange",{"_index":459,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange(startdate",{"_index":477,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsstats",{"_index":460,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getavailableslots",{"_index":307,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getavailableslots(@query('date",{"_index":414,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getavailableslots(date",{"_index":334,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getbydate",{"_index":308,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(@query('date",{"_index":402,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(date",{"_index":338,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange",{"_index":309,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange(startdate",{"_index":341,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getcounters",{"_index":1059,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues",{"_index":1060,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues(@body",{"_index":1141,"title":{},"body":{"controllers/QueueController.html":{}}}],["getdetailsformultiplequeues(body",{"_index":1097,"title":{},"body":{"controllers/QueueController.html":{}}}],["getdetailsformultiplequeues(queueids",{"_index":1316,"title":{},"body":{"injectables/QueueService.html":{}}}],["gethello",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":718,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["getprofile(req",{"_index":644,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(userid",{"_index":773,"title":{},"body":{"injectables/AuthService.html":{}}}],["getqueuedetails",{"_index":1061,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueuedetails(@param('id",{"_index":1159,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(id",{"_index":1100,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(queueid",{"_index":1318,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition",{"_index":1062,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueueposition(@param('id",{"_index":1161,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(id",{"_index":1103,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(queueid",{"_index":1320,"title":{},"body":{"injectables/QueueService.html":{}}}],["getstats",{"_index":310,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getting",{"_index":565,"title":{"index.html":{}},"body":{"injectables/AppointmentService.html":{}}}],["getuserroles",{"_index":1572,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":1585,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":1577,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getwalkinqueues",{"_index":1490,"title":{},"body":{"controllers/QueuesController.html":{}}}],["global",{"_index":1279,"title":{},"body":{"classes/QueueGateway.html":{}}}],["graph",{"_index":1824,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":1842,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1587,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1588,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":680,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guards/roles.guard",{"_index":683,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guest",{"_index":1359,"title":{},"body":{"injectables/QueueService.html":{}}}],["handle",{"_index":846,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueuesController.html":{}}}],["handleconnection",{"_index":1210,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":1223,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect",{"_index":1211,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":1228,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":1212,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":1230,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":1213,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":1233,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":1214,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":1236,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates",{"_index":1215,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates(client",{"_index":1239,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueService.html":{}}}],["hands",{"_index":1818,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1807,"title":{},"body":{"index.html":{}}}],["hash",{"_index":805,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasroleassigned",{"_index":901,"title":{},"body":{"injectables/AuthService.html":{}}}],["healthcheck",{"_index":119,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":239,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1822,"title":{},"body":{"index.html":{}}}],["here",{"_index":879,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["hit",{"_index":712,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["host",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["hour",{"_index":597,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["http://localhost:5173",{"_index":1253,"title":{},"body":{"classes/QueueGateway.html":{}}}],["httpcode",{"_index":365,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":443,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["https://nestjs.com",{"_index":1855,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":366,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["id",{"_index":36,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["identifier",{"_index":1679,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":42,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["ignoreexpiration",{"_index":994,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["iii",{"_index":75,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["ildefonso",{"_index":53,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["implement",{"_index":1112,"title":{},"body":{"controllers/QueueController.html":{}}}],["implements",{"_index":1206,"title":{},"body":{"classes/QueueGateway.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["in(queueids",{"_index":1420,"title":{},"body":{"injectables/QueueService.html":{}}}],["in(roleids",{"_index":1623,"title":{},"body":{"injectables/RolesService.html":{}}}],["inactive",{"_index":933,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["including",{"_index":614,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":98,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["information'})@apiresponse({status",{"_index":670,"title":{},"body":{"controllers/AuthController.html":{}}}],["infrastructure",{"_index":1804,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":55,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["inject",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["inject(forwardref",{"_index":1259,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["injectable",{"_index":235,"title":{"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["injectables",{"_index":236,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"overview.html":{}}}],["injectrepository",{"_index":485,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["injectrepository(appointment",{"_index":496,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["injectrepository(counter",{"_index":1326,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queue",{"_index":1324,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queuedetails",{"_index":1325,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(role",{"_index":1613,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":786,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["input",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["install",{"_index":1796,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1760,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":705,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["insufficient",{"_index":632,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":1825,"title":{},"body":{"index.html":{}}}],["interface",{"_index":690,"title":{"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["interfaces",{"_index":979,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"overview.html":{}}}],["intervals",{"_index":560,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["invalid",{"_index":624,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["inversejoincolumn",{"_index":1664,"title":{},"body":{"entities/User.html":{}}}],["is_guest",{"_index":1180,"title":{},"body":{"entities/QueueDetails.html":{}}}],["isarray",{"_index":92,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isauthorized",{"_index":870,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":973,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isboolean()@isoptional",{"_index":966,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isdatestring",{"_index":955,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isemail",{"_index":88,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":954,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isenum(appointmentstatus",{"_index":956,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isenum(queuestatus",{"_index":1635,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":1633,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["isguest",{"_index":248,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["isnan(number(payload.sub",{"_index":999,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnotempty",{"_index":953,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isdatestring",{"_index":940,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnotempty()@isstring",{"_index":938,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnumber",{"_index":91,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional",{"_index":89,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isenum(appointmentstatus",{"_index":950,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isoptional()@isstring",{"_index":946,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["ispasswordvalid",{"_index":808,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":90,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":963,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isstring()@isoptional",{"_index":961,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalid",{"_index":492,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalid(date",{"_index":500,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalid(parseddate",{"_index":547,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalidemail",{"_index":762,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":775,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":1404,"title":{},"body":{"injectables/QueueService.html":{}}}],["items",{"_index":697,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["job",{"_index":1835,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1837,"title":{},"body":{"index.html":{}}}],["john",{"_index":104,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":1532,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":64,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe",{"_index":102,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":1543,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":85,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["join",{"_index":1848,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":288,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["joined",{"_index":1271,"title":{},"body":{"classes/QueueGateway.html":{}}}],["jointable",{"_index":1667,"title":{},"body":{"entities/User.html":{}}}],["jr",{"_index":74,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["jr.'})@isstring()@isoptional",{"_index":76,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["jwt",{"_index":752,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":749,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":372,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":992,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":744,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":753,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":978,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":766,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":742,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1852,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1670,"title":{},"body":{"entities/User.html":{}}}],["key",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["last",{"_index":66,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["last_name",{"_index":1182,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastname",{"_index":24,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["lastname}${nameextension",{"_index":827,"title":{},"body":{"injectables/AuthService.html":{}}}],["learn",{"_index":1810,"title":{},"body":{"index.html":{}}}],["legacy",{"_index":1495,"title":{},"body":{"controllers/QueuesController.html":{}}}],["legend",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["lessthanorequal",{"_index":487,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["lessthanorequal(new",{"_index":1476,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queue.createdat",{"_index":1407,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queueid",{"_index":1408,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(today",{"_index":1341,"title":{},"body":{"injectables/QueueService.html":{}}}],["license",{"_index":1858,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1840,"title":{},"body":{"index.html":{}}}],["line",{"_index":793,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["linkedin",{"_index":1834,"title":{},"body":{"index.html":{}}}],["literal",{"_index":1064,"title":{},"body":{"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["localhost",{"_index":1874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":1361,"title":{},"body":{"injectables/QueueService.html":{}}}],["logger",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"classes/QueueGateway.html":{}}}],["logger(appointmentcontroller.name",{"_index":384,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["logger(queuegateway.name",{"_index":1220,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logging",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":604,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["login'})@apiresponse({status",{"_index":654,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":701,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":652,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":653,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":788,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":807,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto})@post('login",{"_index":659,"title":{},"body":{"controllers/AuthController.html":{}}}],["looking",{"_index":1784,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":1425,"title":{},"body":{"injectables/QueueService.html":{}}}],["loop",{"_index":1831,"title":{},"body":{"index.html":{}}}],["loss",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["main",{"_index":50,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["makes",{"_index":1791,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1803,"title":{},"body":{"index.html":{}}}],["many",{"_index":1405,"title":{},"body":{"injectables/QueueService.html":{}}}],["manytomany",{"_index":1568,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":1565,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":1662,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":287,"title":{},"body":{"entities/Appointment.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":280,"title":{},"body":{"entities/Appointment.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["mark",{"_index":1444,"title":{},"body":{"injectables/QueueService.html":{}}}],["match",{"_index":1254,"title":{},"body":{"classes/QueueGateway.html":{}}}],["matching",{"_index":112,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor",{"_index":1483,"title":{},"body":{"injectables/QueueService.html":{}}}],["mau",{"_index":1787,"title":{},"body":{"index.html":{}}}],["message",{"_index":1452,"title":{},"body":{"injectables/QueueService.html":{}}}],["metadata",{"_index":1728,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":117,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["middle",{"_index":69,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["middle_initial",{"_index":1184,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":1656,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":249,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["middlename",{"_index":25,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["migrationsrun",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["min",{"_index":78,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength",{"_index":82,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(8",{"_index":103,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minute",{"_index":598,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["minutes",{"_index":1351,"title":{},"body":{"injectables/QueueService.html":{}}}],["miscellaneous",{"_index":1737,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1839,"title":{},"body":{"index.html":{}}}],["mm",{"_index":586,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["mode",{"_index":1764,"title":{},"body":{"index.html":{}}}],["module",{"_index":133,"title":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":135,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/appointment/appointment.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/queue/queue.module",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1453,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["morethanorequal",{"_index":488,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["multiple",{"_index":1429,"title":{},"body":{"injectables/QueueService.html":{}}}],["mysql",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1723,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1853,"title":{},"body":{"index.html":{}}}],["name",{"_index":63,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["name_extension",{"_index":1659,"title":{},"body":{"entities/User.html":{}}}],["nameextension",{"_index":26,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["namespace",{"_index":1257,"title":{},"body":{"classes/QueueGateway.html":{}}}],["need",{"_index":1287,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["nest",{"_index":1755,"title":{},"body":{"index.html":{}}}],["nested",{"_index":1508,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nestframework",{"_index":1857,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1775,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":125,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1549,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":745,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1629,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["nestjs/passport",{"_index":747,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1713,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":96,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1248,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":383,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["newdate",{"_index":525,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["newtime",{"_index":527,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["next",{"_index":792,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["nextcalled",{"_index":1469,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue",{"_index":1449,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.counternumber",{"_index":1457,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.id",{"_index":1460,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.status",{"_index":1455,"title":{},"body":{"injectables/QueueService.html":{}}}],["node.js",{"_index":1748,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":484,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["notfoundexception(`appointment",{"_index":518,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["notfoundexception(`counter",{"_index":1443,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`details",{"_index":1388,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`queue",{"_index":1385,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`role",{"_index":1616,"title":{},"body":{"injectables/RolesService.html":{}}}],["notify",{"_index":1380,"title":{},"body":{"injectables/QueueService.html":{}}}],["notifycounterupdate",{"_index":1216,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":1242,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":1217,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":1244,"title":{},"body":{"classes/QueueGateway.html":{}}}],["npm",{"_index":1759,"title":{},"body":{"index.html":{}}}],["null",{"_index":720,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["null/undefined",{"_index":1514,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nullable",{"_index":281,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":31,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["number(createqueuedto.userid",{"_index":1360,"title":{},"body":{"injectables/QueueService.html":{}}}],["number(payload.sub",{"_index":1000,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["number(req.user.sub",{"_index":729,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["number(targetuserid",{"_index":737,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["number/:number",{"_index":325,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object",{"_index":696,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["object.assign(appointment",{"_index":531,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["object.values(appointmentstatus).includes(status",{"_index":437,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object.values(appointmentstatus).join",{"_index":440,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object.values(queuestatus",{"_index":1152,"title":{},"body":{"controllers/QueueController.html":{}}}],["object.values(queuestatus).includes(body.status",{"_index":1148,"title":{},"body":{"controllers/QueueController.html":{}}}],["occurred",{"_index":913,"title":{},"body":{"injectables/AuthService.html":{}}}],["offer",{"_index":1836,"title":{},"body":{"index.html":{}}}],["official",{"_index":1788,"title":{},"body":{"index.html":{}}}],["ok",{"_index":132,"title":{},"body":{"controllers/AppController.html":{}}}],["ondelete",{"_index":1189,"title":{},"body":{"entities/QueueDetails.html":{}}}],["one",{"_index":439,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueService.html":{}}}],["onetomany",{"_index":1041,"title":{},"body":{"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":1031,"title":{},"body":{"entities/Queue.html":{}}}],["onetoone",{"_index":930,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":919,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":1207,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":1208,"title":{},"body":{"classes/QueueGateway.html":{}}}],["open",{"_index":1841,"title":{},"body":{"index.html":{}}}],["operator",{"_index":1618,"title":{},"body":{"injectables/RolesService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":514,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["organize",{"_index":1423,"title":{},"body":{"injectables/QueueService.html":{}}}],["origin",{"_index":1252,"title":{},"body":{"classes/QueueGateway.html":{}}}],["out",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"index.html":{},"overview.html":{}}}],["outer",{"_index":885,"title":{},"body":{"injectables/AuthService.html":{}}}],["override",{"_index":1123,"title":{},"body":{"controllers/QueueController.html":{}}}],["overview",{"_index":1862,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":425,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["package",{"_index":1708,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":361,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["param('id",{"_index":422,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["param('userid",{"_index":735,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["parameter",{"_index":405,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["parameters",{"_index":317,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":544,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseddate",{"_index":545,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseduserid",{"_index":1364,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseint(process.env.db_port",{"_index":1875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseiso",{"_index":491,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(createappointmentdto.appointmentdate",{"_index":499,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(date",{"_index":546,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["part",{"_index":1828,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1628,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["partialtype(createappointmentdto",{"_index":1626,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["passport",{"_index":984,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":746,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":750,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":981,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":985,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":27,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":836,"title":{},"body":{"injectables/AuthService.html":{}}}],["password123",{"_index":81,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["password123'})@isstring()@isnotempty",{"_index":1013,"title":{},"body":{"classes/LoginDto.html":{}}}],["past",{"_index":510,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["patch",{"_index":360,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{}}}],["patch(':id",{"_index":421,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{}}}],["patch(':id')@useguards(jwtauthguard",{"_index":354,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["patch(':id/status",{"_index":435,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{}}}],["patch(':id/status')@useguards(jwtauthguard",{"_index":357,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["path",{"_index":1497,"title":{},"body":{"controllers/QueuesController.html":{}}}],["payload",{"_index":816,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.roles",{"_index":1003,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":998,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pending",{"_index":291,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["pendingcount",{"_index":573,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["pendingqueueswithdetails",{"_index":1503,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pendingqueueswithdetails.length",{"_index":1505,"title":{},"body":{"controllers/QueuesController.html":{}}}],["per",{"_index":1352,"title":{},"body":{"injectables/QueueService.html":{}}}],["perform",{"_index":876,"title":{},"body":{"injectables/AuthService.html":{}}}],["performance",{"_index":1417,"title":{},"body":{"injectables/QueueService.html":{}}}],["permission",{"_index":432,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["permissions",{"_index":732,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["permissions'})@apiresponse({status",{"_index":633,"title":{},"body":{"controllers/AuthController.html":{}}}],["person",{"_index":1353,"title":{},"body":{"injectables/QueueService.html":{}}}],["philippines",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["phone_number",{"_index":1186,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":250,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["platform",{"_index":1786,"title":{},"body":{"index.html":{}}}],["please",{"_index":1813,"title":{},"body":{"index.html":{}}}],["pm",{"_index":558,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["port",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":1267,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["possible",{"_index":1782,"title":{},"body":{"index.html":{}}}],["post",{"_index":315,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('admin/update",{"_index":734,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('bulk",{"_index":1098,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter",{"_index":1065,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter/:counterid/call",{"_index":1068,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('login",{"_index":700,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('register",{"_index":708,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('update",{"_index":727,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post()@useguards(jwtauthguard",{"_index":1075,"title":{},"body":{"controllers/QueueController.html":{}}}],["potential",{"_index":1513,"title":{},"body":{"controllers/QueuesController.html":{}}}],["prefix",{"_index":300,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{}}}],["prevent",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["prevents",{"_index":1124,"title":{},"body":{"controllers/QueueController.html":{}}}],["primarygeneratedcolumn",{"_index":265,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":382,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["process.env.db_host",{"_index":1873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":1877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":646,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["profile'})@apiresponse({status",{"_index":645,"title":{},"body":{"controllers/AuthController.html":{}}}],["progressive",{"_index":1747,"title":{},"body":{"index.html":{}}}],["project",{"_index":1757,"title":{},"body":{"index.html":{}}}],["promise",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["promise.all",{"_index":578,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["proper",{"_index":864,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":848,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["provideduserid",{"_index":1363,"title":{},"body":{"injectables/QueueService.html":{}}}],["providers",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["query",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/QueueService.html":{}}}],["query('end",{"_index":410,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('set",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["query('start",{"_index":409,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["questions",{"_index":1811,"title":{},"body":{"index.html":{}}}],["queue",{"_index":918,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":1398,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.completedat.gettime",{"_index":1481,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.controller",{"_index":1289,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":920,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":1400,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.createdat",{"_index":1518,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.createdat.gettime",{"_index":1482,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.details",{"_index":1188,"title":{},"body":{"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["queue.details[0",{"_index":1516,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.dto",{"_index":1116,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queue.dto.ts",{"_index":959,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:11",{"_index":1632,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:13",{"_index":968,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:17",{"_index":969,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:21",{"_index":962,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:25",{"_index":970,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:29",{"_index":971,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":964,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:37",{"_index":967,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:5",{"_index":972,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":1634,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:9",{"_index":965,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.entity",{"_index":1201,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.estimatedwaittime",{"_index":1519,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.gateway",{"_index":1291,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["queue.id",{"_index":1435,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.queuenumber",{"_index":1517,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.service",{"_index":1115,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{}}}],["queue.status",{"_index":1395,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue/${id}/status",{"_index":1146,"title":{},"body":{"controllers/QueueController.html":{}}}],["queue/entities/queue.entity",{"_index":931,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":1191,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":1037,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":1047,"title":{"controllers/QueueController.html":{}},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":1265,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":1030,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queuedetails.queue",{"_index":1377,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuedetailsrepository",{"_index":1298,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuegateway",{"_index":1204,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":1173,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["queueids",{"_index":1142,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queueids.length",{"_index":1412,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuemodule",{"_index":147,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenumber",{"_index":1020,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queuerepository",{"_index":1301,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues",{"_index":1127,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queues.controller",{"_index":1290,"title":{},"body":{"modules/QueueModule.html":{}}}],["queues.length",{"_index":1433,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues.map((queue",{"_index":1434,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues/walk",{"_index":1500,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queuescontroller",{"_index":1286,"title":{"controllers/QueuesController.html":{}},"body":{"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queueservice",{"_index":1114,"title":{"injectables/QueueService.html":{}},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":1039,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":1471,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.completed",{"_index":1397,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.pending",{"_index":1046,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["queuestatus.serving",{"_index":1456,"title":{},"body":{"injectables/QueueService.html":{}}}],["range",{"_index":408,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["range')@useguards(jwtauthguard",{"_index":344,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["re",{"_index":857,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":1849,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":129,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{}}}],["ready",{"_index":1773,"title":{},"body":{"index.html":{}}}],["real",{"_index":1826,"title":{},"body":{"index.html":{}}}],["reason_of_visit",{"_index":1195,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":251,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["received",{"_index":703,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["referencedcolumnname",{"_index":1673,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":1727,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1548,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["register",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":709,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["register(registerdto",{"_index":661,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":662,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registerdto})@post('register",{"_index":667,"title":{},"body":{"controllers/AuthController.html":{}}}],["registration",{"_index":665,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["registration'})@apiresponse({status",{"_index":663,"title":{},"body":{"controllers/AuthController.html":{}}}],["relation",{"_index":1376,"title":{},"body":{"injectables/QueueService.html":{}}}],["relations",{"_index":800,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["remove",{"_index":311,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{}}}],["remove(@param('id",{"_index":444,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["remove(id",{"_index":349,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["replaces",{"_index":1619,"title":{},"body":{"injectables/RolesService.html":{}}}],["repository",{"_index":463,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["req",{"_index":643,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user",{"_index":723,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user.sub",{"_index":724,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user?.id",{"_index":1122,"title":{},"body":{"controllers/QueueController.html":{}}}],["request",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":1886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user?.roles",{"_index":1558,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requestwithuser",{"_index":608,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["required",{"_index":406,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["requiredroles",{"_index":1553,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1559,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requiring",{"_index":1794,"title":{},"body":{"index.html":{}}}],["reset",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["resources",{"_index":1805,"title":{},"body":{"index.html":{}}}],["response",{"_index":822,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":537,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["result.affected",{"_index":539,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["result.length",{"_index":1440,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["results",{"_index":111,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":647,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["retrieving",{"_index":909,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":130,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":121,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["robert",{"_index":105,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["robert'})@isstring()@isoptional",{"_index":70,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["role",{"_index":35,"title":{"entities/Role.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["role.id",{"_index":903,"title":{},"body":{"injectables/AuthService.html":{}}}],["role.name",{"_index":815,"title":{},"body":{"injectables/AuthService.html":{}}}],["role_id",{"_index":1674,"title":{},"body":{"entities/User.html":{}}}],["roleid",{"_index":891,"title":{},"body":{"injectables/AuthService.html":{}}}],["roleids",{"_index":19,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{}}}],["rolenames",{"_index":813,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles",{"_index":377,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":391,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["roles.controller",{"_index":1598,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":814,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":1580,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":1668,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["roles/roles.service",{"_index":785,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles_key",{"_index":1550,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":1570,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":375,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesguard)@roles('admin",{"_index":320,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{}}}],["rolesmodule",{"_index":148,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":1605,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":767,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["room",{"_index":1463,"title":{},"body":{"injectables/QueueService.html":{}}}],["rooms",{"_index":1276,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":1878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1761,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1780,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1730,"title":{},"body":{"dependencies.html":{}}}],["san",{"_index":52,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["save",{"_index":1346,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue",{"_index":1354,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue.id",{"_index":1368,"title":{},"body":{"injectables/QueueService.html":{}}}],["scalable",{"_index":1752,"title":{},"body":{"index.html":{}}}],["schema",{"_index":656,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["secret",{"_index":755,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":986,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":995,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["seeddatabaseifneeded",{"_index":1698,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":1744,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":551,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["send",{"_index":1274,"title":{},"body":{"classes/QueueGateway.html":{}}}],["sequence",{"_index":1328,"title":{},"body":{"injectables/QueueService.html":{}}}],["server",{"_index":1209,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["service",{"_index":1502,"title":{},"body":{"controllers/QueuesController.html":{}}}],["serving",{"_index":1044,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["servingcount",{"_index":1470,"title":{},"body":{"injectables/QueueService.html":{}}}],["servingqueueswithdetails",{"_index":1504,"title":{},"body":{"controllers/QueuesController.html":{}}}],["servingqueueswithdetails.length",{"_index":1506,"title":{},"body":{"controllers/QueuesController.html":{}}}],["set",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["setmetadata(roles_key",{"_index":1882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":1256,"title":{},"body":{"classes/QueueGateway.html":{}}}],["setup",{"_index":1758,"title":{},"body":{"index.html":{}}}],["sheesh",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":1753,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":757,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":1349,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["simplified",{"_index":1366,"title":{},"body":{"injectables/QueueService.html":{}}}],["simplify",{"_index":1356,"title":{},"body":{"injectables/QueueService.html":{}}}],["single",{"_index":1415,"title":{},"body":{"injectables/QueueService.html":{}}}],["slot",{"_index":591,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["slots",{"_index":336,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["socket",{"_index":1224,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":1249,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["specific",{"_index":858,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["specified",{"_index":548,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["sponsors",{"_index":1844,"title":{},"body":{"index.html":{}}}],["sql",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["src/.../appointment.entity.ts",{"_index":1739,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../counter.entity.ts",{"_index":1740,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":1869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1743,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":1741,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":116,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":123,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":120,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":237,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":238,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:101",{"_index":668,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:111",{"_index":651,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:133",{"_index":674,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:182",{"_index":642,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:62",{"_index":660,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":743,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":761,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:104",{"_index":778,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":768,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:205",{"_index":776,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:210",{"_index":774,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:238",{"_index":780,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":782,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:372",{"_index":771,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":777,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":1685,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":1688,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1007,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:15",{"_index":1011,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:23",{"_index":1014,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":1527,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:22",{"_index":1531,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:30",{"_index":1544,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:40",{"_index":1542,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:48",{"_index":1533,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:56",{"_index":1536,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:64",{"_index":1535,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:72",{"_index":1539,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:80",{"_index":1540,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:87",{"_index":1529,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/update",{"_index":6,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":974,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":1545,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:11",{"_index":1590,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:14",{"_index":1591,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":980,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:13",{"_index":1005,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:28",{"_index":1006,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":1695,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1696,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/appointment/appointment.controller.ts",{"_index":299,"title":{},"body":{"controllers/AppointmentController.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.controller.ts:102",{"_index":326,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:109",{"_index":355,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:129",{"_index":358,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:144",{"_index":351,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:33",{"_index":316,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:41",{"_index":322,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:48",{"_index":333,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:56",{"_index":348,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:64",{"_index":340,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:75",{"_index":345,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:87",{"_index":337,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:96",{"_index":329,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.module.ts",{"_index":451,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["src/modules/appointment/appointment.service.ts",{"_index":454,"title":{},"body":{"injectables/AppointmentService.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.service.ts:10",{"_index":464,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:105",{"_index":482,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:129",{"_index":481,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:142",{"_index":483,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:154",{"_index":480,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:16",{"_index":468,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:184",{"_index":476,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:205",{"_index":478,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:222",{"_index":479,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:269",{"_index":467,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:288",{"_index":474,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:62",{"_index":469,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:71",{"_index":471,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:81",{"_index":473,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:93",{"_index":472,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/dto/create",{"_index":936,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/dto/update",{"_index":1625,"title":{},"body":{"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts",{"_index":243,"title":{},"body":{"entities/Appointment.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:14",{"_index":266,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:17",{"_index":260,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:20",{"_index":264,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:23",{"_index":270,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:26",{"_index":272,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:29",{"_index":255,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:32",{"_index":273,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:35",{"_index":274,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:38",{"_index":258,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:41",{"_index":261,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:48",{"_index":277,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:51",{"_index":286,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:58",{"_index":285,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:61",{"_index":269,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:64",{"_index":263,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:67",{"_index":279,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":915,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":926,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":927,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":929,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":925,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":923,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/queue/dto/create",{"_index":958,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":1631,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":1171,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":1015,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":1036,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":1038,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":1040,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":1026,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":1029,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":1022,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":1035,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":1033,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":1024,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":1048,"title":{},"body":{"controllers/QueueController.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts:109",{"_index":1106,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:114",{"_index":1086,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:119",{"_index":1080,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:124",{"_index":1102,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:129",{"_index":1105,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:134",{"_index":1108,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:139",{"_index":1069,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:144",{"_index":1066,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:149",{"_index":1096,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:154",{"_index":1073,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:24",{"_index":1076,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:42",{"_index":1077,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:47",{"_index":1083,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:52",{"_index":1088,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:57",{"_index":1092,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:62",{"_index":1085,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:68",{"_index":1090,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:74",{"_index":1094,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:80",{"_index":1099,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:85",{"_index":1109,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":1205,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:21",{"_index":1221,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:24",{"_index":1219,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:31",{"_index":1225,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:35",{"_index":1229,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:40",{"_index":1238,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:47",{"_index":1232,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:53",{"_index":1235,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:59",{"_index":1241,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:66",{"_index":1245,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:71",{"_index":1243,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":1285,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":1294,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.service.ts:110",{"_index":1309,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:116",{"_index":1311,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:123",{"_index":1314,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:135",{"_index":1310,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:147",{"_index":1319,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:163",{"_index":1323,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:20",{"_index":1300,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:203",{"_index":1321,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:222",{"_index":1317,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:254",{"_index":1313,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:293",{"_index":1304,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:32",{"_index":1308,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:363",{"_index":1322,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:410",{"_index":1303,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:416",{"_index":1315,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:423",{"_index":1306,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queues.controller.ts",{"_index":1489,"title":{},"body":{"controllers/QueuesController.html":{},"coverage.html":{}}}],["src/modules/queue/queues.controller.ts:10",{"_index":1492,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":1561,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":1564,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":1562,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":1567,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":1563,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":1571,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":1574,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":1576,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":1579,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":1596,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":1600,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":1608,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":1611,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":1610,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":1612,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":1607,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":1604,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1645,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":1654,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":1652,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":1666,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":1661,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":1653,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":1657,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":1655,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:37",{"_index":1658,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":1660,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:43",{"_index":1647,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:46",{"_index":1648,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":1650,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":1651,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:67",{"_index":1665,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module.ts",{"_index":1675,"title":{},"body":{"modules/UsersModule.html":{}}}],["st",{"_index":51,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["staff",{"_index":321,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["staff'].includes(role.name",{"_index":429,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["start",{"_index":1762,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1765,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1766,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":346,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["started",{"_index":1746,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1756,"title":{},"body":{"index.html":{}}}],["startofday",{"_index":493,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["statement",{"_index":714,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["statements",{"_index":1680,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":400,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["stats",{"_index":590,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["status",{"_index":124,"title":{},"body":{"controllers/AppController.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{}}}],["statuses",{"_index":572,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["stay",{"_index":1830,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1777,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":1792,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":983,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["strength",{"_index":835,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":47,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["string(payload.email",{"_index":1001,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["string(todaycount",{"_index":1344,"title":{},"body":{"injectables/QueueService.html":{}}}],["structure",{"_index":1509,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sub",{"_index":691,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["subscribemessage",{"_index":1247,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":1231,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('join_queue_updates",{"_index":1240,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":1234,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":1237,"title":{},"body":{"classes/QueueGateway.html":{}}}],["success",{"_index":821,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{}}}],["successful",{"_index":655,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["successfully",{"_index":619,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["successfully'})@apiresponse({status",{"_index":648,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":694,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["super",{"_index":991,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":733,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["super_admin')@post('admin/update",{"_index":640,"title":{},"body":{"controllers/AuthController.html":{}}}],["support",{"_index":1812,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supporting",{"_index":1494,"title":{},"body":{"controllers/QueuesController.html":{}}}],["svg",{"_index":1860,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1733,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":1707,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1706,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1778,"title":{},"body":{"index.html":{}}}],["taken",{"_index":832,"title":{},"body":{"injectables/AuthService.html":{}}}],["target",{"_index":873,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuser",{"_index":874,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuserid",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["test",{"_index":1012,"title":{},"body":{"classes/LoginDto.html":{},"index.html":{}}}],["test:covdeployment",{"_index":1771,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1770,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":101,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isemail()@isnotempty",{"_index":1530,"title":{},"body":{"classes/RegisterDto.html":{}}}],["test@example.com'})@isemail()@isoptional",{"_index":60,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isnotempty",{"_index":1010,"title":{},"body":{"classes/LoginDto.html":{}}}],["tests",{"_index":1767,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1843,"title":{},"body":{"index.html":{}}}],["this.appointmentrepository.count",{"_index":579,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.delete(id",{"_index":538,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.find",{"_index":513,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.findone",{"_index":517,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(appointment",{"_index":543,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(updated",{"_index":533,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentservice.create(createappointmentdto",{"_index":389,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findall",{"_index":393,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findallbyuser(user.id",{"_index":398,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findbyappointmentnumber(appointmentnumber",{"_index":420,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findone(+id",{"_index":418,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydate(date",{"_index":407,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydaterange(startdate",{"_index":413,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsstats",{"_index":401,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getavailableslots(date",{"_index":416,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.remove(+id",{"_index":447,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.update(+id",{"_index":434,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.updatestatus(+id",{"_index":441,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appservice.gethello",{"_index":131,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.adminupdateuser",{"_index":736,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.getprofile(number(req.user.sub",{"_index":726,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":704,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(registerdto",{"_index":715,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.updateuserinfo",{"_index":728,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.checktimeslotavailability(newdate",{"_index":529,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.counterrepository.create",{"_index":1486,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.find",{"_index":1488,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.findone",{"_index":1442,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.save(counter",{"_index":1451,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(id",{"_index":520,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["this.findone(queueid",{"_index":1386,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.generatealltimeslots",{"_index":562,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.getdetailsformultiplequeues(queueids",{"_index":1436,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getprofile(targetuserid",{"_index":908,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getqueueposition(queueid",{"_index":1389,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(savedqueue.id",{"_index":1379,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.isvalidemail(email",{"_index":829,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isvalidemail(updateuserdto.email",{"_index":841,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":819,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log('fetching",{"_index":392,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`client",{"_index":1260,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`creating",{"_index":386,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`deleting",{"_index":446,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`fetching",{"_index":396,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`socket",{"_index":1270,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`updating",{"_index":433,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.queuedetailsrepository.create",{"_index":1367,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.find",{"_index":1419,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.findone",{"_index":1387,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.save(queuedetails",{"_index":1378,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifycounterupdate(counterid",{"_index":1468,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(id",{"_index":1403,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(nextqueue.id",{"_index":1465,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.server.emit('queuelistupdate",{"_index":1381,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.count",{"_index":1340,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.create",{"_index":1347,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.find",{"_index":1383,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.findone",{"_index":1384,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(counter.currentqueue",{"_index":1448,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(nextqueue",{"_index":1459,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(queue",{"_index":1355,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queueservice.addcounter(data.name",{"_index":1167,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.callnext(+counterid",{"_index":1165,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.checkexists(+id",{"_index":1170,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.create(createqueuedto",{"_index":1130,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findall",{"_index":1131,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbyqueuenumber(queuenumber",{"_index":1158,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.completed",{"_index":1136,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.pending",{"_index":1134,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.serving",{"_index":1135,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(status",{"_index":1133,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.pending",{"_index":1137,"title":{},"body":{"controllers/QueueController.html":{},"controllers/QueuesController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.serving",{"_index":1138,"title":{},"body":{"controllers/QueueController.html":{},"controllers/QueuesController.html":{}}}],["this.queueservice.findone(+id",{"_index":1156,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getcounters",{"_index":1168,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getdetailsformultiplequeues(body.queueids",{"_index":1143,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(+id",{"_index":1160,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":1266,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(+id",{"_index":1162,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":1268,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getstats",{"_index":1155,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.update(+id",{"_index":1153,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.reflector.getallandoverride",{"_index":1554,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":1614,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findby",{"_index":1622,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":1615,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.assignrolestouser",{"_index":894,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findall",{"_index":1582,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":1583,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(roleid",{"_index":892,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findone(updateuserdto.defaultroleid",{"_index":898,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":1586,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(adminid",{"_index":867,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(targetuserid",{"_index":900,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":812,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.emit('counterlistupdate",{"_index":1281,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":1278,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":1280,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":1277,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.updateuserinfo(targetuserid",{"_index":882,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.findone",{"_index":787,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["this.usersrepository.save(user",{"_index":1624,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.usersrepository.update(targetuserid",{"_index":906,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":403,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["ties",{"_index":1410,"title":{},"body":{"injectables/QueueService.html":{}}}],["time",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["time_zone",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["today",{"_index":511,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["today's",{"_index":582,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["today.getfullyear()}${string(today.getmonth",{"_index":1330,"title":{},"body":{"injectables/QueueService.html":{}}}],["today.sethours(0",{"_index":512,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todayappointments",{"_index":583,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todaycount",{"_index":1339,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart",{"_index":1336,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart.sethours(0",{"_index":1338,"title":{},"body":{"injectables/QueueService.html":{}}}],["token",{"_index":818,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{}}}],["tomorrow",{"_index":567,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["tomorrow.sethours(0",{"_index":569,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["total",{"_index":588,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["totalcount",{"_index":577,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["totalwaittimems",{"_index":1479,"title":{},"body":{"injectables/QueueService.html":{}}}],["touch",{"_index":1850,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":1717,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":282,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["trust",{"_index":1357,"title":{},"body":{"injectables/QueueService.html":{}}}],["try",{"_index":497,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["turn",{"_index":1464,"title":{},"body":{"injectables/QueueService.html":{}}}],["twitter",{"_index":1856,"title":{},"body":{"index.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1358,"title":{},"body":{"injectables/QueueService.html":{}}}],["typeorm",{"_index":289,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([appointment",{"_index":453,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":1293,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":1599,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":760,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":1630,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["typescript",{"_index":794,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["ui",{"_index":1734,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":628,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorized'})@apibearerauth('jwt",{"_index":649,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":671,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":675,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('admin",{"_index":865,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('insufficient",{"_index":872,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":725,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('user",{"_index":838,"title":{},"body":{"injectables/AuthService.html":{}}}],["uncomment",{"_index":1110,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["undefined})@apiresponse({status",{"_index":657,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray()@isoptional",{"_index":45,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["unexpected",{"_index":860,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":296,"title":{},"body":{"entities/Appointment.html":{},"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["unit",{"_index":1768,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":318,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1868,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":796,"title":{},"body":{"injectables/AuthService.html":{}}}],["update",{"_index":11,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["update'})@apibody({type",{"_index":616,"title":{},"body":{"controllers/AuthController.html":{}}}],["update(@param('id",{"_index":1163,"title":{},"body":{"controllers/QueueController.html":{}}}],["update(id",{"_index":352,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["updateappointmentdto",{"_index":353,"title":{"classes/UpdateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["updateappointmentdto.appointmentdate",{"_index":523,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updateappointmentdto.appointmenttime",{"_index":524,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updated",{"_index":530,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["updated'})@apiresponse({status",{"_index":620,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatedat",{"_index":252,"title":{},"body":{"entities/Appointment.html":{}}}],["updatedatecolumn",{"_index":278,"title":{},"body":{"entities/Appointment.html":{}}}],["updatedqueue",{"_index":1401,"title":{},"body":{"injectables/QueueService.html":{}}}],["updateduser",{"_index":851,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateduser.defaultrole?.name",{"_index":852,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateprofile",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["updateprofile(req",{"_index":669,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatequeuedto",{"_index":1107,"title":{"classes/UpdateQueueDto.html":{}},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updatequeuedto.counternumber",{"_index":1399,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto.status",{"_index":1393,"title":{},"body":{"injectables/QueueService.html":{}}}],["updates",{"_index":886,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"index.html":{}}}],["updatestatus",{"_index":312,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/QueueController.html":{}}}],["updatestatus(@param('id",{"_index":1144,"title":{},"body":{"controllers/QueueController.html":{}}}],["updatestatus(id",{"_index":356,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/QueueController.html":{}}}],["updateuserdto",{"_index":14,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["updateuserdto.defaultroleid",{"_index":897,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.email",{"_index":840,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.password",{"_index":849,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.password.length",{"_index":850,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids",{"_index":887,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.includes(updateuserdto.defaultroleid",{"_index":905,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.join",{"_index":896,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.length",{"_index":888,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.username",{"_index":843,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto:22",{"_index":61,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:27",{"_index":86,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:37",{"_index":84,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:42",{"_index":65,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:47",{"_index":71,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:52",{"_index":68,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:60",{"_index":77,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:68",{"_index":59,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:76",{"_index":56,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto})@useguards(jwtauthguard)@post('update",{"_index":673,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserinfo",{"_index":763,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserinfo(userid",{"_index":779,"title":{},"body":{"injectables/AuthService.html":{}}}],["updating",{"_index":97,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["use",{"_index":1288,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["usefactory",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":363,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard",{"_index":390,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["user",{"_index":12,"title":{"entities/User.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["user.defaultrole?.name",{"_index":824,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":681,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["user.dto.ts",{"_index":7,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:22",{"_index":1638,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1644,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":1643,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:42",{"_index":1639,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:47",{"_index":1641,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:52",{"_index":1640,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:60",{"_index":1642,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1637,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:76",{"_index":1636,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:90",{"_index":40,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:99",{"_index":46,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":817,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":397,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{}}}],["user.password",{"_index":790,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":1566,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.roles.some(role",{"_index":428,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["user.username",{"_index":844,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/:userid",{"_index":641,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["user_id",{"_index":1197,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":1663,"title":{},"body":{"entities/User.html":{}}}],["userentity",{"_index":331,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["userid",{"_index":253,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["username",{"_index":28,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":899,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["userroles.includes(role",{"_index":1560,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["userroles.some",{"_index":902,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":1125,"title":{},"body":{"controllers/QueueController.html":{},"entities/Role.html":{}}}],["users/entities/user.entity",{"_index":290,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["usersmodule",{"_index":149,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":769,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["userwithoutpassword",{"_index":823,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":1365,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["utc",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["utc+8",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["valid",{"_index":811,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":828,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{}}}],["validate(payload",{"_index":996,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":764,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":781,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":997,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validator",{"_index":93,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["validity",{"_index":498,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["validvalues",{"_index":1151,"title":{},"body":{"controllers/QueueController.html":{}}}],["value",{"_index":1147,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1686,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":990,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":797,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify",{"_index":863,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1866,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1820,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1809,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1823,"title":{},"body":{"index.html":{}}}],["void",{"_index":1227,"title":{},"body":{"classes/QueueGateway.html":{}}}],["wait",{"_index":1474,"title":{},"body":{"injectables/QueueService.html":{}}}],["waiting",{"_index":1454,"title":{},"body":{"injectables/QueueService.html":{}}}],["walk",{"_index":1526,"title":{},"body":{"controllers/QueuesController.html":{}}}],["want",{"_index":1111,"title":{},"body":{"controllers/QueueController.html":{}}}],["watch",{"_index":1763,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":878,"title":{},"body":{"injectables/AuthService.html":{}}}],["website",{"_index":1854,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":1246,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":1222,"title":{},"body":{"classes/QueueGateway.html":{}}}],["weekend",{"_index":502,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["weekends",{"_index":509,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["willbeassigned",{"_index":904,"title":{},"body":{"injectables/AuthService.html":{}}}],["working",{"_index":1808,"title":{},"body":{"index.html":{}}}],["world",{"_index":240,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1833,"title":{},"body":{"index.html":{}}}],["xxxx",{"_index":1343,"title":{},"body":{"injectables/QueueService.html":{}}}],["yes",{"_index":802,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":1847,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1772,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":585,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["yyyymmdd",{"_index":1342,"title":{},"body":{"injectables/QueueService.html":{}}}],["zone",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for admin to update any user\n\n            \n\n            \n                Extends\n            \n            \n                            UpdateUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Default role ID for the user', example: 2})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of role IDs to assign to the user', example: undefined, type: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:76\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:52\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:47\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:60\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppointmentModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\nimport { AppointmentModule } from './modules/appointment/appointment.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('NODE_ENV') !== 'production', //set this sheesh to true in development only\n        logging: configService.get('NODE_ENV') !== 'production',\n        logger: 'advanced-console',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (process.env.NODE_ENV !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone to UTC for consistent datetime handling\n            await conn.query(\"SET time_zone = '+08:00';\"); // Philippines time zone (UTC+8)\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (process.env.NODE_ENV !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n    AppointmentModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Appointment.html":{"url":"entities/Appointment.html","title":"entity - Appointment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Appointment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/entities/appointment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                appointmentNumber\n                            \n                            \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: AppointmentStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'userId', foreignKeyConstraintName: 'FK_appointment_user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn, ManyToOne, JoinColumn } from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\n\nexport enum AppointmentStatus {\n  PENDING = 'pending',\n  CONFIRMED = 'confirmed',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled'\n}\n\n@Entity('appointments')\nexport class Appointment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  appointmentNumber: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ nullable: true })\n  middleInitial: string;\n\n  @Column()\n  address: string;\n\n  @Column()\n  phoneNumber: string;\n\n  @Column()\n  reasonOfVisit: string;\n\n  @Column({ type: 'date' })\n  appointmentDate: string;\n\n  @Column()\n  appointmentTime: string;\n\n  @Column({ \n    type: 'enum', \n    enum: AppointmentStatus,\n    default: AppointmentStatus.PENDING\n  })\n  status: AppointmentStatus;\n\n  @Column({ nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({ \n    name: 'userId',\n    foreignKeyConstraintName: 'FK_appointment_user' \n  })\n  user: User;\n\n  @Column({ default: false })\n  isGuest: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppointmentController.html":{"url":"controllers/AppointmentController.html","title":"controller - AppointmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppointmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appointments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findUserAppointments\n                            \n                            \n                                    \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDateRange\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-number/:number')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findUserAppointments\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserAppointments(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('mine')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('available-slots')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDate(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-date')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDateRange(startDate: string, endDate: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('date-range')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAppointmentDto: UpdateAppointmentDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: AppointmentStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { \n  Controller, \n  Get, \n  Post, \n  Body, \n  Patch, \n  Param, \n  Delete, \n  UseGuards, \n  Query, \n  BadRequestException,\n  HttpCode,\n  HttpStatus,\n  Logger\n} from '@nestjs/common';\nimport { AppointmentService } from './appointment.service';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { AppointmentStatus } from './entities/appointment.entity';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { User as UserEntity } from '../../users/entities/user.entity';\n\n@Controller('appointments')\nexport class AppointmentController {\n  private readonly logger = new Logger(AppointmentController.name);\n  \n  constructor(private readonly appointmentService: AppointmentService) {}\n\n  @Post()\n  async create(@Body() createAppointmentDto: CreateAppointmentDto) {\n    this.logger.log(`Creating appointment for ${createAppointmentDto.firstName} ${createAppointmentDto.lastName}`);\n    return this.appointmentService.create(createAppointmentDto);\n  }\n\n  @Get()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff')\n  async findAll() {\n    this.logger.log('Fetching all appointments');\n    return this.appointmentService.findAll();\n  }\n\n  @Get('mine')\n  @UseGuards(JwtAuthGuard)\n  async findUserAppointments(@User() user: UserEntity) {\n    this.logger.log(`Fetching appointments for user: ${user.id}`);\n    return this.appointmentService.findAllByUser(user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff')\n  async getStats() {\n    this.logger.log('Fetching appointment statistics');\n    return this.appointmentService.getAppointmentsStats();\n  }\n\n  @Get('by-date')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff')\n  async getByDate(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching appointments for date: ${date}`);\n    return this.appointmentService.getAppointmentsByDate(date);\n  }\n\n  @Get('date-range')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff')\n  async getByDateRange(\n    @Query('start') startDate: string,\n    @Query('end') endDate: string,\n  ) {\n    if (!startDate || !endDate) {\n      throw new BadRequestException('Start and end date parameters are required');\n    }\n    this.logger.log(`Fetching appointments from ${startDate} to ${endDate}`);\n    return this.appointmentService.getAppointmentsByDateRange(startDate, endDate);\n  }\n\n  @Get('available-slots')\n  async getAvailableSlots(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching available slots for date: ${date}`);\n    return this.appointmentService.getAvailableSlots(date);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    this.logger.log(`Fetching appointment with ID: ${id}`);\n    return this.appointmentService.findOne(+id);\n  }\n\n  @Get('by-number/:number')\n  async findByAppointmentNumber(@Param('number') appointmentNumber: string) {\n    this.logger.log(`Fetching appointment with number: ${appointmentNumber}`);\n    return this.appointmentService.findByAppointmentNumber(appointmentNumber);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtAuthGuard)\n  async update(\n    @Param('id') id: string,\n    @Body() updateAppointmentDto: UpdateAppointmentDto,\n    @User() user: UserEntity\n  ) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n    \n    // If not admin and not the appointment owner, don't allow update\n    if (!user.roles.some(role => ['admin', 'staff'].includes(role.name)) && appointment.userId !== user.id) {\n      throw new BadRequestException('You do not have permission to update this appointment');\n    }\n    \n    this.logger.log(`Updating appointment with ID: ${id}`);\n    return this.appointmentService.update(+id, updateAppointmentDto);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body('status') status: AppointmentStatus\n  ) {\n    if (!Object.values(AppointmentStatus).includes(status)) {\n      throw new BadRequestException(`Invalid status. Must be one of: ${Object.values(AppointmentStatus).join(', ')}`);\n    }\n    \n    this.logger.log(`Updating status for appointment with ID: ${id} to ${status}`);\n    return this.appointmentService.updateStatus(+id, status);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @UseGuards(JwtAuthGuard)\n  async remove(@Param('id') id: string, @User() user: UserEntity) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n    \n    // If not admin and not the appointment owner, don't allow deletion\n    if (!user.roles.some(role => ['admin', 'staff'].includes(role.name)) && appointment.userId !== user.id) {\n      throw new BadRequestException('You do not have permission to delete this appointment');\n    }\n    \n    this.logger.log(`Deleting appointment with ID: ${id}`);\n    await this.appointmentService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppointmentModule.html":{"url":"modules/AppointmentModule.html","title":"module - AppointmentModule","body":"\n                   \n\n\n\n\n    Modules\n    AppointmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\n\nAppointmentService \n\nAppointmentService \n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appointment/appointment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppointmentService } from './appointment.service';\nimport { AppointmentController } from './appointment.controller';\nimport { Appointment } from './entities/appointment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Appointment])],\n  controllers: [AppointmentController],\n  providers: [AppointmentService],\n  exports: [AppointmentService],\n})\nexport class AppointmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppointmentService.html":{"url":"injectables/AppointmentService.html","title":"injectable - AppointmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppointmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkTimeSlotAvailability\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                generateAllTimeSlots\n                            \n                            \n                                    Async\n                                getAppointmentsByDate\n                            \n                            \n                                    Async\n                                getAppointmentsByDateRange\n                            \n                            \n                                    Async\n                                getAppointmentsStats\n                            \n                            \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appointmentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appointment/appointment.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appointmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkTimeSlotAvailability\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeSlotAvailability(date: string, time: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:269\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                time\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateAllTimeSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAllTimeSlots()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:288\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     string[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDate(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:184\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDateRange(startDate: string, endDate: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:222\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, status: AppointmentStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between, LessThanOrEqual, MoreThanOrEqual } from 'typeorm';\nimport { Appointment, AppointmentStatus } from './entities/appointment.entity';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { format, addDays, parseISO, isValid, startOfDay, endOfDay } from 'date-fns';\n\n@Injectable()\nexport class AppointmentService {\n  constructor(\n    @InjectRepository(Appointment)\n    private appointmentRepository: Repository,\n  ) {}\n\n  async create(createAppointmentDto: CreateAppointmentDto): Promise {\n    try {\n      // Check date validity\n      const date = parseISO(createAppointmentDto.appointmentDate);\n      if (!isValid(date)) {\n        throw new BadRequestException('Invalid appointment date');\n      }\n\n      // Check if date is a weekend\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        throw new BadRequestException('Cannot book appointments on weekends');\n      }\n\n      // Check if date is in the past\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      if (date  {\n    return this.appointmentRepository.find({\n      order: {\n        appointmentDate: 'ASC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findAllByUser(userId: number): Promise {\n    return this.appointmentRepository.find({\n      where: { userId },\n      order: {\n        appointmentDate: 'DESC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { id },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment with ID ${id} not found`);\n    }\n\n    return appointment;\n  }\n\n  async findByAppointmentNumber(appointmentNumber: string): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { appointmentNumber },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment ${appointmentNumber} not found`);\n    }\n\n    return appointment;\n  }\n\n  async update(id: number, updateAppointmentDto: UpdateAppointmentDto): Promise {\n    try {\n      const appointment = await this.findOne(id);\n\n      // If changing date or time, check availability\n      if (updateAppointmentDto.appointmentDate || updateAppointmentDto.appointmentTime) {\n        const newDate = updateAppointmentDto.appointmentDate || appointment.appointmentDate;\n        const newTime = updateAppointmentDto.appointmentTime || appointment.appointmentTime;\n        \n        if (newDate !== appointment.appointmentDate || newTime !== appointment.appointmentTime) {\n          await this.checkTimeSlotAvailability(newDate, newTime);\n        }\n      }\n\n      // Update the appointment\n      const updated = Object.assign(appointment, updateAppointmentDto);\n      console.log(`Updated appointment ${id}:`, updated);\n      return this.appointmentRepository.save(updated);\n    } catch (error) {\n      console.error(`Error updating appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async remove(id: number): Promise {\n    try {\n      const result = await this.appointmentRepository.delete(id);\n      if (result.affected === 0) {\n        throw new NotFoundException(`Appointment with ID ${id} not found`);\n      }\n      console.log(`Deleted appointment ${id}`);\n    } catch (error) {\n      console.error(`Error deleting appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async updateStatus(id: number, status: AppointmentStatus): Promise {\n    try {\n      const appointment = await this.findOne(id);\n      appointment.status = status;\n      console.log(`Updated status for appointment ${id} to ${status}`);\n      return this.appointmentRepository.save(appointment);\n    } catch (error) {\n      console.error(`Error updating status for appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getAvailableSlots(date: string): Promise {\n    try {\n      // Parse the date\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      // Get all appointments for the specified date\n      const existingAppointments = await this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n        select: ['appointmentTime'],\n      });\n\n      const bookedSlots = existingAppointments.map(app => app.appointmentTime);\n      \n      // Generate all time slots (8:00 AM - 5:00 PM with 30min intervals)\n      const allTimeSlots = this.generateAllTimeSlots();\n      \n      // Return only available slots\n      return allTimeSlots.filter(slot => !bookedSlots.includes(slot));\n    } catch (error) {\n      console.error(`Error getting available slots for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDate(date: string): Promise {\n    try {\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n        },\n        order: {\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      console.error(`Error getting appointments for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDateRange(startDate: string, endDate: string): Promise {\n    try {\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: Between(startDate, endDate),\n        },\n        order: {\n          appointmentDate: 'ASC',\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      console.error(`Error getting appointments in range ${startDate} to ${endDate}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsStats() {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const tomorrow = addDays(today, 1);\n      tomorrow.setHours(0, 0, 0, 0);\n\n      // Get counts for different statuses\n      const [pendingCount, confirmedCount, completedCount, cancelledCount, totalCount] = \n        await Promise.all([\n          this.appointmentRepository.count({ \n            where: { status: AppointmentStatus.PENDING } \n          }),\n          this.appointmentRepository.count({ \n            where: { status: AppointmentStatus.CONFIRMED } \n          }),\n          this.appointmentRepository.count({ \n            where: { status: AppointmentStatus.COMPLETED } \n          }),\n          this.appointmentRepository.count({ \n            where: { status: AppointmentStatus.CANCELLED } \n          }),\n          this.appointmentRepository.count()\n        ]);\n\n      // Get today's appointments\n      const todayAppointments = await this.appointmentRepository.count({\n        where: {\n          appointmentDate: format(today, 'yyyy-MM-dd')\n        }\n      });\n\n      return {\n        pending: pendingCount,\n        confirmed: confirmedCount,\n        completed: completedCount,\n        cancelled: cancelledCount,\n        total: totalCount,\n        today: todayAppointments\n      };\n    } catch (error) {\n      console.error('Error getting appointment stats:', error);\n      throw error;\n    }\n  }\n\n  private async checkTimeSlotAvailability(date: string, time: string): Promise {\n    try {\n      // Check if time slot is already booked\n      const existingAppointment = await this.appointmentRepository.findOne({\n        where: {\n          appointmentDate: date,\n          appointmentTime: time,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n      });\n\n      if (existingAppointment) {\n        throw new BadRequestException('This time slot is already booked');\n      }\n    } catch (error) {\n      console.error(`Error checking time slot availability for ${date} at ${time}:`, error);\n      throw error;\n    }\n  }\n  private generateAllTimeSlots(): string[] {\n    const slots: string[] = [];\n    let hour = 8;\n    let minute = 0;\n\n    while (hour \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(req: RequestWithUser, targetUserId: string, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin update user', description: 'Allows administrators to update any user's information including role assignments'})@ApiParam({name: 'userId', description: 'ID of the user to update'})@ApiBody({type: AdminUpdateUserDto})@ApiResponse({status: 200, description: 'User successfully updated'})@ApiResponse({status: 400, description: 'Bad request - invalid input data'})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiResponse({status: 403, description: 'Forbidden - insufficient permissions'})@ApiResponse({status: 404, description: 'Not found - user or role not found'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@Post('admin/update-user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:182\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User login'})@ApiResponse({status: 200, description: 'Login successful', schema: undefined})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiBody({type: LoginDto})@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User registration'})@ApiResponse({status: 201, description: 'Registration successful', schema: undefined})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBody({type: RegisterDto})@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: RequestWithUser, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update user profile', description: 'Allows a user to update their own profile information'})@ApiResponse({status: 200, description: 'Profile updated successfully'})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@ApiBody({type: UpdateUserDto})@UseGuards(JwtAuthGuard)@Post('update-profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\n\ninterface RequestWithUser extends Request {\n  user: { sub: number; email: string; roles: string[] };\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.sub));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.sub),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.sub),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: '1d' },\n        };\n      },\n    }),\n    TypeOrmModule.forFeature([User]),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                updateUserInfo\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(adminId: number, targetUserId: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:372\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                adminId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:210\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserInfo(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:238\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    if (password.length  role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  async updateUserInfo(userId: number, updateUserDto: UpdateUserDto) {\n    try {\n      // First get the existing user\n      const user = await this.usersRepository.findOne({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('User not found');\n      }\n\n      // Check if email is being updated and not already taken\n      if (updateUserDto.email && updateUserDto.email !== user.email) {\n        // Validate email format\n        if (!this.isValidEmail(updateUserDto.email)) {\n          throw new BadRequestException('Invalid email format');\n        }\n\n        const existingUserByEmail = await this.usersRepository.findOne({\n          where: { email: updateUserDto.email },\n        });\n\n        if (existingUserByEmail && existingUserByEmail.id !== userId) {\n          throw new ConflictException('Email already exists');\n        }\n      }\n\n      // Check if username is being updated and not already taken\n      if (updateUserDto.username && updateUserDto.username !== user.username) {\n        const existingUserByUsername = await this.usersRepository.findOne({\n          where: { username: updateUserDto.username },\n        });\n\n        if (existingUserByUsername && existingUserByUsername.id !== userId) {\n          throw new ConflictException('Username already exists');\n        }\n      }\n\n      // Handle password change if provided\n      if (updateUserDto.password) {\n        // Validate password strength\n        if (updateUserDto.password.length  role.name);\n\n        // Remove password from response\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { password: __password, ...result } = updatedUser;\n\n        return {\n          ...result,\n          roles: roleNames,\n          defaultRole: updatedUser.defaultRole?.name || 'citizen',\n        };\n      } catch (error) {\n        console.error('User update database error:', error);\n        if (error.code === 'ER_DUP_ENTRY') {\n          throw new ConflictException('Email or username already exists');\n        }\n        throw new BadRequestException('Failed to update user information in database');\n      }\n    } catch (error) {\n      console.error('User update error:', error);\n      // Re-throw specific errors\n      if (error instanceof UnauthorizedException || \n          error instanceof BadRequestException || \n          error instanceof ConflictException) {\n        throw error;\n      }\n      // For any other unexpected error\n      throw new BadRequestException('Failed to update user information');\n    }\n  }\n  async adminUpdateUser(\n    adminId: number,\n    targetUserId: number,\n    updateUserDto: AdminUpdateUserDto,\n  ) {\n    console.log(\n      `Admin ${adminId} attempting to update user ${targetUserId}`,\n      updateUserDto,\n    );\n\n    try {\n      // Verify the admin has proper permissions\n      const admin = await this.usersRepository.findOne({\n        where: { id: adminId },\n      });\n\n      if (!admin) {\n        throw new UnauthorizedException('Admin not found');\n      }\n\n      // Get admin roles\n      const adminRoles = await this.rolesService.getUserRoles(adminId);\n      const adminRoleNames = adminRoles.map((role) => role.name);\n\n      // Check if the user has admin or super_admin role\n      const isAuthorized = adminRoleNames.some(\n        (role) => role === 'admin' || role === 'super_admin',\n      );\n\n      if (!isAuthorized) {\n        throw new UnauthorizedException('Insufficient permissions');\n      }\n\n      // Check if target user exists\n      const targetUser = await this.usersRepository.findOne({\n        where: { id: targetUserId },\n      });\n\n      if (!targetUser) {\n        throw new BadRequestException(`User with ID ${targetUserId} not found`);\n      }\n\n      // First perform the basic user update\n      // We'll catch any errors here to handle them appropriately\n      let basicUpdate;\n      try {\n        basicUpdate = await this.updateUserInfo(targetUserId, updateUserDto);\n      } catch (error) {\n        console.error('Error during basic user update:', error);\n        throw error; // Re-throw to be caught by outer try-catch\n      }\n\n      // Handle role updates if provided\n      if (updateUserDto.roleIds && updateUserDto.roleIds.length > 0) {\n        try {\n          // Verify all roles exist before assigning\n          for (const roleId of updateUserDto.roleIds) {\n            try {\n              await this.rolesService.findOne(roleId);\n            } catch (error) {\n              throw new BadRequestException(`Role with ID ${roleId} not found`);\n            }\n          }\n\n          // Assign roles\n          await this.rolesService.assignRolesToUser(\n            targetUserId,\n            updateUserDto.roleIds,\n          );\n          console.log(\n            `Assigned roles ${updateUserDto.roleIds.join(', ')} to user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error assigning roles:', error);\n          throw new BadRequestException(\n            error instanceof Error ? error.message : 'Failed to assign roles',\n          );\n        }\n      }\n\n      // Update default role if provided\n      if (updateUserDto.defaultRoleId) {\n        try {\n          // Verify the role exists\n          try {\n            await this.rolesService.findOne(updateUserDto.defaultRoleId);\n          } catch (error) {\n            throw new BadRequestException(\n              `Default role with ID ${updateUserDto.defaultRoleId} not found`,\n            );\n          }\n\n          // Verify user has this role assigned or will have it assigned \n          const userRoles = await this.rolesService.getUserRoles(targetUserId);\n          const hasRoleAssigned = userRoles.some(\n            (role) => role.id === updateUserDto.defaultRoleId,\n          );\n          \n          const willBeAssigned = updateUserDto.roleIds && \n            updateUserDto.roleIds.includes(updateUserDto.defaultRoleId);\n\n          if (!hasRoleAssigned && !willBeAssigned) {\n            throw new BadRequestException(\n              'Cannot set default role to a role the user does not have',\n            );\n          }\n\n          // Update the default role\n          await this.usersRepository.update(targetUserId, {\n            defaultRoleId: updateUserDto.defaultRoleId,\n          });\n          console.log(\n            `Updated default role to ${updateUserDto.defaultRoleId} for user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error updating default role:', error);\n          throw new BadRequestException(\n            error instanceof Error\n              ? error.message\n              : 'Failed to update default role',\n          );\n        }\n      }\n\n      // Return the fully updated user\n      try {\n        const updatedUser = await this.getProfile(targetUserId);\n        return updatedUser;\n      } catch (error) {\n        console.error('Error retrieving updated user profile:', error);\n        throw new BadRequestException('User was updated but profile could not be retrieved');\n      }\n    } catch (error) {\n      console.error('Admin update user error:', error);\n      \n      // Re-throw specific exceptions\n      if (error instanceof UnauthorizedException || \n          error instanceof BadRequestException || \n          error instanceof ConflictException) {\n        throw error;\n      }\n      \n      // For any other errors\n      throw new BadRequestException(\n        'Failed to update user: Unexpected error occurred'\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAppointmentDto.html":{"url":"classes/CreateAppointmentDto.html","title":"class - CreateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/create-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsOptional, IsEnum, IsDateString } from 'class-validator';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class CreateAppointmentDto {\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @IsOptional()\n  @IsString()\n  middleInitial: string;\n\n  @IsNotEmpty()\n  @IsString()\n  address: string;\n\n  @IsNotEmpty()\n  @IsString()\n  phoneNumber: string;\n\n  @IsNotEmpty()\n  @IsString()\n  reasonOfVisit: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  appointmentDate: string;\n\n  @IsNotEmpty()\n  @IsString()\n  appointmentTime: string;\n\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n\n  @IsOptional()\n  userId?: number;\n\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsOptional()\n  userId?: number | string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): JwtPayload {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles) ? payload.roles : [];\n\n    return { sub: userId, email, roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         JwtPayload\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): JwtPayload {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles) ? payload.roles : [];\n\n    return { sub: userId, email, roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email or username for login', example: 'test@example.com'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Test User password', example: 'password123'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'Email or username for login',\n    example: 'test@example.com',\n  })\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @ApiProperty({\n    description: 'Test User password',\n    example: 'password123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueueController.html":{"url":"controllers/QueueController.html","title":"controller - QueueController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueueController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queue\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addCounter\n                            \n                            \n                                    \n                                callNext\n                            \n                            \n                                    \n                                    Async\n                                checkQueueExists\n                            \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findByQueueNumber\n                            \n                            \n                                    \n                                findByStatus\n                            \n                            \n                                    \n                                findCompleted\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findPending\n                            \n                            \n                                    \n                                findPendingWithDetails\n                            \n                            \n                                    \n                                findServing\n                            \n                            \n                                    \n                                findServingWithDetails\n                            \n                            \n                                    \n                                getCounters\n                            \n                            \n                                    \n                                getDetailsForMultipleQueues\n                            \n                            \n                                    \n                                getQueueDetails\n                            \n                            \n                                    \n                                getQueuePosition\n                            \n                            \n                                    \n                                getStats\n                            \n                            \n                                    \n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter/:counterId/call-next')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkQueueExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkQueueExists(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/exists')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(req, createQueueDto: CreateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('number/:queueNumber')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status/:status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findCompleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCompleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('completed')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPending\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPending()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPendingWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPendingWithDetails()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServing\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServingWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServingWithDetails()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('counters')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:149\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDetailsForMultipleQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDetailsForMultipleQueues(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('bulk-details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/position')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateQueueDto: UpdateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  //Delete, // Uncomment if you want to implement delete functionality\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueStatus } from './entities/queue.entity';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\n\n@Controller('queue')\nexport class QueueController {\n  constructor(private readonly queueService: QueueService) {}\n\n  @Post()\n  @UseGuards(JwtAuthGuard)\n  create(@Request() req, @Body() createQueueDto: CreateQueueDto) {\n    // Extract user ID from JWT token if authenticated\n    const userId = req.user?.id || null;\n\n    // Override the userId in the DTO with the authenticated user's ID\n    // This prevents users from creating queues for other users\n    if (userId) {\n      createQueueDto.userId = userId;\n      createQueueDto.isGuest = false;\n    } else {\n      createQueueDto.userId = undefined;\n      createQueueDto.isGuest = true;\n    }\n\n    return this.queueService.create(createQueueDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.queueService.findAll();\n  }\n\n  @Get('status/:status')\n  findByStatus(@Param('status') status: QueueStatus) {\n    return this.queueService.findByStatus(status);\n  }\n\n  @Get('pending')\n  findPending() {\n    return this.queueService.findByStatus(QueueStatus.PENDING);\n  }\n\n  @Get('serving')\n  findServing() {\n    return this.queueService.findByStatus(QueueStatus.SERVING);\n  }\n\n  @Get('completed')\n  findCompleted() {\n    return this.queueService.findByStatus(QueueStatus.COMPLETED);\n  }\n\n  // Endpoint for pending queues with details\n  @Get('pending/details')\n  findPendingWithDetails() {\n    return this.queueService.findByStatusWithDetails(QueueStatus.PENDING);\n  }\n\n  // Endpoint for serving queues with details\n  @Get('serving/details')\n  findServingWithDetails() {\n    return this.queueService.findByStatusWithDetails(QueueStatus.SERVING);\n  }\n\n  // Endpoint for bulk fetching queue details\n  @Post('bulk-details')\n  getDetailsForMultipleQueues(@Body() body: { queueIds: number[] }) {\n    return this.queueService.getDetailsForMultipleQueues(body.queueIds);\n  }\n  // Endpoint for updating queue status\n  @Patch(':id/status')\n  async updateStatus(@Param('id') id: string, @Body() body: { status: QueueStatus }) {\n    console.log(`PATCH /queue/${id}/status with body:`, body);\n    \n    try {\n      // Validate the status enum value\n      if (!Object.values(QueueStatus).includes(body.status)) {\n        console.error(`Invalid status value: ${body.status}`);\n        return { \n          error: 'Invalid status value',\n          validValues: Object.values(QueueStatus)\n        };\n      }\n      \n      // Update the queue status\n      const result = await this.queueService.update(+id, { status: body.status });\n      console.log(`Queue ${id} status updated successfully to ${body.status}`);\n      return result;\n    } catch (error) {\n      console.error(`Error updating queue ${id} status:`, error);\n      throw error;\n    }\n  }\n\n  @Get('stats')\n  getStats() {\n    return this.queueService.getStats();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.queueService.findOne(+id);\n  }\n\n  @Get('number/:queueNumber')\n  findByQueueNumber(@Param('queueNumber') queueNumber: string) {\n    return this.queueService.findByQueueNumber(queueNumber);\n  }\n\n  @Get(':id/details')\n  getQueueDetails(@Param('id') id: string) {\n    return this.queueService.getQueueDetails(+id);\n  }\n\n  @Get(':id/position')\n  getQueuePosition(@Param('id') id: string) {\n    return this.queueService.getQueuePosition(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateQueueDto: UpdateQueueDto) {\n    return this.queueService.update(+id, updateQueueDto);\n  }\n\n  @Post('counter/:counterId/call-next')\n  callNext(@Param('counterId') counterId: string) {\n    return this.queueService.callNext(+counterId);\n  }\n\n  @Post('counter')\n  addCounter(@Body() data: { name: string }) {\n    return this.queueService.addCounter(data.name);\n  }\n\n  @Get('counters')\n  getCounters() {\n    return this.queueService.getCounters();\n  }\n\n  @Get(':id/exists')\n  async checkQueueExists(@Param('id') id: string) {\n    try {\n      const exists = await this.queueService.checkExists(+id);\n      return { exists };\n    } catch (error) {\n      console.error(`Error checking if queue ${id} exists:`, error);\n      return { exists: false };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_guest', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n\n  @Column({ name: 'is_guest', default: false })\n  isGuest: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueueUpdates\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:24\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueueUpdates\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueueUpdates(client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('join_queue_updates')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\n\n@WebSocketGateway({\n  cors: {\n    origin: 'http://localhost:5173', // Match your app's CORS setting\n    methods: ['GET', 'POST'],\n    credentials: true,\n  },\n  namespace: 'socket.io', // Add this to match client expectation\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  @SubscribeMessage('join_queue_updates')\n  async handleJoinQueueUpdates(client: Socket) {\n    this.logger.log(`Socket ${client.id} joined queue updates`);\n    await client.join('queue_updates');\n    return { event: 'joined', data: 'Successfully joined queue updates' };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                        \n                            QueuesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueuesController } from './queues.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Queue, QueueDetails, Counter])],\n  controllers: [QueueController, QueuesController],\n  providers: [QueueService, QueueGateway],\n  exports: [QueueService, QueueGateway],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCounter\n                            \n                            \n                                    Async\n                                callNext\n                            \n                            \n                                    Async\n                                checkExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByQueueNumber\n                            \n                            \n                                    Async\n                                findByStatus\n                            \n                            \n                                    Async\n                                findByStatusWithDetails\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCounters\n                            \n                            \n                                    Async\n                                getDetailsForMultipleQueues\n                            \n                            \n                                    Async\n                                getQueueDetails\n                            \n                            \n                                    Async\n                                getQueuePosition\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueDetailsRepository: Repository, counterRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueDetailsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        counterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:410\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:293\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkExists(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:423\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatusWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatusWithDetails(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:254\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:416\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDetailsForMultipleQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDetailsForMultipleQueues(queueIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:222\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:147\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:203\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:363\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateQueueDto: UpdateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual, In } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport {\n  Counter,\n  //CounterStatus, //Uncomment if you need to use CounterStatus\n} from '../counter/entities/counter.entity';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    @InjectRepository(QueueDetails)\n    private queueDetailsRepository: Repository,\n    @InjectRepository(Counter)\n    private counterRepository: Repository,\n    @Inject(forwardRef(() => QueueGateway))\n    private queueGateway: QueueGateway,\n  ) {}\n\n  async create(createQueueDto: CreateQueueDto) {\n    // Generate a queue number based on date and sequence\n    const today = new Date();\n    const dateStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;\n\n    // Get the count of queues created today to determine the sequence number\n    const todayStart = new Date(today);\n    todayStart.setHours(0, 0, 0, 0);\n\n    const todayCount = await this.queueRepository.count({\n      where: {\n        createdAt: LessThanOrEqual(today),\n      },\n    });\n\n    // Format the queue number: YYYYMMDD-XXXX where XXXX is the sequence number\n    const queueNumber = `${dateStr}-${String(todayCount + 1).padStart(4, '0')}`;\n\n    // Create and save the queue\n    const queue = this.queueRepository.create({\n      queueNumber,\n      status: QueueStatus.PENDING,\n      estimatedWaitTime: 15 * (todayCount + 1), // Simple estimation: 15 minutes per person\n    });\n\n    const savedQueue = await this.queueRepository.save(queue);\n\n    // Simplify the user ID handling - trust what the controller provided\n    const userId =\n      typeof createQueueDto.userId === 'number'\n        ? createQueueDto.userId\n        : typeof createQueueDto.userId === 'string' &&\n            createQueueDto.userId !== 'guest'\n          ? Number(createQueueDto.userId)\n          : undefined;\n\n    const isGuest = createQueueDto.isGuest || !userId;\n\n    // Log for debugging\n    console.log('Creating queue details with:', {\n      providedUserId: createQueueDto.userId,\n      parsedUserId: userId,\n      isGuest,\n    });\n\n    // Create queue details using the simplified userId\n    const queueDetails = this.queueDetailsRepository.create({\n      queueId: savedQueue.id,\n      userId: userId, // Use the simplified userId\n      firstName: createQueueDto.firstName,\n      lastName: createQueueDto.lastName,\n      middleInitial: createQueueDto.middleInitial,\n      address: createQueueDto.address,\n      phoneNumber: createQueueDto.phoneNumber,\n      reasonOfVisit: createQueueDto.reasonOfVisit,\n      appointmentType: createQueueDto.appointmentType,\n      isGuest: isGuest,\n    });\n\n    // Set the queue relation\n    queueDetails.queue = savedQueue;\n\n    await this.queueDetailsRepository.save(queueDetails);\n\n    // Get queue position\n    const position = await this.getQueuePosition(savedQueue.id);\n\n    const result = { queue: savedQueue, details: queueDetails, position };\n\n    // Notify all clients that a new queue has been created\n    this.queueGateway.server.emit('queueListUpdate', {\n      action: 'created',\n      queueId: savedQueue.id,\n    });\n\n    return result;\n  }\n\n  async findAll() {\n    return await this.queueRepository.find({\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findByStatus(status: QueueStatus) {\n    return await this.queueRepository.find({\n      where: { status },\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findOne(id: number) {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${id} not found`);\n    }\n\n    return queue;\n  }\n\n  async findByQueueNumber(queueNumber: string) {\n    const queue = await this.queueRepository.findOne({\n      where: { queueNumber },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${queueNumber} not found`);\n    }\n\n    return queue;\n  }\n\n  async getQueueDetails(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId },\n      relations: ['user'],\n    });\n\n    if (!details) {\n      throw new NotFoundException(`Details for queue #${queueId} not found`);\n    }\n\n    const position = await this.getQueuePosition(queueId);\n\n    return { queue, details, position };\n  }\n  async update(id: number, updateQueueDto: UpdateQueueDto) {\n    console.log(`Updating queue ${id} with:`, updateQueueDto);\n    \n    try {\n      // Find the queue\n      const queue = await this.findOne(id);\n      console.log('Found queue:', queue);\n\n      if (updateQueueDto.status) {\n        // Log the status change\n        console.log(`Changing status from ${queue.status} to ${updateQueueDto.status}`);\n        queue.status = updateQueueDto.status;\n\n        // If completed, set completion time\n        if (updateQueueDto.status === QueueStatus.COMPLETED) {\n          queue.completedAt = new Date();\n        }\n      }\n\n      if (updateQueueDto.counterNumber) {\n        queue.counterNumber = updateQueueDto.counterNumber;\n      }\n\n      // Save the updated queue\n      const updatedQueue = await this.queueRepository.save(queue);\n      console.log('Queue updated successfully:', updatedQueue);\n\n      // Notify clients about the queue update\n      this.queueGateway.notifyQueueUpdate(id, {\n        action: 'updated',\n        queue: updatedQueue,\n      });\n\n      return updatedQueue;\n    } catch (error) {\n      console.error(`Error updating queue ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getQueuePosition(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    // If the queue is not pending, it's not in line\n    if (queue.status !== QueueStatus.PENDING) {\n      return 0;\n    }\n\n    // Count how many pending queues are ahead of this one\n    const position = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: LessThanOrEqual(queue.createdAt),\n        id: LessThanOrEqual(queueId), // Break ties using ID\n      },\n    });\n\n    return position;\n  }\n  async getDetailsForMultipleQueues(queueIds: number[]) {\n    console.log('Getting details for queue IDs:', queueIds);\n    \n    if (!queueIds || queueIds.length === 0) {\n      return {};\n    }\n\n    const detailsMap = {};\n\n    try {\n      // Fetch all queue details in a single query for better performance\n      const allDetails = await this.queueDetailsRepository.find({\n        where: {\n          queueId: In(queueIds),\n        },\n        relations: ['user'],\n      });\n\n      console.log(`Found ${allDetails.length} details for ${queueIds.length} queues`);\n\n      // Organize by queueId for easy lookup\n      allDetails.forEach((detail) => {\n        detailsMap[detail.queueId] = detail;\n      });\n\n      return detailsMap;\n    } catch (error) {\n      console.error('Error fetching details for multiple queues:', error);\n      // Return empty details rather than failing\n      return {};\n    }\n  }\n  async findByStatusWithDetails(status: QueueStatus) {\n    console.log(`Finding queues with status: ${status} and their details`);\n    \n    try {\n      // First get all queues with this status\n      const queues = await this.queueRepository.find({\n        where: { status },\n        order: { createdAt: 'ASC' },\n      });\n\n      console.log(`Found ${queues.length} queues with status ${status}`);\n      \n      if (queues.length === 0) {\n        return [];\n      }\n\n      // Get all queue IDs\n      const queueIds = queues.map((queue) => queue.id);\n\n      // Fetch details for all these queues\n      const detailsMap = await this.getDetailsForMultipleQueues(queueIds);\n\n      // Combine queue and details data\n      const result = queues.map((queue) => {\n        return {\n          ...queue,\n          details: detailsMap[queue.id] || null,\n        };\n      });\n      \n      console.log(`Returning ${result.length} queues with details`);\n      return result;\n    } catch (error) {\n      console.error(`Error finding queues with status ${status} and details:`, error);\n      // Return empty array rather than failing\n      return [];\n    }\n  }\n\n  async callNext(counterId: number) {\n    const counter = await this.counterRepository.findOne({\n      where: { id: counterId },\n      relations: ['currentQueue'],\n    });\n\n    if (!counter) {\n      throw new NotFoundException(`Counter #${counterId} not found`);\n    }\n\n    // Mark current queue as completed if exists\n    if (counter.currentQueue) {\n      counter.currentQueue.status = QueueStatus.COMPLETED;\n      counter.currentQueue.completedAt = new Date();\n      await this.queueRepository.save(counter.currentQueue);\n    }\n\n    // Find the next pending queue\n    const nextQueue = await this.queueRepository.findOne({\n      where: { status: QueueStatus.PENDING },\n      order: { createdAt: 'ASC' },\n    });\n\n    if (!nextQueue) {\n      counter.currentQueueId = null;\n      counter.currentQueue = null;\n      await this.counterRepository.save(counter);\n      return { counter, message: 'No more queues waiting' };\n    }\n\n    // Update the next queue\n    nextQueue.status = QueueStatus.SERVING;\n    nextQueue.counterNumber = counter.name;\n    await this.queueRepository.save(nextQueue);\n\n    // Update counter\n    counter.currentQueueId = nextQueue.id;\n    counter.currentQueue = nextQueue;\n    await this.counterRepository.save(counter);\n\n    // Get associated details\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId: nextQueue.id },\n    });\n\n    const result = {\n      counter,\n      queue: nextQueue,\n      details,\n      message: 'Next queue called successfully',\n    };\n\n    if (nextQueue) {\n      // Notify the specific queue room that it's their turn\n      this.queueGateway.notifyQueueUpdate(nextQueue.id, {\n        action: 'called',\n        counterName: counter.name,\n        counterId: counter.id,\n      });\n    }\n\n    // Notify counter clients\n    this.queueGateway.notifyCounterUpdate(counterId, {\n      action: 'nextCalled',\n      ...result,\n    });\n\n    return result;\n  }\n\n  async getStats() {\n    const [\n      pendingCount,\n      servingCount,\n      completedCount,\n      cancelledCount,\n      totalCount,\n    ] = await Promise.all([\n      this.queueRepository.count({ where: { status: QueueStatus.PENDING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.SERVING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.COMPLETED } }),\n      this.queueRepository.count({ where: { status: QueueStatus.CANCELLED } }),\n      this.queueRepository.count(),\n    ]);\n\n    // Calculate average wait time\n    const completedQueues = await this.queueRepository.find({\n      where: {\n        status: QueueStatus.COMPLETED,\n        completedAt: LessThanOrEqual(new Date()),\n      },\n      select: ['createdAt', 'completedAt'],\n    });\n\n    let averageWaitTime = 0;\n    if (completedQueues.length > 0) {\n      const totalWaitTimeMs = completedQueues.reduce((total, queue) => {\n        return (\n          total + (queue.completedAt.getTime() - queue.createdAt.getTime())\n        );\n      }, 0);\n      averageWaitTime = Math.floor(\n        totalWaitTimeMs / completedQueues.length / 60000,\n      ); // Convert to minutes\n    }\n\n    return {\n      pending: pendingCount,\n      serving: servingCount,\n      completed: completedCount,\n      cancelled: cancelledCount,\n      total: totalCount,\n      averageWaitTime,\n    };\n  }\n\n  // Add a counter\n  async addCounter(name: string) {\n    const counter = this.counterRepository.create({ name });\n    return await this.counterRepository.save(counter);\n  }\n\n  // Get all counters\n  async getCounters() {\n    return await this.counterRepository.find({\n      relations: ['currentQueue'],\n    });\n  }\n\n  // Check if queue exists\n  async checkExists(id: number): Promise {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n    return !!queue;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueuesController.html":{"url":"controllers/QueuesController.html","title":"controller - QueuesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueuesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queues.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getWalkInQueues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getWalkInQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWalkInQueues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('walk-in')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, UseGuards } from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { QueueStatus } from './entities/queue.entity';\n\n@Controller('queues')\nexport class QueuesController {\n  constructor(private readonly queueService: QueueService) {}\n  // This endpoint is for supporting the legacy API path that the frontend is using\n  @Get('walk-in') \n  async getWalkInQueues() {\n    console.log('GET /queues/walk-in endpoint called');\n    try {\n      // Get both pending and serving queues with details using the service methods\n      const [pendingQueuesWithDetails, servingQueuesWithDetails] = await Promise.all([\n        this.queueService.findByStatusWithDetails(QueueStatus.PENDING),\n        this.queueService.findByStatusWithDetails(QueueStatus.SERVING)\n      ]);\n\n      console.log('Found pending queues:', pendingQueuesWithDetails.length);\n      console.log('Found serving queues:', servingQueuesWithDetails.length);\n\n      // Combine all queues\n      const allQueues = [...pendingQueuesWithDetails, ...servingQueuesWithDetails];\n\n      // Extract details from the nested structure and flatten them for the frontend\n      const result = allQueues.map(queue => {\n        // For debugging\n        console.log('Processing queue:', queue.id, 'status:', queue.status);\n        \n        // Handle potential null/undefined details\n        const details = Array.isArray(queue.details) ? queue.details[0] : queue.details;\n        \n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          estimatedWaitTime: queue.estimatedWaitTime,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          middleInitial: details?.middleInitial || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n          address: details?.address || null,\n          phoneNumber: details?.phoneNumber || null\n        };\n      });\n\n      console.log(`Returning ${result.length} walk-in queues`);\n      return result;\n    } catch (error) {\n      console.error('Error fetching walk-in queues:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User middle name (optional)', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Full name (auto-generated)', example: 'John Robert Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for login', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\n\nexport class RegisterDto {\n  @ApiProperty({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Username for login',\n    example: 'john_doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    description: 'User middle name (optional)',\n    example: 'Robert',\n  })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    description: 'Full name (auto-generated)',\n    example: 'John Robert Doe',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  contactNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\n\ninterface RequestWithUser extends Request {\n  user: { sub: number; email: string; roles: string[] };\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.sub));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.sub),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.sub),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: { roles?: string[] };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n    return requiredRoles.some((role) => userRoles.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: { roles?: string[] };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n    return requiredRoles.some((role) => userRoles.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles using In operator (replaces deprecated findByIds)\n    const roles = await this.rolesRepository.findBy({\n      id: In(roleIds)\n    });\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAppointmentDto.html":{"url":"classes/UpdateAppointmentDto.html","title":"class - UpdateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/update-appointment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAppointmentDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/update-appointment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsOptional, IsEnum } from 'class-validator';\nimport { CreateAppointmentDto } from './create-appointment.dto';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class UpdateAppointmentDto extends PartialType(CreateAppointmentDto) {\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating user information (citizen)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  exports: [TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.controller.ts\n            \n            controller\n            AppointmentController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.service.ts\n            \n            injectable\n            AppointmentService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/create-appointment.dto.ts\n            \n            class\n            CreateAppointmentDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/update-appointment.dto.ts\n            \n            class\n            UpdateAppointmentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/appointment/entities/appointment.entity.ts\n            \n            entity\n            Appointment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            controller\n            QueuesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            date-fns : ^4.1.0\n        \n            dotenv : ^16.5.0\n        \n            mysql2 : ^3.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppointmentStatus   (src/.../appointment.entity.ts)\n                        \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/appointment/entities/appointment.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        AppointmentStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppointmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
