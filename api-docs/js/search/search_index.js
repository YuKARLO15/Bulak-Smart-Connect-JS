var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUpdateUserDto.html",[0,0.126,1,1.933]],["body/classes/AdminUpdateUserDto.html",[0,0.21,1,2.786,2,1.123,3,0.105,4,0.105,5,0.105,6,4.541,7,2.514,8,2.3,9,3.628,10,2.189,11,1.86,12,1.423,13,2.189,14,3.731,15,0.203,16,0.736,17,1.456,18,3.068,19,3.417,20,3.432,21,2.92,22,2.495,23,2.167,24,2.167,25,2.92,26,2.92,27,2.936,28,2.595,29,0.517,30,0.014,31,1.236,32,1.319,33,5.972,34,1.487,35,1.756,36,1.038,37,3.416,38,3.491,39,0.755,40,3.491,41,2.392,42,3.58,43,2.775,44,1.083,45,3.491,46,3.491,47,0.831,48,4.325,49,4.325,50,4.325,51,4.325,52,4.325,53,4.325,54,3.037,55,7.421,56,3.491,57,3.326,58,3.037,59,3.491,60,3.037,61,3.491,62,2.933,63,1.037,64,3.037,65,3.491,66,2.775,67,2.737,68,3.491,69,3.326,70,2.737,71,3.491,72,3.326,73,3.58,74,3.874,75,3.58,76,2.737,77,3.491,78,3.58,79,3.628,80,3.58,81,3.326,82,4.17,83,3.037,84,3.491,85,3.037,86,3.491,87,0.169,88,3.58,89,3.537,90,3.412,91,3.58,92,3.899,93,1.414,94,4.818,95,1.21,96,2.187,97,2.187,98,1.76,99,0.169,100,2.514,101,2.737,102,2.737,103,2.187,104,2.737,105,2.335,106,2.737,107,3.037,108,3.58,109,1.414,110,0.008,111,0.008]],["title/entities/Announcement.html",[112,1.293,113,2.688]],["body/entities/Announcement.html",[0,0.152,3,0.146,4,0.146,5,0.146,8,2.047,10,2.73,15,0.281,16,0.918,29,0.543,30,0.014,31,1.075,32,1.363,34,2.159,36,1.429,39,0.78,47,0.819,87,0.165,99,0.165,110,0.01,111,0.01,112,1.556,113,4.149,114,2.13,115,4.209,116,3.013,117,5.954,118,5.954,119,3.626,120,5.954,121,4.579,122,3.047,123,4.038,124,4.839,125,4.993,126,7.637,127,5.499,128,3.885,129,4.839,130,4.863,131,4.839,132,3.626,133,4.839,134,5.395,135,3.127,136,1.938,137,4.839,138,2.809,139,4.839,140,5.395,141,4.839,142,4.929,143,4.839,144,3.851,145,1.615,146,4.839]],["title/controllers/AnnouncementController.html",[147,1.446,148,2.894]],["body/controllers/AnnouncementController.html",[0,0.143,3,0.137,4,0.137,5,0.137,11,2.486,15,0.264,17,1.317,29,0.488,30,0.014,31,1.392,32,1.301,34,1.36,36,1.567,39,0.745,63,1.04,87,0.24,99,0.155,110,0.01,111,0.01,147,1.637,148,4.29,149,1.701,150,3.955,151,2.538,152,4.547,153,1.916,154,2.514,155,3.555,156,3.004,157,5.182,158,2.866,159,3.955,160,4.705,161,3.92,162,4.547,163,2.443,164,2.416,165,4.547,166,2.091,167,3.732,168,4.547,169,3.955,170,5.957,171,4.547,172,2.409,173,3.156,174,5.182,175,2.409,176,4.29,177,4.547,178,2.683,179,5.193,180,4.29,181,4.547,182,3.732,183,3.275,184,2.538,185,2.849,186,7.319,187,2.849,188,0.788,189,4.162,190,3.955,191,2.293,192,4.671,193,2.293,194,4.547,195,1.919,196,2.188,197,4.547,198,1.747,199,4.547,200,4.547,201,4.547,202,4.547,203,3.275,204,4.547,205,3.275,206,4.547,207,3.566,208,4.547]],["title/modules/AnnouncementModule.html",[209,1.293,210,2.688]],["body/modules/AnnouncementModule.html",[0,0.177,3,0.17,4,0.17,5,0.17,30,0.014,87,0.266,99,0.192,110,0.011,111,0.011,113,3.772,148,5.283,149,2.552,188,0.977,189,5.18,190,4.905,209,2.36,210,5.369,211,2.713,212,2.713,213,2.987,214,2.987,215,2.713,216,3.886,217,3.886,218,4.905,219,4.905,220,4.905,221,3.614,222,2.713,223,2.843,224,5.639,225,3.147,226,2.03,227,5.639,228,4.905,229,3.147,230,5.639]],["title/injectables/AnnouncementService.html",[189,2.517,231,0.902]],["body/injectables/AnnouncementService.html",[0,0.128,3,0.122,4,0.122,5,0.122,11,2.346,15,0.236,17,1.308,29,0.484,30,0.014,31,1.367,34,1.212,36,1.552,39,0.737,63,1.033,87,0.247,99,0.138,110,0.009,111,0.009,113,4.974,116,2.429,119,3.323,136,1.683,145,1.353,153,1.775,154,2.647,155,3.395,156,2.782,157,4.799,158,2.654,159,3.526,160,4.657,163,2.426,164,2.337,166,2.537,169,4.799,172,2.147,173,2.923,174,4.799,175,2.923,178,2.391,179,5.062,185,2.539,188,0.702,189,3.456,191,2.044,192,4.326,193,2.044,198,1.638,226,1.459,228,3.526,231,1.238,232,1.784,233,3.526,234,2.816,235,2.235,236,4.053,237,3.395,238,4.053,239,5.517,240,4.053,241,3.331,242,4.053,243,4.053,244,4.053,245,4.053,246,4.053,247,2.391,248,2.147,249,4.053,250,1.711,251,1.873,252,4.053,253,2.622,254,6.272,255,5.517,256,3.456,257,3.691,258,4.053,259,1.353,260,1.257,261,4.053,262,1.711,263,3.456,264,4.053,265,4.053,266,1.577,267,4.053,268,2.712]],["title/controllers/AppController.html",[147,1.446,269,2.894]],["body/controllers/AppController.html",[0,0.181,3,0.173,4,0.173,5,0.173,15,0.334,30,0.014,32,1.195,39,0.684,47,0.77,87,0.235,99,0.195,110,0.012,111,0.012,147,2.483,149,2.148,153,2.219,164,2.219,188,0.995,195,2.423,196,2.762,198,1.604,269,4.966,270,4.994,271,6.671,272,7.669,273,5.741,274,6.897,275,5.741,276,1.989,277,4.631,278,4.994,279,5.741,280,5.741]],["title/modules/AppModule.html",[209,1.293,281,2.894]],["body/modules/AppModule.html",[0,0.125,3,0.12,4,0.12,5,0.12,27,1.746,28,1.544,29,0.264,30,0.014,47,0.566,87,0.271,99,0.135,110,0.009,111,0.009,114,1.746,136,1.791,149,2.034,187,3.406,188,0.687,209,1.995,210,4.83,211,1.908,212,1.908,213,2.102,214,2.102,215,1.908,216,3.286,217,2.102,221,2.88,222,1.908,223,2,225,2.214,226,1.428,229,3.462,234,1.884,241,2.816,251,1.104,253,2.149,266,2.115,269,4.466,277,4.523,278,3.451,281,5.873,282,3.451,283,3.451,284,3.451,285,4.83,286,4.83,287,4.83,288,4.83,289,4.259,290,4.83,291,3.967,292,5.437,293,3.937,294,2.214,295,3.451,296,2.857,297,3.111,298,3.967,299,3.967,300,3.967,301,3.967,302,3.111,303,3.967,304,3.967,305,3.967,306,3.967,307,2.857,308,3.967,309,3.967,310,3.967,311,3.967,312,2.857,313,3.451,314,3.451,315,3.451,316,3.967,317,2.857,318,3.967,319,3.967,320,3.967,321,2.857,322,3.967,323,3.451,324,3.451,325,4.729,326,3.967,327,3.406,328,4.466,329,5.395,330,3.111,331,3.967,332,2.485,333,3.967,334,3.967,335,3.451,336,2.102,337,3.967,338,5.804,339,3.967,340,3.451,341,3.967,342,3.967,343,3.967,344,3.967,345,6.672,346,5.437,347,4.263,348,3.967,349,5.437,350,3.111,351,3.967,352,3.451,353,3.967,354,3.967,355,3.967,356,2.654,357,2.857,358,3.967,359,2.654,360,3.967,361,3.967,362,3.967,363,3.967,364,3.967,365,3.967,366,3.967,367,3.451]],["title/injectables/AppService.html",[231,0.902,277,2.517]],["body/injectables/AppService.html",[0,0.192,3,0.185,4,0.185,5,0.185,15,0.355,30,0.014,39,0.606,47,0.746,87,0.208,99,0.208,110,0.012,111,0.012,153,2.304,164,1.968,188,1.06,198,1.423,231,1.607,232,2.693,271,6.811,277,4.486,368,5.321,369,6.117,370,6.117,371,6.117]],["title/entities/ApplicationStatusHistory.html",[112,1.293,372,2.688]],["body/entities/ApplicationStatusHistory.html",[0,0.138,3,0.132,4,0.132,5,0.132,15,0.337,16,0.86,29,0.525,30,0.014,31,1.203,32,1.334,36,1.36,39,0.763,47,0.802,63,1.077,87,0.197,99,0.149,110,0.01,111,0.01,112,1.406,114,1.925,122,2.45,123,3.425,127,5.349,130,4.552,132,3.452,135,3.881,136,1.994,144,3.746,145,1.459,266,1.701,276,2.247,372,3.883,373,3.929,374,6.777,375,3.803,376,3.845,377,5.669,378,6.517,379,6.517,380,6.517,381,6.517,382,4.36,383,4.349,384,2.739,385,4.552,386,5.805,387,4.552,388,4.18,389,4.372,390,6.039,391,4.372,392,4.263,393,5.825,394,4.372,395,2.925,396,5.805,397,4.372,398,5.805,399,4.372,400,4.372,401,5.805,402,4.372,403,5.805,404,4.372,405,5.049,406,4.372,407,3.636,408,3.425,409,2.44,410,2.739,411,4.372,412,3.803,413,4.372,414,2.316]],["title/entities/Appointment.html",[112,1.293,415,2.517]],["body/entities/Appointment.html",[0,0.127,3,0.122,4,0.122,5,0.122,12,1.386,15,0.234,16,0.813,20,3.005,23,2.337,24,2.337,29,0.541,30,0.014,31,1.163,32,1.396,34,1.868,36,1.304,39,0.799,44,1.247,47,0.845,63,0.572,87,0.187,99,0.187,110,0.009,111,0.009,112,1.294,114,1.771,116,2.75,121,4.179,122,3.06,123,3.686,125,3.672,132,3.31,135,3.384,136,1.992,138,2.136,142,4.499,144,4.107,145,1.343,266,2.136,276,1.802,384,2.52,407,3.438,408,3.238,415,3.438,416,3.154,417,4.899,418,4.899,419,4.899,420,4.179,421,3.913,422,3.913,423,3.913,424,2.434,425,4.022,426,4.022,427,3.154,428,4.022,429,4.022,430,4.022,431,4.022,432,4.022,433,4.022,434,4.022,435,4.022,436,4.304,437,4.022,438,4.022,439,4.022,440,4.4,441,4.4,442,4.022,443,4.022,444,2.691,445,4.304,446,5.488,447,4.022,448,4.022,449,2.245,450,3.063,451,4.304,452,3.238,453,3.438,454,4.022,455,2.897,456,3.499]],["title/controllers/AppointmentController.html",[147,1.446,457,2.894]],["body/controllers/AppointmentController.html",[0,0.08,3,0.077,4,0.077,5,0.077,8,1.172,10,2.373,11,2.404,12,1.454,15,0.147,17,1.252,29,0.464,30,0.014,31,0.439,32,1.246,36,1.566,39,0.713,47,0.826,63,0.989,87,0.241,95,0.878,96,1.587,99,0.086,110,0.007,111,0.007,122,3.035,147,0.912,149,0.948,151,1.414,153,1.26,154,2.46,155,2.718,156,1.976,158,1.885,161,2.312,163,2.365,164,2.314,166,1.165,167,2.455,175,1.342,176,1.825,178,1.495,180,1.825,182,3.001,183,1.825,184,1.414,185,3.377,187,1.587,188,0.439,191,1.278,193,1.278,195,1.069,196,1.885,198,1.648,203,1.825,205,2.822,207,1.987,234,2.805,250,1.069,251,1.09,253,1.66,259,2.057,260,2.113,276,1.914,332,2.455,356,1.695,415,4.876,418,3.757,424,0.878,440,3.377,457,2.822,458,2.204,459,5.926,460,3.408,461,3.918,462,3.408,463,3.918,464,4.791,465,3.18,466,3.205,467,2.204,468,3.86,469,3.35,470,2.204,471,2.534,472,2.621,473,2.187,474,2.076,475,2.534,476,3.119,477,2.204,478,5.179,479,2.204,480,3.918,481,2.534,482,2.204,483,5.391,484,3.918,485,2.534,486,2.534,487,2.534,488,2.534,489,2.534,490,2.204,491,3.918,492,4.167,493,2.534,494,2.534,495,2.534,496,4.227,497,4.019,498,2.534,499,2.534,500,5.361,501,3.918,502,2.534,503,2.534,504,5.07,505,2.534,506,2.534,507,2.534,508,2.534,509,4.441,510,2.204,511,2.534,512,1.495,513,2.534,514,2.534,515,1.587,516,3.439,517,2.534,518,2.534,519,3.001,520,2.204,521,3.073,522,1.342,523,1.825,524,1.587,525,2.939,526,1.825,527,0.846,528,1.825,529,1.695,530,2.204,531,1.987,532,1.695,533,4.123,534,2.621,535,1.695,536,2.534,537,2.534,538,3.651,539,1.825,540,1.414,541,2.534,542,3.899,543,2.534,544,2.534,545,4.571,546,2.534,547,2.534,548,1.987,549,3.651,550,3.918,551,2.534,552,2.534,553,2.534,554,6.163,555,2.534,556,2.204,557,1.825,558,2.534,559,2.534,560,3.918,561,3.918,562,3.205,563,2.534,564,2.204,565,2.534,566,2.534,567,1.987,568,1.987,569,2.534,570,2.534,571,2.204,572,2.534,573,4.791,574,2.534,575,2.534,576,1.976,577,3.918,578,3.918,579,3.918,580,3.408,581,3.408,582,3.408,583,3.918,584,3.918,585,2.534,586,2.534,587,1.987,588,2.534,589,2.534,590,1.987,591,1.987,592,2.534,593,2.204,594,2.534,595,2.534,596,2.534,597,2.534,598,2.534]],["title/modules/AppointmentModule.html",[209,1.293,285,2.688]],["body/modules/AppointmentModule.html",[0,0.177,3,0.17,4,0.17,5,0.17,30,0.014,87,0.266,99,0.192,110,0.011,111,0.011,149,2.552,188,0.977,209,2.36,211,2.713,212,2.713,213,2.987,214,2.987,215,2.713,216,3.886,217,3.886,221,3.614,222,2.713,223,2.843,225,3.147,226,2.03,229,3.147,285,5.369,415,3.532,457,5.283,519,5.18,520,4.905,529,3.772,599,4.905,600,4.905,601,4.905,602,5.639,603,5.639,604,5.639]],["title/injectables/AppointmentService.html",[231,0.902,519,2.517]],["body/injectables/AppointmentService.html",[0,0.068,3,0.065,4,0.065,5,0.065,11,1.842,15,0.125,17,1.242,29,0.46,30,0.014,31,1.246,36,1.531,39,0.713,47,0.799,63,0.981,79,1.347,87,0.205,96,2.157,99,0.073,109,0.871,110,0.006,111,0.006,122,3.266,145,0.718,153,1.108,154,1.818,155,2.172,156,1.737,158,1.657,163,2.304,164,2.286,166,1.584,175,1.824,178,1.269,188,0.373,191,1.085,193,1.085,198,1.577,226,0.774,231,0.773,232,0.947,234,2.773,235,1.395,237,2.483,241,3.222,247,1.269,248,1.139,250,2.547,251,2.113,253,2.299,256,3.085,257,1.439,259,2.426,260,2.058,262,1.818,263,2.157,276,2.022,357,4.778,385,1.687,415,4.634,417,4.918,418,3.861,419,4.507,424,1.193,440,3.085,450,1.2,451,1.687,452,1.269,453,1.347,456,3.747,459,4.686,460,3.747,462,2.996,466,2.881,467,1.871,468,3.6,476,0.947,482,1.871,490,2.996,492,4.283,500,4.686,504,3.747,509,4.196,512,1.269,516,1.269,519,2.157,521,2.7,529,1.439,564,1.871,571,2.996,576,2.717,605,1.871,606,4.307,607,3.444,608,4.924,609,3.444,610,4.307,611,4.924,612,2.151,613,2.151,614,3.444,615,2.151,616,2.151,617,2.151,618,2.151,619,3.444,620,2.151,621,2.151,622,2.151,623,2.151,624,3.444,625,2.151,626,2.151,627,2.151,628,2.151,629,2.151,630,2.151,631,2.151,632,2.151,633,1.687,634,2.698,635,2.151,636,2.151,637,1.871,638,1.871,639,2.151,640,2.848,641,2.151,642,2.151,643,2.151,644,3.747,645,2.151,646,4.307,647,2.151,648,3.852,649,1.871,650,2.151,651,2.151,652,2.151,653,2.151,654,3.377,655,3.444,656,5.387,657,4.999,658,4.307,659,4.307,660,1.871,661,3.444,662,3.444,663,3.444,664,3.444,665,3.444,666,4.307,667,3.444,668,2.151,669,1.824,670,2.151,671,3.444,672,2.151,673,2.761,674,3.558,675,4.686,676,1.269,677,2.151,678,2.151,679,2.151,680,1.871,681,2.151,682,2.151,683,2.151,684,3.444,685,3.444,686,3.444,687,2.151,688,2.151,689,4.307,690,1.871,691,2.151,692,2.151,693,2.151,694,1.347,695,2.151,696,2.151,697,1.871,698,2.151,699,2.151,700,2.151,701,2.151,702,2.151,703,2.151,704,3.546,705,2.151,706,3.444,707,2.151,708,2.151,709,2.151,710,2.151,711,2.151,712,2.151,713,2.996,714,3.444,715,2.996,716,2.7,717,2.996,718,1.549,719,5.747,720,2.151,721,2.151,722,2.151,723,3.444,724,2.151,725,2.151,726,2.151,727,2.151,728,1.139,729,1.2,730,1.549,731,4.307,732,1.737,733,3.444,734,3.444,735,2.151,736,2.151,737,3.444,738,2.151]],["title/controllers/AuthController.html",[147,1.446,739,2.688]],["body/controllers/AuthController.html",[0,0.073,1,2.699,3,0.071,4,0.071,5,0.071,8,2.419,10,2.002,11,2.595,12,1.451,13,1.028,14,3.441,15,0.136,16,0.764,17,1.01,22,2.416,28,2.513,29,0.52,30,0.014,31,0.972,32,0.972,35,1.435,36,1.301,39,0.556,41,1.769,44,1.41,47,0.745,63,0.847,87,0.231,95,0.81,97,2.849,99,0.079,110,0.006,111,0.006,147,0.841,149,0.874,151,1.304,153,1.183,161,1.378,163,1.873,164,1.805,182,2.849,184,1.304,188,0.405,193,1.178,195,0.986,198,1.305,234,2.444,251,0.65,253,1.576,259,1.989,260,1.848,262,1.919,276,2.15,336,2.733,424,1.274,469,1.691,472,2.46,474,2.733,476,2.271,496,1.832,497,1.378,515,1.463,522,1.238,524,1.463,525,1.854,527,1.518,532,1.563,533,3.986,534,5.024,535,1.563,538,2.849,539,3.275,540,2.879,542,3.753,549,1.463,576,2.293,590,5.438,640,2.002,669,2.409,673,2.002,674,3.056,676,2.17,732,3.004,739,2.46,740,1.832,741,3.566,742,2.884,743,3.753,744,3.199,745,3.956,746,2.336,747,3.603,748,3.566,749,5.61,750,4.487,751,3.199,752,2.884,753,2.884,754,2.336,755,2.336,756,2.336,757,4.651,758,2.336,759,5.183,760,5.183,761,3.871,762,3.199,763,4.548,764,5.618,765,5.183,766,2.336,767,3.199,768,3.199,769,3.199,770,2.336,771,2.648,772,2.032,773,5.183,774,5.183,775,3.678,776,2.336,777,2.336,778,3.199,779,2.336,780,4.29,781,2.032,782,2.032,783,5.078,784,2.46,785,2.884,786,2.336,787,2.336,788,2.336,789,2.032,790,4.046,791,2.336,792,4.487,793,4.487,794,3.678,795,2.336,796,2.336,797,2.336,798,2.032,799,4.046,800,2.336,801,3.275,802,2.336,803,2.336,804,2.336,805,2.336,806,2.336,807,2.336,808,2.336,809,2.336,810,2.336,811,3.231,812,2.683,813,1.832,814,1.832,815,1.832,816,2.032,817,1.378,818,1.682,819,2.032,820,1.682,821,3.199,822,4.88,823,0.78,824,2.032,825,2.032,826,2.884,827,2.304,828,2.648,829,2.052,830,3.566,831,2.032,832,2.032,833,1.832,834,2.032,835,2.032,836,3.275,837,3.275,838,2.538,839,2.032,840,2.032,841,2.032,842,1.563,843,2.032,844,1.682,845,2.032,846,2.032,847,1.832,848,1.832,849,3.043,850,3.515,851,3.275,852,3.956,853,3.566,854,5.183,855,2.849,856,2.032,857,2.032,858,2.032,859,3.199,860,2.648,861,2.032,862,1.832,863,2.032,864,2.032,865,2.032,866,2.032]],["title/modules/AuthModule.html",[209,1.293,286,2.688]],["body/modules/AuthModule.html",[0,0.156,3,0.15,4,0.15,5,0.15,12,0.925,30,0.014,87,0.273,99,0.168,110,0.011,111,0.011,149,2.355,188,0.858,198,1.152,209,2.226,211,2.382,212,2.382,213,2.623,214,2.623,215,2.382,216,3.666,217,3.666,221,3.335,222,2.382,223,2.497,225,2.764,226,1.783,229,3.513,286,5.44,289,4.533,293,4.083,294,2.764,302,3.883,312,3.566,313,4.308,449,2.764,739,4.629,812,4.797,813,3.883,820,3.566,867,4.308,868,4.308,869,4.308,870,4.952,871,4.797,872,4.952,873,4.952,874,3.883,875,6.294,876,3.102,877,4.952,878,4.952,879,4.952,880,3.102,881,4.952,882,4.952,883,4.952,884,4.952,885,4.952,886,4.952,887,4.952,888,4.308]],["title/injectables/AuthService.html",[231,0.902,812,2.371]],["body/injectables/AuthService.html",[0,0.044,1,1.824,3,0.043,4,0.043,5,0.043,9,0.885,10,2.197,11,2.367,12,1.449,14,2.982,15,0.082,17,0.991,18,0.749,21,1.225,22,2.484,23,1.418,24,1.195,25,2.153,26,1.912,27,3.215,28,2.224,29,0.381,30,0.014,31,1.074,34,1.575,35,1.913,36,1.149,39,0.546,43,1.782,44,1.176,47,0.52,62,1.433,63,0.93,87,0.194,96,0.885,97,1.521,98,2.777,99,0.048,110,0.004,111,0.004,136,0.652,138,1.243,145,0.472,153,0.781,154,0.596,158,2.054,163,1.838,164,1.695,185,1.521,188,0.245,193,0.712,198,1.498,226,0.509,231,0.545,232,0.622,234,2.331,235,0.984,237,1.912,241,1.025,248,0.749,250,2.324,251,2.167,253,2.602,259,2.524,260,2.288,262,2.106,266,1.814,321,1.749,340,1.229,350,3.914,356,1.625,414,2.008,424,1.909,449,0.789,476,2.053,497,1.433,516,3.371,527,2.245,545,1.904,562,0.945,576,2.517,591,2.973,634,2.375,637,4.341,640,2.729,644,2.112,648,0.789,669,2.918,673,2.785,674,3.54,676,2.751,694,2.001,729,2.383,732,2.517,741,2.504,742,1.904,743,1.625,744,2.112,748,4.319,783,1.749,784,0.945,789,2.112,790,3.58,798,2.112,799,2.921,801,1.017,811,2.001,812,1.433,814,1.108,815,1.108,817,0.834,826,1.904,827,0.885,829,2.785,833,1.108,836,3.794,837,1.749,838,2.941,849,0.945,850,1.433,851,1.017,855,2.001,860,3.358,862,1.904,874,1.108,880,0.885,889,1.229,890,2.428,891,2.428,892,2.428,893,2.428,894,1.229,895,4.991,896,2.517,897,1.413,898,1.625,899,1.413,900,1.413,901,3.298,902,2.428,903,1.413,904,2.428,905,1.413,906,1.413,907,1.413,908,2.428,909,1.413,910,2.428,911,1.413,912,0.945,913,2.428,914,1.413,915,2.73,916,1.521,917,1.017,918,0.945,919,3.944,920,3.791,921,1.413,922,3.194,923,3.914,924,4.341,925,4.991,926,3.914,927,4.341,928,4.341,929,4.341,930,4.27,931,1.413,932,1.413,933,1.108,934,1.108,935,1.413,936,2.778,937,1.413,938,2.428,939,3.194,940,1.413,941,1.413,942,1.413,943,1.413,944,3.914,945,3.194,946,2.73,947,1.749,948,1.749,949,2.137,950,3.075,951,2.428,952,1.413,953,1.229,954,2.536,955,2.536,956,1.749,957,1.413,958,1.355,959,1.017,960,3.298,961,1.413,962,2.73,963,2.3,964,3.194,965,2.73,966,1.749,967,2.428,968,2.428,969,1.413,970,2.428,971,2.428,972,3.298,973,2.112,974,3.298,975,1.413,976,1.749,977,1.017,978,1.625,979,1.413,980,1.413,981,1.017,982,2.428,983,1.413,984,3.194,985,1.413,986,1.413,987,1.413,988,1.413,989,1.413,990,1.413,991,1.413,992,1.413,993,1.413,994,1.413,995,1.413,996,0.945,997,1.413,998,2.428,999,2.428,1000,0.945,1001,2.137,1002,3.194,1003,1.413,1004,1.413,1005,3.194,1006,1.017,1007,1.413,1008,1.782,1009,1.229,1010,2.375,1011,3.194,1012,1.413,1013,1.413,1014,1.413,1015,1.749,1016,3.194,1017,1.413,1018,2.428,1019,1.017,1020,3.194,1021,1.017,1022,2.428,1023,1.017,1024,3.194,1025,1.017,1026,1.413,1027,1.749,1028,1.413,1029,2.428,1030,1.413,1031,2.428,1032,1.413,1033,1.413,1034,4.27,1035,2.428,1036,1.413,1037,1.413,1038,2.428,1039,1.017,1040,1.413,1041,1.413,1042,3.194,1043,1.625,1044,3.194,1045,2.428,1046,2.504,1047,1.413,1048,3.791,1049,1.229,1050,1.413,1051,1.413,1052,1.413,1053,1.413,1054,1.413,1055,2.428,1056,1.413,1057,1.413,1058,1.413,1059,2.428,1060,1.413,1061,1.413,1062,2.428,1063,1.413,1064,1.229,1065,1.413,1066,1.413,1067,2.778,1068,1.229,1069,1.413,1070,1.413,1071,1.108,1072,3.791,1073,1.413,1074,1.229,1075,2.428,1076,1.413,1077,2.428,1078,1.413,1079,1.413,1080,3.194,1081,1.413,1082,4.27,1083,1.413,1084,1.108,1085,1.413,1086,2.428,1087,1.413,1088,1.413,1089,2.428,1090,1.413,1091,1.413,1092,1.413,1093,1.413,1094,1.413,1095,1.413,1096,1.413,1097,1.229,1098,2.47,1099,1.413,1100,1.413,1101,1.413,1102,3.298,1103,1.413,1104,2.428,1105,1.413,1106,1.413,1107,1.413,1108,1.413,1109,1.229,1110,1.413]],["title/interfaces/AuthenticatedUser.html",[469,1.848,823,1.341]],["body/interfaces/AuthenticatedUser.html",[0,0.154,3,0.148,4,0.148,5,0.148,13,2.15,15,0.284,16,0.924,22,2.911,29,0.458,30,0.014,31,1.255,35,1.359,36,1.562,39,0.484,41,3.307,44,1.514,47,0.779,63,0.694,87,0.246,99,0.212,110,0.01,111,0.01,188,0.846,195,2.061,198,1.136,231,1.4,251,2.015,259,2.083,260,1.935,266,1.9,293,4.056,294,2.725,328,3.517,424,2.162,469,3.161,527,2.598,811,3.059,823,2.083,855,3.059,871,2.881,876,3.059,880,3.908,947,4.951,948,3.517,950,3.517,996,3.267,1111,2.725,1112,3.517,1113,3.829,1114,3.829,1115,4.892,1116,3.517,1117,4.174,1118,3.829,1119,3.829,1120,3.517,1121,3.829,1122,4.599,1123,3.829,1124,3.829,1125,3.267,1126,3.829,1127,3.829,1128,3.829,1129,3.829,1130,3.829,1131,3.829,1132,3.829,1133,3.829,1134,3.829,1135,3.829,1136,3.829,1137,3.829]],["title/entities/Counter.html",[112,1.293,1138,2.371]],["body/entities/Counter.html",[0,0.156,3,0.15,4,0.15,5,0.15,15,0.288,16,0.933,29,0.512,30,0.014,31,1.262,32,1.303,34,1.884,36,1.445,39,0.746,44,1.538,47,0.656,63,1.069,87,0.214,99,0.214,110,0.011,111,0.011,112,1.595,114,2.183,125,3.318,132,3.668,135,3.674,136,1.859,144,3.792,145,1.656,276,1.997,392,2.926,408,3.717,441,4.711,444,3.318,445,4.941,850,4.298,1138,3.717,1139,3.889,1140,6.024,1141,6.925,1142,3.876,1143,4.314,1144,6.301,1145,7.286,1146,6.301,1147,4.96,1148,4.96,1149,4.96,1150,4.96,1151,5.897,1152,4.96,1153,5.481,1154,4.96,1155,3.947,1156,4.537,1157,4.96,1158,4.96]],["title/classes/CreateAnnouncementDto.html",[0,0.126,160,2.517]],["body/classes/CreateAnnouncementDto.html",[0,0.209,2,1.734,3,0.163,4,0.163,5,0.163,8,2.15,15,0.313,16,0.983,17,1.412,29,0.514,30,0.014,32,1.335,39,0.764,47,0.836,87,0.183,89,3.451,90,3.544,93,2.183,99,0.183,110,0.011,111,0.011,117,6.256,118,6.256,119,3.81,120,6.256,138,2.583,160,4.158,1159,6.827,1160,4.226,1161,5.773,1162,5.39,1163,5.773,1164,5.39,1165,5.39,1166,5.39,1167,5.39,1168,5.39,1169,4.505,1170,5.204]],["title/classes/CreateAppointmentDto.html",[0,0.126,468,2.517]],["body/classes/CreateAppointmentDto.html",[0,0.19,2,1.495,3,0.14,4,0.14,5,0.14,15,0.27,16,0.895,17,1.36,20,3.23,23,2.512,24,2.512,29,0.534,30,0.014,31,1.047,32,1.388,39,0.794,47,0.853,87,0.206,89,3.537,90,3.586,93,1.882,99,0.158,110,0.01,111,0.01,138,2.351,276,1.937,417,5.265,419,5.265,420,4.492,421,4.206,422,4.206,423,4.206,424,2.327,440,4.206,468,3.785,529,3.109,1161,4.042,1169,4.886,1171,7.01,1172,3.644,1173,7.555,1174,4.647,1175,4.647,1176,4.647,1177,4.647,1178,4.647,1179,4.647,1180,4.647,1181,4.647,1182,4.647,1183,4.647,1184,4.042,1185,4.647,1186,4.647,1187,3.109,1188,6.043,1189,4.042]],["title/classes/CreateDocumentApplicationDto.html",[0,0.126,1190,2.688]],["body/classes/CreateDocumentApplicationDto.html",[0,0.191,2,1.504,3,0.141,4,0.141,5,0.141,8,2.208,15,0.272,16,0.898,17,1.405,23,1.749,24,1.749,29,0.505,30,0.014,32,1.235,37,3.295,39,0.706,47,0.742,87,0.229,89,3.096,90,3.096,93,1.893,95,1.62,99,0.159,110,0.01,111,0.01,266,2.36,276,1.749,336,3.213,373,3.724,376,4.607,382,4.505,409,4.299,410,2.928,441,2.928,562,4.767,1098,3.213,1187,3.127,1190,4.058,1191,6.423,1192,3.666,1193,5.857,1194,6.123,1195,5.857,1196,4.849,1197,6.066,1198,6.066,1199,4.756,1200,4.756,1201,5.276,1202,4.675,1203,4.066,1204,4.675,1205,4.675,1206,5.276,1207,6.066,1208,6.066,1209,4.368,1210,4.675,1211,4.675,1212,6.066,1213,6.066,1214,4.675,1215,6.066,1216,3.366,1217,3.724,1218,4.675,1219,4.675,1220,4.675,1221,4.675,1222,4.675,1223,4.675,1224,4.675,1225,5.276,1226,4.675,1227,4.675]],["title/classes/CreateQueueDto.html",[0,0.126,1228,2.894]],["body/classes/CreateQueueDto.html",[0,0.195,2,1.556,3,0.146,4,0.146,5,0.146,15,0.281,16,0.918,17,1.441,20,3.293,23,2.561,24,2.561,29,0.53,30,0.014,31,1.075,32,1.376,39,0.787,47,0.857,87,0.165,89,3.571,90,3.616,93,1.96,99,0.165,110,0.01,111,0.01,138,2.413,420,4.579,421,4.288,422,4.288,423,4.288,424,2.372,1163,6.28,1169,4.676,1170,4.863,1228,4.466,1229,6.965,1230,3.794,1231,5.368,1232,5.954,1233,4.839,1234,4.839,1235,4.839,1236,4.839,1237,4.839,1238,4.839,1239,4.839,1240,4.839,1241,4.839,1242,4.839]],["title/classes/CreateUserDto.html",[0,0.126,1243,2.371]],["body/classes/CreateUserDto.html",[0,0.159,2,1.153,3,0.108,4,0.108,5,0.108,7,2.582,8,2.427,12,1.456,15,0.208,16,0.75,17,1.435,18,3.113,19,3.467,20,1.725,21,2.963,22,2.69,23,2.199,24,2.199,25,2.963,26,2.963,27,2.966,28,2.622,29,0.519,30,0.014,31,1.212,32,1.326,34,1.515,35,1.777,36,1.058,37,3.231,39,0.759,41,2.438,42,3.649,43,2.828,44,1.112,47,0.834,57,3.39,62,2.99,63,1.088,66,2.828,69,3.39,72,3.39,73,3.649,74,4.679,75,2.582,80,3.649,81,3.39,82,4.232,87,0.172,88,3.649,89,3.377,90,3.434,91,4.232,92,3.974,93,1.452,94,4.6,95,1.243,99,0.122,103,4.001,105,4.273,108,2.582,110,0.009,111,0.009,136,1.36,327,3.174,649,5.112,958,2.828,1010,3.174,1169,4.001,1217,3.398,1243,2.99,1244,6.723,1245,5.637,1246,4.408,1247,3.586,1248,3.586,1249,3.39,1250,3.586,1251,3.586,1252,4.001,1253,4.408,1254,3.586,1255,3.586,1256,5.067,1257,3.586,1258,3.119,1259,5.556,1260,3.586,1261,3.119,1262,3.974,1263,4.408,1264,3.586,1265,3.119,1266,5.067,1267,3.586,1268,3.119,1269,4.408,1270,3.586,1271,3.586,1272,3.586,1273,4.408,1274,3.586,1275,4.408,1276,3.586,1277,3.119,1278,3.586,1279,3.119]],["title/entities/DocumentApplication.html",[112,1.293,383,2.517]],["body/entities/DocumentApplication.html",[0,0.109,3,0.149,4,0.105,5,0.174,12,1.33,15,0.287,16,0.732,29,0.534,30,0.014,31,1.09,32,1.342,34,1.479,36,1.203,39,0.768,44,1.074,47,0.72,63,1.068,87,0.214,99,0.196,110,0.008,111,0.008,112,1.114,114,1.525,116,2.539,121,3.858,122,2.654,123,2.917,125,3.308,127,4.152,128,3.098,130,3.877,135,3.789,136,2.041,142,3.561,144,3.67,145,1.156,266,2.447,276,1.814,372,4.207,373,3.935,376,2.044,382,3.858,383,3.098,384,2.17,388,4.529,392,3.923,393,3.877,395,2.318,405,4.301,407,3.098,408,2.917,409,1.933,414,1.835,424,1.998,441,4.707,444,2.318,449,1.933,450,2.76,1193,5.016,1194,5.707,1195,5.016,1199,2.716,1200,4.522,1206,4.301,1280,5.619,1281,2.716,1282,4.522,1283,5.766,1284,5.766,1285,4.945,1286,3.464,1287,4.945,1288,3.464,1289,3.877,1290,3.464,1291,4.207,1292,4.301,1293,4.945,1294,3.464,1295,4.945,1296,4.945,1297,3.464,1298,3.464,1299,3.464,1300,4.945,1301,3.464,1302,4.789,1303,3.464,1304,4.945,1305,4.945,1306,4.945,1307,3.464,1308,3.464,1309,3.013,1310,4.301,1311,3.464,1312,4.931,1313,3.464,1314,3.464,1315,4.945,1316,5.016,1317,3.013,1318,3.013,1319,3.013,1320,3.013,1321,4.301,1322,3.013,1323,2.495,1324,3.013,1325,3.013,1326,3.013,1327,3.013,1328,3.013,1329,4.301,1330,3.877,1331,4.301,1332,4.301,1333,3.013,1334,2.495,1335,2.716,1336,3.013,1337,3.013,1338,3.013,1339,3.464,1340,3.464,1341,3.464,1342,3.464,1343,3.464,1344,3.464]],["title/controllers/DocumentApplicationsController.html",[147,1.446,1345,2.894]],["body/controllers/DocumentApplicationsController.html",[0,0.066,3,0.064,4,0.064,5,0.199,8,1.971,10,2.966,11,2.239,12,1.507,15,0.122,17,1.186,29,0.458,30,0.014,32,1.189,36,1.56,39,0.68,44,1.93,47,0.82,63,0.937,87,0.233,95,0.73,99,0.072,110,0.006,111,0.006,136,0.565,147,0.758,149,0.788,151,1.176,153,1.089,154,2.25,155,2.142,156,1.708,158,1.629,161,1.998,163,2.201,164,2.208,166,0.969,167,1.32,173,1.116,175,1.116,176,1.517,178,1.243,180,1.517,182,3.048,183,1.517,184,1.176,185,2.661,187,1.32,188,0.365,191,1.062,193,1.062,196,1.013,198,1.622,203,1.517,205,3.839,207,1.652,234,2.755,235,0.853,241,1.429,250,0.889,251,1.787,253,1.686,259,0.703,260,1.509,262,2.053,266,0.82,276,1.901,307,5.021,327,1.32,336,1.116,373,3.516,376,4.49,382,1.409,409,3.585,410,1.32,424,2.45,465,2.871,466,2.841,469,3.61,470,1.832,472,2.266,473,1.89,474,2.824,476,2.966,478,3.504,497,3.975,510,1.832,512,1.243,515,1.32,516,1.998,522,1.116,523,1.517,524,1.32,525,1.062,526,1.517,527,0.703,528,1.517,530,1.832,531,1.652,532,1.409,533,4.665,534,3.809,535,1.409,538,1.32,539,1.517,540,1.176,542,4.591,545,5.169,548,3.331,549,2.661,557,2.439,562,1.409,581,5.206,587,1.652,704,1.517,757,3.504,761,1.89,771,3.504,780,1.517,784,3.255,785,2.656,827,1.32,901,2.946,912,2.266,933,2.656,934,1.652,949,1.409,1043,2.266,1046,1.652,1098,1.116,1190,3.255,1216,1.517,1282,5.169,1302,2.439,1345,2.439,1346,1.832,1347,5.206,1348,4.247,1349,4.865,1350,4.247,1351,4.247,1352,4.247,1353,2.107,1354,2.107,1355,2.107,1356,3.387,1357,2.107,1358,2.107,1359,2.107,1360,2.107,1361,2.107,1362,2.107,1363,2.107,1364,5.694,1365,2.871,1366,1.832,1367,2.107,1368,2.107,1369,4.247,1370,2.107,1371,2.107,1372,2.107,1373,3.387,1374,2.439,1375,2.107,1376,2.107,1377,2.107,1378,2.107,1379,3.387,1380,3.815,1381,2.107,1382,4.247,1383,2.107,1384,3.387,1385,2.107,1386,2.107,1387,2.107,1388,4.865,1389,3.504,1390,2.107,1391,4.247,1392,2.107,1393,2.107,1394,2.107,1395,3.331,1396,4.953,1397,2.107,1398,2.107,1399,2.946,1400,2.107,1401,3.387,1402,3.387,1403,1.652,1404,1.517,1405,2.107,1406,1.832,1407,1.832,1408,3.059,1409,1.832,1410,2.946,1411,2.107,1412,2.107,1413,2.107,1414,2.107,1415,2.107,1416,2.107,1417,2.107,1418,1.832,1419,1.013,1420,3.387,1421,2.107,1422,2.107,1423,3.387,1424,2.107,1425,2.107,1426,2.107,1427,2.107,1428,2.107,1429,2.107,1430,2.107,1431,2.107,1432,2.107,1433,4.247,1434,1.652,1435,2.107,1436,2.107,1437,2.107,1438,2.107,1439,6.224,1440,2.107,1441,2.107,1442,2.107,1443,2.107,1444,2.107,1445,2.107,1446,2.107,1447,2.107,1448,2.107,1449,2.107,1450,2.107,1451,2.107,1452,2.107,1453,2.107,1454,2.107,1455,2.107,1456,1.243,1457,2.107,1458,2.107,1459,2.107,1460,2.107,1461,2.107]],["title/modules/DocumentApplicationsModule.html",[209,1.293,287,2.688]],["body/modules/DocumentApplicationsModule.html",[0,0.164,3,0.158,4,0.158,5,0.158,30,0.014,87,0.272,99,0.178,110,0.011,111,0.011,149,2.435,188,0.905,209,2.281,211,2.512,212,2.512,213,2.766,214,2.766,215,2.512,216,3.756,217,3.756,221,3.447,222,2.512,223,2.633,225,2.914,226,1.879,229,2.914,276,1.506,287,5.423,307,3.76,372,4.354,373,2.633,383,4.077,409,3.632,410,3.271,1216,4.686,1291,4.354,1317,4.542,1318,4.542,1345,5.106,1408,5.897,1409,4.542,1462,4.542,1463,4.542,1464,4.542,1465,4.832,1466,5.221,1467,5.221,1468,5.221,1469,5.221,1470,5.221]],["title/entities/DocumentFile.html",[112,1.293,1291,2.688]],["body/entities/DocumentFile.html",[0,0.136,3,0.131,4,0.131,5,0.131,15,0.335,16,0.855,29,0.528,30,0.014,31,1.199,32,1.348,36,1.354,39,0.771,47,0.818,63,1.092,87,0.196,99,0.147,110,0.01,111,0.01,112,1.395,114,1.909,122,2.436,123,3.406,127,5.658,128,3.616,132,3.438,134,5.022,135,2.911,136,1.55,140,5.022,144,3.814,145,1.447,373,3.962,376,3.829,377,5.646,383,4.335,384,2.716,385,4.527,387,4.527,388,3.122,390,6.019,392,4.372,393,4.527,395,2.901,407,3.616,408,3.406,409,2.42,410,2.716,412,3.772,414,2.297,1280,5.658,1291,3.862,1396,5.646,1418,5.646,1471,3.772,1472,6.49,1473,6.49,1474,6.49,1475,6.49,1476,5.773,1477,3.772,1478,4.336,1479,4.336,1480,5.773,1481,5.773,1482,4.336,1483,5.773,1484,4.336,1485,5.773,1486,5.773,1487,4.336,1488,5.773,1489,4.336,1490,4.336,1491,5.773,1492,4.336,1493,5.773,1494,4.336,1495,4.336,1496,4.336]],["title/interfaces/FindAllOptions.html",[823,1.341,1497,2.688]],["body/interfaces/FindAllOptions.html",[0,0.071,1,1.729,3,0.069,4,0.069,5,0.069,10,0.999,11,1.899,12,1.406,14,1.729,15,0.132,16,0.532,17,0.996,18,3.117,19,3.472,21,2.789,22,2.574,23,2.392,24,2.306,25,3.401,26,3.32,27,2.59,28,2.724,29,0.338,30,0.014,31,1.246,34,0.679,35,1.947,36,1.518,43,2.006,44,1.983,47,0.686,63,0.836,66,1.266,87,0.224,98,2.25,99,0.122,109,0.919,110,0.006,111,0.006,116,0.999,119,2.364,136,0.609,138,0.883,145,0.758,154,0.958,158,2.147,166,1.044,173,3.387,175,1.202,188,0.393,191,1.144,198,1.6,209,0.73,226,0.817,231,0.806,234,2.282,235,0.919,237,1.812,241,2.602,247,1.339,248,1.202,250,1.517,251,2.209,253,2.625,256,1.422,257,1.518,259,2.198,260,2.042,262,2.142,263,2.252,268,1.518,414,2.931,465,1.339,512,1.339,516,1.339,527,2.336,540,1.266,576,2.25,634,1.422,640,0.999,648,2.006,669,1.904,673,0.999,674,2.052,694,1.422,728,1.904,729,1.266,732,2.789,817,2.12,823,1.2,829,3.441,838,3.087,896,2.25,898,1.518,915,1.634,916,2.252,917,1.634,918,1.518,919,4.512,946,2.588,949,2.404,954,2.404,955,3.937,956,2.588,958,1.266,959,1.634,962,2.588,963,2.588,965,2.588,966,2.588,976,2.588,977,1.634,978,1.518,981,1.634,1000,1.518,1001,2.404,1006,2.588,1008,1.266,1010,2.796,1015,1.634,1019,2.588,1021,1.634,1023,2.588,1025,1.634,1027,2.588,1098,1.202,1111,1.266,1243,2.633,1249,1.518,1365,2.25,1419,1.729,1456,1.339,1497,2.985,1498,1.634,1499,3.862,1500,4.752,1501,1.634,1502,1.634,1503,1.518,1504,3.396,1505,3.396,1506,2.985,1507,2.985,1508,2.985,1509,2.995,1510,2.985,1511,2.818,1512,1.266,1513,1.779,1514,1.779,1515,1.779,1516,1.779,1517,3.499,1518,2.818,1519,1.779,1520,1.779,1521,2.818,1522,2.404,1523,1.779,1524,1.779,1525,1.779,1526,1.779,1527,1.779,1528,1.779,1529,2.818,1530,1.779,1531,2.818,1532,1.634,1533,1.779,1534,3.98,1535,1.779,1536,1.779,1537,2.818,1538,3.98,1539,2.818,1540,1.779,1541,1.779,1542,1.779,1543,1.779,1544,1.779,1545,1.779,1546,1.779,1547,1.779,1548,1.779,1549,2.818,1550,3.499,1551,1.779,1552,2.818,1553,1.779,1554,1.779,1555,2.818,1556,1.634,1557,1.779,1558,1.779,1559,1.779,1560,1.779,1561,2.818,1562,1.779,1563,1.779,1564,2.818,1565,1.779,1566,1.779,1567,1.779,1568,1.779,1569,1.779,1570,1.779,1571,1.779,1572,1.779,1573,1.779,1574,1.779,1575,1.779,1576,2.818,1577,1.779,1578,1.779,1579,1.779,1580,1.779,1581,1.634,1582,1.779,1583,1.779]],["title/injectables/JwtAuthGuard.html",[231,0.902,522,2.129]],["body/injectables/JwtAuthGuard.html",[0,0.196,3,0.188,4,0.188,5,0.188,13,3.185,30,0.014,87,0.246,99,0.212,110,0.012,111,0.012,188,1.079,231,1.623,232,2.741,522,3.833,876,3.9,1584,5.415,1585,5.415,1586,7.235,1587,6.225]],["title/interfaces/JwtPayload.html",[823,1.341,1117,2.688]],["body/interfaces/JwtPayload.html",[0,0.153,3,0.147,4,0.147,5,0.147,13,2.143,15,0.283,16,0.922,17,1.121,22,2.909,29,0.458,30,0.014,31,1.254,35,1.354,36,1.299,39,0.483,41,2.342,44,1.51,47,0.81,63,0.692,87,0.246,99,0.212,110,0.01,111,0.01,188,0.843,195,2.055,198,1.132,231,1.397,251,2.013,259,2.078,260,1.931,266,1.894,293,4.05,294,2.717,328,3.506,424,2.158,469,2.863,527,2.596,811,3.05,823,2.078,855,3.05,871,2.872,876,3.05,880,3.9,947,4.943,948,5.211,950,3.506,996,3.257,1111,2.717,1112,3.506,1113,3.817,1114,3.817,1115,4.882,1116,3.506,1117,4.593,1118,3.817,1119,3.817,1120,3.506,1121,3.817,1122,4.593,1123,3.817,1124,3.817,1125,3.257,1126,3.817,1127,3.817,1128,3.817,1129,3.817,1130,3.817,1131,3.817,1132,3.817,1133,3.817,1134,3.817,1135,3.817,1136,3.817,1137,3.817]],["title/injectables/JwtStrategy.html",[231,0.902,871,2.371]],["body/injectables/JwtStrategy.html",[0,0.152,3,0.146,4,0.146,5,0.146,13,2.722,15,0.28,17,1.113,22,2.696,29,0.412,30,0.014,31,1.071,35,1.34,36,1.291,39,0.677,41,2.317,44,1.494,47,0.711,63,0.971,87,0.245,99,0.21,110,0.01,111,0.01,153,1.989,163,2.064,164,1.549,188,0.834,195,2.033,198,1.12,231,1.388,232,2.12,235,1.951,251,2.005,259,2.064,260,1.918,266,1.874,293,4.5,294,2.688,328,3.468,424,2.143,469,3.141,527,2.406,811,3.017,823,2.064,855,3.017,871,3.648,876,3.017,880,3.874,947,5.19,948,3.468,950,3.468,960,5.379,996,3.222,1112,3.468,1113,3.777,1114,3.777,1115,4.849,1116,3.468,1117,4.821,1118,3.777,1119,3.777,1120,3.468,1121,4.849,1122,4.569,1123,3.777,1124,3.777,1125,3.222,1126,3.777,1127,3.777,1128,3.777,1129,3.777,1130,3.777,1131,4.849,1132,3.777,1133,3.777,1134,3.777,1135,3.777,1136,3.777,1137,3.777,1588,4.19,1589,4.817,1590,4.817]],["title/classes/LoginDto.html",[0,0.126,790,2.517]],["body/classes/LoginDto.html",[0,0.228,2,1.773,3,0.167,4,0.167,5,0.167,8,2.172,9,4.215,12,1.413,15,0.32,16,0.996,22,2.517,27,3.415,28,2.618,29,0.449,30,0.014,32,1.166,37,3.192,39,0.667,47,0.788,81,3.687,87,0.229,90,3.094,93,2.232,95,1.91,99,0.187,100,3.969,110,0.011,111,0.011,743,5.06,790,4.55,1169,4.55,1196,4.845,1217,3.663,1591,4.794,1592,7.263,1593,5.511,1594,5.511,1595,5.853,1596,5.511,1597,5.511]],["title/injectables/MinioService.html",[231,0.902,1465,2.371]],["body/injectables/MinioService.html",[0,0.134,3,0.129,4,0.129,5,0.195,15,0.248,16,0.846,17,1.159,29,0.492,30,0.014,34,1.277,39,0.747,47,0.823,63,0.978,87,0.194,99,0.145,110,0.01,111,0.01,136,1.147,153,1.839,163,2.15,164,2.072,172,2.263,188,0.74,196,3.099,198,1.329,231,1.283,232,1.88,234,2.688,235,2.609,241,3.114,250,3.273,253,2.232,259,2.15,260,1.998,317,3.076,332,4.309,640,2.836,673,2.836,674,3.566,842,2.858,860,4.639,1122,2.858,1380,3.35,1395,5.051,1456,2.52,1465,3.372,1598,3.716,1599,5.604,1600,5.604,1601,4.972,1602,5.716,1603,5.604,1604,5.716,1605,4.972,1606,4.272,1607,6.873,1608,5.716,1609,4.272,1610,3.716,1611,4.272,1612,4.972,1613,4.272,1614,5.604,1615,4.272,1616,4.482,1617,3.716,1618,4.272,1619,3.35,1620,4.272,1621,3.716,1622,3.716,1623,4.272,1624,3.716,1625,4.272,1626,3.716,1627,4.272,1628,3.716,1629,5.604,1630,4.272,1631,3.716,1632,3.716,1633,3.716,1634,3.716,1635,3.716,1636,3.716,1637,3.35,1638,3.716,1639,3.716,1640,3.716,1641,4.972,1642,3.716,1643,4.272,1644,3.716,1645,3.716,1646,4.272,1647,3.716,1648,4.272]],["title/injectables/MinioService-1.html",[109,1.359,231,0.753,1465,1.98]],["body/injectables/MinioService-1.html",[0,0.1,3,0.14,4,0.096,5,0.209,15,0.185,16,0.688,17,1.208,29,0.483,30,0.014,31,0.951,34,1.389,39,0.74,47,0.817,63,0.986,87,0.187,99,0.108,109,1.881,110,0.008,111,0.008,122,1.34,136,1.247,151,2.592,153,1.494,163,2.241,164,2.23,172,2.46,188,0.55,195,1.34,196,2.641,198,1.405,231,1.042,232,1.398,234,2.766,235,1.287,241,3.188,250,3.06,251,2.05,253,2.403,259,2.145,260,1.993,266,1.236,293,3.96,294,1.773,317,3.954,332,3.784,373,3.809,473,1.773,474,2.908,640,2.829,673,2.829,674,3.563,680,2.763,704,2.287,732,1.602,838,3.371,842,4.041,933,3.642,1122,3.673,1282,2.491,1380,2.491,1395,4.305,1399,2.763,1456,1.874,1465,2.74,1588,2.763,1599,4.776,1600,4.776,1601,4.04,1603,4.776,1605,4.04,1607,6.69,1610,2.763,1612,4.04,1614,4.776,1616,3.642,1617,2.763,1619,2.491,1621,2.763,1622,4.776,1624,4.776,1626,2.763,1628,2.763,1629,5.839,1631,2.763,1632,2.763,1633,2.763,1634,2.763,1635,2.763,1636,2.763,1637,2.491,1638,2.763,1639,2.763,1640,2.763,1641,4.04,1642,2.763,1644,2.763,1645,4.04,1647,2.763,1649,2.763,1650,6.04,1651,4.644,1652,5.49,1653,4.644,1654,6.713,1655,4.644,1656,3.176,1657,3.176,1658,4.644,1659,3.176,1660,3.176,1661,6.04,1662,3.176,1663,4.644,1664,3.176,1665,3.176,1666,3.176,1667,3.176,1668,3.176,1669,2.287,1670,6.04,1671,3.176,1672,3.176,1673,3.176,1674,3.176,1675,3.176,1676,3.176,1677,3.176,1678,3.176,1679,3.176,1680,3.176,1681,3.176,1682,2.763,1683,3.176,1684,3.176,1685,3.176,1686,3.176,1687,3.176,1688,4.644,1689,5.59,1690,3.176,1691,3.176,1692,4.04,1693,3.176,1694,3.176,1695,3.176,1696,3.176,1697,3.176,1698,3.176,1699,3.176,1700,3.176,1701,4.644,1702,3.176,1703,3.176,1704,3.176,1705,3.176,1706,3.176,1707,3.176,1708,3.176,1709,3.176]],["title/classes/PaginatedUsersResponseDto.html",[0,0.126,1710,3.151]],["body/classes/PaginatedUsersResponseDto.html",[0,0.155,2,1.581,3,0.148,4,0.148,5,0.148,8,2.4,12,0.918,15,0.286,16,0.927,29,0.511,30,0.014,31,1.429,32,1.299,37,3.064,39,0.743,41,3.013,44,1.524,87,0.213,95,1.703,99,0.167,109,2.537,110,0.011,111,0.011,128,3.924,173,3.653,728,4.128,828,4.51,1217,3.866,1252,4.548,1365,4.115,1374,4.51,1419,3.493,1499,4.881,1532,4.965,1710,4.911,1711,6.67,1712,3.287,1713,4.914,1714,4.911,1715,4.914,1716,4.274,1717,6.263,1718,4.914,1719,4.284,1720,4.274,1721,4.274,1722,3.538]],["title/entities/Queue.html",[112,1.293,1142,2.026]],["body/entities/Queue.html",[0,0.138,3,0.132,4,0.132,5,0.132,15,0.255,16,0.861,29,0.525,30,0.014,31,1.204,32,1.351,34,1.739,36,1.362,39,0.773,44,1.359,47,0.724,63,1.028,87,0.222,99,0.198,110,0.01,111,0.01,112,1.41,114,1.93,116,2.873,122,2.933,123,3.431,125,2.933,132,3.457,135,3.884,136,2.113,144,3.749,145,1.463,276,1.882,392,4.101,395,2.933,441,4.531,450,3.246,452,3.431,453,3.643,455,4.188,1138,4.599,1142,3.291,1143,3.813,1153,5.059,1209,5.208,1289,4.56,1292,3.813,1316,5.059,1723,3.437,1724,4.699,1725,5.117,1726,5.117,1727,5.117,1728,5.815,1729,4.384,1730,5.059,1731,4.384,1732,5.815,1733,4.384,1734,4.384,1735,4.101,1736,5.815,1737,4.384,1738,5.815,1739,4.384,1740,4.384,1741,5.815,1742,4.384,1743,4.531,1744,4.384,1745,3.437,1746,3.437,1747,3.89,1748,4.384,1749,3.437]],["title/entities/QueueDetails.html",[112,1.293,1735,2.371]],["body/entities/QueueDetails.html",[0,0.124,3,0.119,4,0.119,5,0.119,12,1.38,15,0.23,16,0.803,20,2.978,23,2.316,24,2.316,29,0.528,30,0.014,31,1.249,32,1.371,34,1.621,36,1.292,39,0.785,47,0.829,63,1.108,87,0.211,99,0.134,110,0.009,111,0.009,112,1.271,114,1.74,132,3.279,135,3.848,136,2.048,138,2.11,144,3.931,145,1.319,266,2.11,356,3.628,384,3.397,387,5.224,388,2.846,392,4.502,407,3.878,408,3.652,420,4.141,421,3.878,422,3.878,423,3.878,424,2.145,436,3.099,444,2.644,445,5.224,449,2.206,850,3.199,1142,3.848,1231,4.854,1312,5.224,1477,3.438,1735,3.199,1750,6.926,1751,3.438,1752,4.458,1753,3.952,1754,5.423,1755,3.952,1756,4.717,1757,3.952,1758,3.952,1759,5.423,1760,3.952,1761,4.717,1762,3.952,1763,5.423,1764,3.952,1765,5.423,1766,3.952,1767,4.717,1768,6.662,1769,5.423,1770,3.952,1771,3.952,1772,5.423,1773,3.952,1774,5.423,1775,3.952,1776,3.952,1777,3.952,1778,3.952]],["title/classes/QueueGateway.html",[0,0.126,1779,2.371]],["body/classes/QueueGateway.html",[0,0.109,2,1.119,3,0.105,4,0.105,5,0.105,11,1.856,15,0.202,16,0.734,17,1.334,29,0.507,30,0.014,31,1.362,32,1.154,34,1.04,39,0.754,63,1.054,87,0.227,99,0.118,110,0.008,111,0.008,136,1.331,153,1.859,161,2.053,163,2.475,164,2.344,172,1.843,188,0.603,196,3.205,198,1.466,234,2.664,235,2.009,250,2.811,251,1.38,253,2.309,260,1.538,293,4.205,294,1.942,312,2.506,332,3.947,336,3.928,474,1.843,476,2.774,830,2.728,849,2.328,953,3.027,1043,2.328,1071,4.533,1138,2.053,1142,2.915,1637,2.728,1669,3.572,1682,3.027,1752,5.132,1779,2.926,1780,3.027,1781,5.78,1782,5.78,1783,6.024,1784,4.96,1785,4.96,1786,4.96,1787,4.96,1788,4.96,1789,4.96,1790,4.96,1791,4.96,1792,3.479,1793,4.205,1794,4.96,1795,4.96,1796,3.479,1797,5.78,1798,4.96,1799,8.011,1800,3.479,1801,7.127,1802,7.286,1803,4.96,1804,3.479,1805,4.96,1806,4.96,1807,3.479,1808,4.96,1809,5.481,1810,4.96,1811,3.479,1812,4.96,1813,4.96,1814,3.479,1815,4.96,1816,4.96,1817,3.479,1818,4.96,1819,3.479,1820,4.96,1821,3.479,1822,4.96,1823,3.479,1824,3.027,1825,4.315,1826,2.728,1827,2.728,1828,3.479,1829,4.96,1830,3.479,1831,3.479,1832,3.479,1833,3.479,1834,3.479,1835,3.479,1836,3.479,1837,3.027,1838,4.96,1839,3.479,1840,5.78,1841,3.479,1842,3.479,1843,3.479,1844,3.479,1845,4.96,1846,3.479,1847,4.315,1848,3.479,1849,3.479,1850,3.479,1851,5.78,1852,3.479,1853,3.479,1854,3.027,1855,2.728,1856,3.479,1857,3.479,1858,3.479,1859,4.96,1860,3.479,1861,3.479]],["title/modules/QueueModule.html",[209,1.293,288,2.688]],["body/modules/QueueModule.html",[0,0.158,3,0.152,4,0.152,5,0.152,30,0.014,87,0.276,99,0.171,110,0.011,111,0.011,149,2.374,188,0.869,209,2.239,211,2.412,212,2.412,213,2.657,214,2.657,215,2.412,216,3.687,217,3.687,221,3.361,222,2.412,223,2.529,225,2.799,226,1.805,229,2.799,288,5.421,295,4.362,296,3.611,327,3.141,367,4.362,1138,3.743,1142,3.199,1403,3.932,1404,3.611,1735,3.743,1745,3.932,1746,3.932,1779,4.673,1793,4.806,1826,3.932,1827,4.975,1862,4.362,1863,4.362,1864,4.362,1865,5.449,1866,5.015,1867,6.054,1868,5.012,1869,5.015,1870,5.015,1871,3.932,1872,5.015,1873,3.355,1874,4.362,1875,5.015]],["title/injectables/QueueSchedulerService.html",[231,0.902,1865,2.688]],["body/injectables/QueueSchedulerService.html",[0,0.091,3,0.088,4,0.088,5,0.088,10,1.277,15,0.169,16,0.643,17,0.937,29,0.29,30,0.014,32,0.502,34,1.298,39,0.668,63,0.821,87,0.221,99,0.099,110,0.007,111,0.007,116,2.859,122,3.089,136,0.778,145,0.968,153,1.397,163,1.449,164,1.859,172,2.3,188,0.502,196,2.504,198,1.344,222,3.406,226,1.044,231,0.974,232,1.277,234,2.569,235,1.759,237,2.914,241,1.833,248,1.536,250,3.089,251,2.063,253,2.4,259,0.968,260,2.27,262,1.224,266,2.025,276,1.942,296,2.089,327,1.817,330,2.274,332,3.62,335,2.523,450,3.625,452,3.832,453,4.337,473,1.619,474,1.536,476,1.277,557,3.748,568,2.274,593,6.449,633,3.405,640,1.912,648,4.138,654,4.531,673,1.912,674,3.096,676,1.711,697,2.523,716,2.274,718,2.089,728,3.278,732,1.463,1049,2.523,1068,2.523,1098,1.536,1142,3.78,1262,2.274,1434,2.274,1509,1.711,1689,2.523,1724,3.127,1743,1.817,1747,2.905,1749,3.405,1779,3.973,1854,2.523,1855,2.274,1865,2.905,1871,2.274,1873,1.94,1876,6.023,1877,2.523,1878,5.205,1879,5.779,1880,5.779,1881,4.342,1882,5.779,1883,2.523,1884,4.342,1885,3.777,1886,2.9,1887,4.342,1888,5.027,1889,6.367,1890,5.205,1891,4.342,1892,2.9,1893,4.342,1894,7.414,1895,2.9,1896,5.205,1897,2.9,1898,4.342,1899,2.9,1900,2.9,1901,2.523,1902,2.523,1903,3.777,1904,2.9,1905,2.9,1906,6.188,1907,2.9,1908,2.9,1909,5.205,1910,2.9,1911,2.9,1912,2.9,1913,2.9,1914,2.9,1915,2.523,1916,3.777,1917,5.779,1918,5.779,1919,5.779,1920,5.027,1921,3.777,1922,2.9,1923,5.654,1924,2.9,1925,2.9,1926,2.9,1927,3.777,1928,6.495,1929,4.342,1930,4.342,1931,2.523,1932,4.342,1933,4.342,1934,2.9,1935,4.527,1936,4.342,1937,2.523,1938,2.9,1939,2.9,1940,2.523,1941,2.9,1942,2.9,1943,2.9,1944,2.9,1945,2.9,1946,2.9,1947,2.9,1948,2.523,1949,2.9,1950,2.9,1951,2.9,1952,2.9,1953,2.9,1954,2.9,1955,2.9,1956,2.9,1957,2.9,1958,2.9,1959,5.027,1960,2.523,1961,2.9,1962,2.523,1963,2.9,1964,2.9,1965,4.342,1966,2.9,1967,2.9,1968,2.9,1969,2.9]],["title/injectables/QueueService.html",[231,0.902,1793,2.371]],["body/injectables/QueueService.html",[0,0.045,3,0.044,4,0.044,5,0.044,9,0.904,11,1.618,12,0.606,15,0.084,17,1.146,20,0.694,23,0.54,24,0.54,29,0.425,30,0.014,31,1.263,36,1.273,39,0.662,42,2.337,44,0.448,47,0.65,62,1.459,63,0.936,87,0.189,96,0.904,99,0.049,109,1.557,110,0.004,111,0.004,116,2.342,122,1.825,138,0.562,145,0.482,153,0.796,154,1.825,155,1.939,156,1.247,158,0.694,163,2.126,164,2.118,166,1.137,178,1.459,187,0.904,188,0.25,191,0.728,193,0.728,198,1.73,222,1.19,226,0.519,231,0.555,232,0.635,234,2.711,235,1.002,237,2.906,241,1.044,247,0.851,248,0.765,250,1.623,251,2.153,253,2.6,256,2.709,259,1.776,260,1.936,262,1.991,263,0.904,276,2.09,312,1.039,321,1.039,327,0.904,336,0.765,356,1.654,357,1.781,359,0.965,414,2.499,420,3.156,421,0.904,422,0.904,423,0.904,424,2.06,450,2.97,452,3.139,453,0.904,465,2.268,473,2.414,474,1.31,476,2.977,567,1.132,568,1.132,576,0.728,591,1.939,633,1.132,634,1.549,640,1.429,648,3.727,654,3.015,657,3.762,660,1.255,669,1.719,673,1.429,674,2.928,675,1.255,676,2.976,690,1.255,694,0.904,713,2.151,715,2.151,716,1.939,717,2.151,718,1.039,728,1.719,729,1.38,732,0.728,752,1.132,753,1.939,836,1.781,837,1.781,838,1.38,844,1.039,849,0.965,850,1.914,851,1.039,923,1.132,924,2.823,934,1.132,996,0.965,1000,0.965,1001,0.965,1008,0.805,1009,2.151,1010,0.904,1039,2.337,1043,0.965,1046,2.544,1074,1.255,1097,1.255,1098,1.719,1102,1.255,1109,1.255,1138,3.279,1140,2.151,1142,4.015,1151,1.939,1209,5.218,1228,3.114,1231,1.132,1273,1.255,1279,1.255,1374,1.039,1403,1.132,1404,1.039,1419,0.694,1434,1.939,1509,2.552,1522,1.654,1556,1.781,1714,1.132,1724,1.781,1726,1.132,1727,3.699,1730,2.823,1735,1.459,1743,3.16,1745,1.132,1746,1.132,1747,2.572,1749,3.391,1752,4.15,1779,3.139,1793,1.459,1809,3.345,1827,1.132,1837,1.255,1847,5.809,1855,2.544,1871,1.132,1873,0.965,1874,1.255,1883,1.255,1885,2.151,1889,3.345,1901,1.255,1903,1.255,1915,1.255,1916,1.255,1920,2.151,1921,1.255,1923,5.473,1927,3.762,1931,1.255,1935,1.255,1937,3.345,1940,3.345,1948,3.345,1959,4.628,1960,3.762,1962,1.255,1970,1.255,1971,2.473,1972,2.473,1973,2.473,1974,2.473,1975,2.473,1976,3.245,1977,2.473,1978,3.845,1979,2.473,1980,2.473,1981,2.473,1982,3.245,1983,3.245,1984,1.443,1985,2.473,1986,1.443,1987,2.473,1988,1.443,1989,2.473,1990,1.443,1991,2.473,1992,1.443,1993,1.443,1994,2.473,1995,1.443,1996,2.473,1997,1.443,1998,2.473,1999,1.443,2000,2.473,2001,1.443,2002,1.443,2003,1.443,2004,2.473,2005,1.443,2006,4.325,2007,2.473,2008,1.443,2009,2.473,2010,1.443,2011,1.443,2012,3.832,2013,1.443,2014,1.443,2015,1.443,2016,2.473,2017,1.443,2018,1.443,2019,1.255,2020,2.473,2021,2.473,2022,1.443,2023,1.443,2024,1.443,2025,1.443,2026,1.443,2027,1.443,2028,2.473,2029,1.443,2030,2.473,2031,1.443,2032,3.245,2033,1.443,2034,1.443,2035,1.443,2036,1.443,2037,1.443,2038,1.443,2039,1.443,2040,1.443,2041,1.443,2042,1.443,2043,2.473,2044,1.443,2045,1.939,2046,1.255,2047,1.443,2048,2.473,2049,1.443,2050,3.245,2051,2.473,2052,1.443,2053,4.325,2054,1.443,2055,1.443,2056,2.473,2057,1.255,2058,1.443,2059,1.443,2060,1.443,2061,1.443,2062,1.443,2063,1.443,2064,2.473,2065,1.443,2066,1.443,2067,1.443,2068,1.443,2069,1.443,2070,1.443,2071,1.443,2072,1.443,2073,1.443,2074,2.473,2075,1.443,2076,4.325,2077,1.443,2078,1.443,2079,1.443,2080,1.443,2081,3.845,2082,2.473,2083,2.473,2084,2.473,2085,1.443,2086,1.443,2087,1.443,2088,3.015,2089,1.255,2090,3.845,2091,4.388,2092,1.255,2093,2.473,2094,1.255,2095,3.845,2096,1.443,2097,1.443,2098,2.473,2099,1.443,2100,1.443,2101,1.443,2102,1.443,2103,1.443,2104,3.845,2105,4.325,2106,1.443,2107,1.443,2108,1.443,2109,3.245,2110,1.443,2111,1.443,2112,1.443,2113,1.443,2114,3.245,2115,3.245,2116,2.473,2117,1.443,2118,1.443,2119,1.443,2120,2.473,2121,2.473,2122,1.443,2123,1.443,2124,1.443,2125,1.443,2126,1.443,2127,1.443,2128,1.443,2129,1.255,2130,1.443,2131,1.443,2132,1.443,2133,1.443,2134,2.473,2135,2.473,2136,1.255,2137,1.443,2138,1.255,2139,1.443,2140,1.255,2141,1.255,2142,1.443,2143,1.255,2144,1.443,2145,3.845,2146,1.443,2147,2.473,2148,1.443,2149,1.443,2150,1.443,2151,1.443,2152,1.443,2153,1.443,2154,4.325,2155,2.473,2156,3.245,2157,1.255,2158,1.443,2159,1.443,2160,1.443,2161,2.473,2162,1.443,2163,2.473,2164,1.443,2165,2.151,2166,1.443,2167,1.443,2168,1.443,2169,1.443,2170,1.443,2171,1.443,2172,1.443,2173,1.443,2174,1.443,2175,1.443,2176,1.443,2177,1.443,2178,1.443,2179,3.245,2180,2.473,2181,2.473,2182,1.443,2183,1.443,2184,1.443,2185,1.443,2186,1.443,2187,2.473,2188,1.443,2189,1.443,2190,1.443,2191,1.443,2192,2.473,2193,1.443,2194,1.443,2195,1.443,2196,1.443,2197,1.443,2198,1.255,2199,1.443,2200,1.443,2201,1.255,2202,1.443,2203,1.443,2204,1.443]],["title/controllers/QueuesController.html",[147,1.446,1868,2.894]],["body/controllers/QueuesController.html",[0,0.108,3,0.104,4,0.104,5,0.104,12,1.073,15,0.2,17,0.885,20,2.366,23,2.345,24,2.345,29,0.328,30,0.014,32,0.995,36,1.482,39,0.569,47,0.799,63,0.699,87,0.195,99,0.117,110,0.008,111,0.008,116,2.528,147,1.238,149,1.286,151,1.919,153,1.847,163,1.642,164,1.847,167,3.081,184,1.919,188,0.596,195,1.451,196,1.654,198,1.542,234,2.562,251,2.087,253,1.99,259,2.213,260,1.525,262,1.451,276,1.807,359,3.29,421,3.081,422,3.081,423,3.926,424,1.99,450,2.745,452,2.028,476,2.759,640,2.528,673,2.528,676,3.697,718,2.476,729,3.205,823,1.148,842,4.193,844,2.476,850,4.564,1008,1.919,1043,2.3,1067,6.431,1142,3.344,1209,4.967,1419,1.654,1724,4.135,1725,4.503,1726,2.696,1727,4.503,1735,3.697,1743,2.154,1747,3.29,1752,2.476,1767,4.995,1793,3.388,1826,2.696,1868,3.542,1873,2.3,1923,5.953,2057,2.991,2088,2.696,2089,4.995,2091,5.451,2092,4.995,2094,4.995,2129,4.995,2136,5.451,2138,2.991,2140,2.991,2141,2.991,2165,4.995,2198,2.991,2201,4.278,2205,2.991,2206,4.918,2207,4.918,2208,6.267,2209,3.438,2210,3.438,2211,3.438,2212,4.278,2213,3.438,2214,4.918,2215,3.438,2216,3.438,2217,3.438,2218,3.438,2219,3.438,2220,3.438,2221,5.742,2222,3.438,2223,2.696,2224,4.918,2225,4.918,2226,3.438,2227,3.438,2228,3.438,2229,3.438,2230,3.438,2231,3.438,2232,3.438,2233,3.438,2234,3.438,2235,3.438,2236,3.438,2237,3.438,2238,5.742,2239,5.742,2240,5.742,2241,5.742,2242,3.438,2243,5.742,2244,5.742,2245,3.438,2246,5.742,2247,3.438,2248,3.438,2249,4.918,2250,3.438,2251,3.438,2252,3.438,2253,3.438,2254,3.438,2255,3.438,2256,3.438,2257,3.438,2258,3.438,2259,3.438,2260,3.438,2261,3.438]],["title/classes/RegisterDto.html",[0,0.126,799,2.517]],["body/classes/RegisterDto.html",[0,0.196,2,1.286,3,0.121,4,0.121,5,0.121,8,2.314,9,3.423,12,1.471,15,0.232,16,0.809,17,1.392,20,2.629,21,3.14,22,2.622,23,2.33,24,2.33,25,3.14,26,3.14,27,3.086,28,2.727,29,0.51,30,0.014,31,0.947,32,1.325,33,5.249,37,3.424,39,0.758,47,0.845,57,3.656,62,3.224,63,1.127,66,3.05,67,3.134,69,3.656,70,3.134,72,3.656,73,3.935,74,4.166,75,3.935,76,3.134,78,3.935,79,3.901,80,3.935,81,3.656,82,4.484,87,0.186,88,3.935,89,3.078,90,3.517,93,1.619,94,4.391,95,1.385,99,0.136,100,2.878,101,3.134,102,3.134,103,3.901,104,4.883,105,3.656,106,3.134,110,0.009,111,0.009,743,3.656,799,3.901,801,3.935,958,3.05,1169,4.533,1196,5.047,1217,3.649,1262,4.285,1263,4.753,2262,3.477,2263,3.997,2264,3.997,2265,3.997,2266,3.997,2267,3.997,2268,3.997,2269,3.997,2270,3.997,2271,3.997,2272,3.997,2273,3.997,2274,3.997,2275,3.997,2276,3.997,2277,3.997]],["title/interfaces/RequestWithUser.html",[747,2.129,823,1.341]],["body/interfaces/RequestWithUser.html",[0,0.09,1,2.477,3,0.086,4,0.086,5,0.086,8,2.344,10,1.886,11,2.504,12,1.45,13,1.886,14,3.22,15,0.166,16,0.955,22,2.297,28,2.389,29,0.525,30,0.014,31,1.064,35,1.192,36,1.346,41,2.061,44,1.597,47,0.759,63,0.405,87,0.244,95,0.987,97,2.683,99,0.097,110,0.007,111,0.007,147,1.025,161,1.68,182,3.225,184,1.59,188,0.493,193,1.436,195,1.202,198,1.428,234,1.985,251,0.792,253,1.784,259,2.153,260,2,262,1.808,276,2.225,336,3.034,424,0.987,469,2.633,472,1.905,474,2.727,497,1.68,515,1.784,522,1.509,524,1.784,525,2.16,527,1.719,532,1.905,533,4.316,534,5.191,535,1.905,538,3.225,539,3.707,540,2.873,542,4.108,549,1.784,576,2.596,590,5.058,640,2.267,669,2.269,673,2.267,674,3.24,676,2.527,732,2.596,739,1.905,740,2.233,741,2.233,743,2.866,745,2.478,747,3.253,748,2.233,750,3.726,751,2.478,752,2.233,753,2.233,757,4.124,759,4.478,760,4.478,761,3.932,762,2.478,764,4.981,765,4.981,767,2.478,768,2.478,769,2.478,771,2.051,773,4.478,774,4.478,778,2.478,780,3.707,783,4.82,784,1.905,790,3.846,792,3.726,793,3.726,799,3.846,801,3.085,811,3.587,812,3.037,813,2.233,814,2.233,815,2.233,816,2.478,817,1.68,818,2.051,819,2.478,820,2.051,821,3.726,822,5.341,823,0.951,824,2.478,825,2.478,826,3.359,827,2.683,828,3.085,829,2.391,830,4.037,831,2.478,832,2.478,833,2.233,834,2.478,835,2.478,836,3.707,837,3.707,838,2.873,839,2.478,840,2.478,841,2.478,842,1.905,843,2.478,844,2.051,845,2.478,846,2.478,847,2.233,848,2.233,849,3.444,850,3.806,851,3.707,852,4.478,853,4.037,854,5.611,855,3.225,856,2.478,857,2.478,858,2.478,859,3.726,860,3.085,861,2.478,862,2.233,863,2.478,864,2.478,865,2.478,866,2.478,1111,1.59]],["title/interfaces/RequestWithUser-1.html",[109,1.359,747,1.778,823,1.12]],["body/interfaces/RequestWithUser-1.html",[3,0.179,4,0.179,5,0.179,12,1.477,15,0.344,16,1.039,29,0.394,30,0.014,87,0.239,99,0.201,110,0.012,111,0.012,188,1.024,198,1.375,251,1.953,336,3.132,469,3.636,476,2.603,747,3.718,761,3.299,820,4.257,823,1.974,1111,3.299,2278,4.636,2279,6.105,2280,5.054,2281,5.143,2282,5.143,2283,5.143]],["title/interfaces/RequestWithUser-2.html",[108,2.416,747,1.778,823,1.12]],["body/interfaces/RequestWithUser-2.html",[0,0.162,3,0.155,4,0.155,5,0.155,12,1.421,13,2.839,15,0.299,16,0.955,17,1.16,29,0.47,30,0.014,35,1.959,41,3.388,47,0.808,63,1.001,87,0.24,99,0.175,110,0.011,111,0.011,136,1.381,138,2.002,188,0.891,195,2.171,198,1.5,231,1.447,251,2.054,525,2.594,527,1.717,747,3.416,761,4.121,818,3.705,823,2.152,827,3.223,912,4.314,944,4.034,1008,2.871,1039,3.705,1084,4.034,1111,2.871,1669,3.705,2223,4.034,2280,4.643,2284,4.034,2285,5.609,2286,6.126,2287,4.034,2288,4.643,2289,4.475,2290,4.475,2291,5.609,2292,4.475,2293,4.475,2294,4.475,2295,4.475,2296,4.475,2297,4.475,2298,4.475,2299,4.475,2300,4.475]],["title/entities/Role.html",[35,1.118,112,1.293]],["body/entities/Role.html",[0,0.171,3,0.164,4,0.164,5,0.164,8,2.159,12,1.469,15,0.316,16,0.988,29,0.502,30,0.014,31,1.156,32,1.304,35,1.856,36,1.507,39,0.746,47,0.784,63,1.026,87,0.227,99,0.185,110,0.011,111,0.011,112,1.749,114,2.393,132,3.824,135,3.64,136,2.021,144,3.64,145,1.815,266,2.596,427,4.262,436,4.262,449,3.034,455,3.914,1365,3.64,2301,4.728,2302,5.436,2303,5.436,2304,5.436,2305,5.436,2306,5.804,2307,5.436,2308,5.804,2309,5.436]],["title/controllers/RolesController.html",[147,1.446,2310,2.894]],["body/controllers/RolesController.html",[0,0.163,3,0.157,4,0.157,5,0.157,15,0.301,17,1.166,29,0.432,30,0.014,32,1.225,36,1.353,39,0.701,47,0.81,63,0.921,87,0.259,99,0.176,110,0.011,111,0.011,147,1.867,149,1.941,151,2.895,153,2.085,155,3.734,156,3.268,163,2.163,164,2.274,166,2.385,167,3.249,184,2.895,188,0.899,195,2.189,196,2.495,198,1.644,203,3.735,424,2.246,497,4.587,515,3.249,522,2.748,523,3.735,524,3.249,525,3.268,526,3.735,527,2.163,528,3.735,538,3.249,549,4.428,896,3.565,2212,4.512,2310,4.667,2311,4.512,2312,5.638,2313,5.187,2314,5.187,2315,5.187,2316,5.187,2317,4.512,2318,5.187,2319,5.187,2320,4.512,2321,5.187,2322,5.187,2323,5.187,2324,5.187,2325,5.187]],["title/guards/RolesGuard.html",[525,2.026,2326,3.151]],["body/guards/RolesGuard.html",[0,0.158,3,0.152,4,0.152,5,0.152,12,1.187,13,2.211,15,0.292,17,1.143,29,0.423,30,0.014,35,1.938,39,0.63,41,3.351,47,0.803,63,1.073,87,0.237,99,0.171,110,0.011,111,0.011,136,1.348,138,2.471,153,2.043,163,2.12,164,1.616,188,0.87,195,2.12,198,1.477,231,1.425,235,2.034,251,2.036,525,3.203,527,1.677,747,2.661,761,3.887,818,3.617,823,2.12,827,3.146,944,3.938,1008,2.803,1039,3.617,1084,3.938,1669,3.617,2223,3.938,2280,5.271,2284,3.938,2285,6.367,2286,6.708,2287,3.938,2288,4.574,2289,4.369,2290,5.525,2291,5.525,2292,4.369,2293,4.369,2294,4.369,2295,4.369,2296,4.369,2297,4.369,2298,4.369,2299,4.369,2300,4.369,2327,5.023,2328,5.023,2329,5.023,2330,5.023,2331,5.023]],["title/modules/RolesModule.html",[209,1.293,289,2.371]],["body/modules/RolesModule.html",[0,0.176,3,0.169,4,0.169,5,0.169,12,1.267,30,0.014,35,1.552,87,0.269,99,0.19,110,0.011,111,0.011,149,2.536,188,0.967,209,2.349,211,2.684,212,2.684,213,2.956,214,2.956,215,2.684,216,3.868,217,3.868,221,3.591,222,2.684,223,2.813,225,3.114,226,2.008,229,3.114,289,4.725,449,3.114,896,4.164,2310,5.258,2320,4.853,2332,4.853,2333,4.853,2334,4.853,2335,5.579,2336,4.853,2337,5.579,2338,5.579]],["title/injectables/RolesService.html",[231,0.902,896,2.026]],["body/injectables/RolesService.html",[0,0.129,3,0.124,4,0.124,5,0.124,12,1.392,15,0.238,17,1.271,19,3.717,29,0.471,30,0.014,31,1.369,35,2.073,36,1.555,39,0.722,43,2.282,47,0.656,63,1.093,87,0.24,99,0.139,110,0.009,111,0.009,145,1.365,153,1.786,155,3.408,156,2.799,163,2.358,164,2.273,166,2.552,188,0.709,198,1.572,226,1.472,231,1.245,232,1.8,234,2.786,235,2.248,237,3.758,241,3.28,247,2.413,248,2.167,250,2.343,251,1.966,253,2.525,259,2.103,260,1.954,262,2.659,359,2.736,414,2.941,424,2.342,449,2.282,527,2.432,896,2.799,898,4.215,918,2.736,919,3.713,978,2.736,2088,4.353,2306,4.828,2312,4.828,2317,4.828,2336,3.558,2339,3.558,2340,5.551,2341,5.551,2342,4.09,2343,4.09,2344,5.551,2345,5.551,2346,4.09,2347,4.09,2348,5.551,2349,4.09,2350,4.09,2351,4.09,2352,4.09,2353,4.09,2354,5.551,2355,5.551,2356,4.09,2357,4.09,2358,4.09,2359,4.09,2360,4.09,2361,4.09,2362,4.09]],["title/classes/UpdateAnnouncementDto.html",[0,0.126,179,2.688]],["body/classes/UpdateAnnouncementDto.html",[0,0.195,2,1.999,3,0.188,4,0.188,5,0.188,13,3.182,30,0.014,87,0.246,99,0.211,110,0.012,111,0.012,154,2.622,160,3.892,179,4.835,192,4.872,1160,4.872,2363,5.405,2364,7.227,2365,4.872,2366,4.872,2367,4.872]],["title/classes/UpdateAppointmentDto.html",[0,0.126,509,2.688]],["body/classes/UpdateAppointmentDto.html",[0,0.219,2,1.877,3,0.176,4,0.176,5,0.176,13,3.066,15,0.339,16,1.031,17,1.253,29,0.389,30,0.014,32,1.011,39,0.579,87,0.262,89,3.203,93,2.364,99,0.199,110,0.012,111,0.012,154,2.463,276,2.147,440,4.664,468,3.656,509,4.66,521,4.576,529,3.904,1172,4.576,1184,5.076,1187,3.904,1189,5.076,2365,4.576,2366,4.576,2367,4.576,2368,6.059,2369,6.965,2370,5.836]],["title/classes/UpdateDocumentApplicationDto.html",[0,0.126,1389,2.894]],["body/classes/UpdateDocumentApplicationDto.html",[0,0.202,2,1.65,3,0.155,4,0.155,5,0.155,8,2.103,13,2.833,15,0.298,16,0.953,17,1.327,29,0.429,30,0.014,32,1.115,37,3.112,39,0.638,44,1.59,47,0.67,87,0.258,89,3.234,90,2.959,93,2.077,95,1.777,99,0.174,110,0.011,111,0.011,154,2.164,266,2.504,276,2.269,373,3.546,376,4.351,382,4.705,409,4.116,410,3.212,441,3.212,562,4.934,1098,3.409,1187,3.431,1190,4.705,1192,4.021,1196,3.693,1201,4.461,1203,4.461,1216,3.693,1217,3.546,1302,5.47,1330,5.046,1334,4.634,1335,5.046,1389,4.634,1410,4.461,2365,5.514,2366,4.021,2367,4.021,2371,6.117,2372,5.128,2373,5.128,2374,5.128,2375,5.128,2376,5.128]],["title/classes/UpdateQueueDto.html",[0,0.126,2012,2.894]],["body/classes/UpdateQueueDto.html",[0,0.219,2,1.87,3,0.176,4,0.176,5,0.176,15,0.338,16,1.029,17,1.386,29,0.463,30,0.014,32,1.204,39,0.689,47,0.724,87,0.236,89,3.418,90,3.196,93,2.355,99,0.198,110,0.012,111,0.012,276,2.144,1187,3.89,1230,4.559,1232,5.058,1725,5.829,1743,4.657,1873,3.89,2012,5.005,2377,6.466,2378,5.815,2379,5.815,2380,5.815,2381,5.815]],["title/classes/UpdateUserDto.html",[0,0.126,14,1.933]],["body/classes/UpdateUserDto.html",[0,0.214,1,2.492,2,1.19,3,0.112,4,0.112,5,0.112,6,5.974,7,2.663,8,2.324,9,3.744,10,1.628,11,1.384,12,1.405,13,1.628,14,3.115,15,0.215,16,0.767,17,1.447,18,1.959,19,2.182,20,3.489,21,3.014,22,2.55,23,2.236,24,2.236,25,3.014,26,3.014,27,3.001,28,2.652,29,0.508,30,0.014,31,1.181,32,1.303,33,5.897,34,1.106,35,1.441,36,0.772,37,3.416,39,0.746,41,1.779,42,2.663,43,2.064,47,0.837,48,4.505,49,4.505,50,4.505,51,4.505,52,4.505,53,4.505,54,3.217,57,3.465,58,3.217,60,3.217,62,3.056,63,1.052,64,3.217,66,2.89,67,2.9,69,3.465,70,2.9,72,3.465,73,3.73,74,3.998,75,3.73,76,2.9,78,3.73,79,3.744,80,3.73,81,3.465,82,4.304,83,3.217,85,3.217,87,0.176,88,3.73,89,3.574,90,3.458,91,3.73,92,4.061,93,1.498,94,4.868,95,1.282,96,3.244,97,3.244,98,2.612,99,0.176,100,2.663,101,2.9,102,2.9,103,2.317,104,2.9,105,2.474,106,2.9,107,3.217,108,3.73,109,1.498,110,0.009,111,0.009,1258,3.217,1261,3.217,1265,3.217,1268,3.217,1277,3.217,2382,3.699,2383,3.699,2384,3.699,2385,3.699]],["title/classes/UpdateUserStatusDto.html",[0,0.126,2386,2.894]],["body/classes/UpdateUserStatusDto.html",[0,0.22,2,1.895,3,0.178,4,0.178,5,0.178,8,2.094,12,1.445,15,0.342,16,1.037,29,0.393,30,0.014,32,1.02,37,2.486,39,0.584,87,0.238,93,2.386,95,2.041,99,0.2,110,0.012,111,0.012,119,3.96,136,1.88,138,2.725,276,1.699,1155,4.387,1170,5.492,1217,3.532,1252,3.69,2386,5.043,2387,6.092,2388,5.124,2389,5.89,2390,5.89]],["title/entities/User.html",[12,0.751,112,1.293]],["body/entities/User.html",[0,0.12,3,0.115,4,0.115,5,0.115,12,0.99,15,0.222,16,0.784,18,3.221,21,3.066,22,2.275,23,2.275,24,2.275,25,3.066,26,3.066,27,2.676,28,2.366,29,0.534,30,0.014,31,1.137,32,1.387,34,1.584,35,2.036,36,1.439,39,0.794,44,1.642,47,0.84,63,1.138,87,0.18,99,0.13,110,0.009,111,0.009,112,1.228,114,1.681,116,2.676,119,3.221,121,4.067,122,2.771,123,3.124,132,3.221,135,3.867,136,2.138,138,2.061,142,3.814,144,3.995,145,1.275,384,2.392,392,4.317,395,2.555,407,3.317,408,3.873,427,4.153,444,2.555,455,3.814,527,2.029,829,3.393,1289,4.153,1309,3.322,1310,4.607,1312,2.995,1756,4.607,1761,4.607,2308,4.607,2391,3.322,2392,5.296,2393,3.819,2394,3.819,2395,6.565,2396,3.819,2397,3.819,2398,3.819,2399,3.819,2400,3.819,2401,5.296,2402,3.819,2403,3.819,2404,5.296,2405,3.819,2406,3.819,2407,5.296,2408,3.819,2409,3.819,2410,3.819,2411,5.296,2412,5.296,2413,3.819,2414,3.819,2415,3.819,2416,5.296,2417,3.819,2418,3.819,2419,3.819,2420,3.819,2421,3.819,2422,5.296,2423,3.819]],["title/classes/UserQueryDto.html",[0,0.126,2424,2.894]],["body/classes/UserQueryDto.html",[0,0.213,2,1.526,3,0.143,4,0.143,5,0.143,8,2.342,15,0.276,16,0.907,17,1.41,22,2.291,28,1.846,29,0.515,30,0.014,31,1.383,32,1.242,34,1.831,35,1.994,37,3.024,39,0.71,47,0.746,63,0.871,78,3.417,87,0.231,89,3.411,90,3.118,91,4.884,93,1.922,94,4.647,95,1.644,98,3.088,99,0.161,103,3.836,109,3.077,110,0.01,111,0.01,172,3.244,173,3.593,828,4.41,1245,5.619,1269,6.234,1374,4.41,1419,3.448,1499,4.842,1500,4.963,1522,4.097,2424,4.41,2425,4.963,2426,4.127,2427,6.124,2428,4.744,2429,4.744,2430,4.744,2431,4.744,2432,6.124,2433,4.744,2434,4.744,2435,4.127,2436,6.124]],["title/classes/UserResponseDto.html",[0,0.126,1719,2.371]],["body/classes/UserResponseDto.html",[0,0.11,2,1.124,3,0.106,4,0.106,5,0.106,8,2.462,11,1.862,12,1.492,15,0.203,16,0.737,17,1.313,18,3.07,20,2.394,21,2.922,22,2.496,23,2.168,24,2.168,25,2.922,26,2.922,28,2.596,29,0.53,30,0.014,31,1.202,32,1.363,34,1.888,35,1.757,36,1.489,37,3.319,39,0.78,44,1.543,47,0.84,57,3.329,62,2.936,63,1.118,66,3.524,69,3.329,72,3.329,74,3.329,87,0.119,94,4.18,95,1.211,98,2.922,99,0.119,103,3.955,105,4.224,109,2.015,110,0.008,111,0.008,116,2.551,119,3.07,121,3.876,122,3.078,136,1.336,138,1.936,276,1.435,478,2.517,527,2.227,829,3.234,958,2.777,1155,3.117,1217,3.879,1225,5.492,1245,4.951,1246,4.328,1249,3.329,1252,4.772,1253,4.328,1259,5.492,1275,4.328,1712,2.338,1719,2.936,2425,5.291,2437,3.495,2438,6.314,2439,6.314,2440,4.976,2441,3.495,2442,3.495,2443,3.495,2444,3.495,2445,3.495,2446,3.495,2447,3.495,2448,3.495,2449,3.495,2450,3.495,2451,3.495,2452,3.495,2453,3.495,2454,3.495]],["title/interfaces/UserStats.html",[823,1.341,1503,2.688]],["body/interfaces/UserStats.html",[0,0.071,1,1.724,3,0.068,4,0.068,5,0.068,10,0.995,11,1.895,12,1.405,14,1.724,15,0.131,16,0.531,17,0.407,18,3.112,19,3.466,21,2.785,22,2.572,23,2.389,24,2.303,25,3.397,26,3.316,27,2.586,28,2.721,29,0.41,30,0.014,31,1.272,34,0.676,35,1.829,36,1.517,43,2,44,1.98,47,0.575,63,0.835,66,1.262,87,0.224,98,2.245,99,0.122,109,0.916,110,0.006,111,0.006,116,0.995,119,2.359,136,0.607,138,0.88,145,0.755,154,0.954,158,2.142,166,1.04,173,2.925,175,1.198,188,0.392,191,1.14,198,1.599,209,0.727,226,0.814,231,0.804,234,2.279,235,0.916,237,1.807,241,2.598,247,1.334,248,1.198,250,1.513,251,2.208,253,2.623,256,1.417,257,1.513,259,2.195,260,2.039,262,2.138,263,2.245,268,1.513,414,2.925,465,1.334,512,1.334,516,1.334,527,2.334,540,1.262,576,2.245,634,1.417,640,0.995,648,2,669,1.899,673,0.995,674,2.047,694,1.417,728,1.899,729,1.262,732,2.785,817,2.114,823,1.196,829,3.436,838,3.082,896,2.245,898,1.513,912,2.398,915,1.628,916,2.245,917,1.628,918,1.513,919,4.507,946,2.581,949,2.398,954,2.398,955,3.931,956,2.581,958,1.262,959,1.628,962,2.581,963,2.581,965,2.581,966,2.581,976,2.581,977,1.628,978,1.513,981,1.628,1000,1.513,1001,2.398,1006,2.581,1008,1.262,1010,2.789,1015,1.628,1019,2.581,1021,1.628,1023,2.581,1025,1.628,1027,2.581,1098,1.198,1111,1.262,1243,2.627,1249,1.513,1365,2.245,1419,1.724,1456,1.334,1497,2.398,1498,1.628,1499,3.173,1500,4.507,1501,1.628,1502,1.628,1503,2.398,1504,4.119,1505,4.119,1506,3.931,1507,3.931,1508,2.978,1509,2.989,1510,3.931,1511,3.972,1512,1.262,1513,1.773,1514,1.773,1515,1.773,1516,1.773,1517,3.491,1518,2.81,1519,1.773,1520,1.773,1521,2.81,1522,2.398,1523,1.773,1524,1.773,1525,1.773,1526,1.773,1527,1.773,1528,1.773,1529,2.81,1530,1.773,1531,2.81,1532,1.628,1533,1.773,1534,3.972,1535,1.773,1536,1.773,1537,2.81,1538,3.972,1539,2.81,1540,1.773,1541,1.773,1542,1.773,1543,1.773,1544,1.773,1545,1.773,1546,1.773,1547,1.773,1548,1.773,1549,2.81,1550,3.491,1551,1.773,1552,2.81,1553,1.773,1554,1.773,1555,2.81,1556,1.628,1557,1.773,1558,1.773,1559,1.773,1560,1.773,1561,2.81,1562,1.773,1563,1.773,1564,2.81,1565,1.773,1566,1.773,1567,1.773,1568,1.773,1569,1.773,1570,1.773,1571,1.773,1572,1.773,1573,1.773,1574,1.773,1575,1.773,1576,2.81,1577,1.773,1578,1.773,1579,1.773,1580,1.773,1581,1.628,1582,1.773,1583,1.773]],["title/classes/UserStatsResponseDto.html",[0,0.126,2455,2.894]],["body/classes/UserStatsResponseDto.html",[0,0.193,2,1.526,3,0.143,4,0.143,5,0.143,8,2.417,12,1.267,15,0.276,16,0.907,29,0.515,30,0.014,31,1.413,32,1.285,35,1.994,37,3.131,39,0.735,44,1.899,47,0.494,63,0.674,87,0.208,95,1.644,98,2.392,99,0.161,110,0.01,111,0.01,128,3.836,473,3.418,728,3.244,730,5.471,1155,3.836,1156,4.41,1217,3.95,1252,4.248,1365,3.991,1504,4.537,1505,4.537,1506,4.537,1507,4.537,1508,3.174,1509,4.001,1510,4.537,1712,3.174,1719,4.228,1720,5.327,1722,3.417,2045,4.802,2425,5.082,2455,4.41,2456,5.327,2457,4.744,2458,4.744,2459,5.327,2460,4.744,2461,4.744,2462,5.161,2463,4.744,2464,4.127]],["title/classes/UsersByRoleDto.html",[0,0.126,2462,2.894]],["body/classes/UsersByRoleDto.html",[0,0.203,2,1.655,3,0.155,4,0.155,5,0.155,8,2.401,12,1.205,15,0.299,16,0.955,29,0.492,30,0.014,31,1.401,32,1.117,35,2.115,37,3.209,39,0.639,47,0.671,63,0.917,87,0.219,95,1.783,98,3.251,99,0.175,110,0.011,111,0.011,128,3.223,473,2.871,728,2.725,730,5.072,1155,3.223,1156,3.705,1217,4.014,1252,4.039,1365,3.912,1504,3.442,1505,3.442,1506,3.442,1507,3.442,1508,4.712,1509,4.356,1510,3.442,1712,3.442,1716,4.475,1719,4.155,1721,4.475,1722,3.705,2045,4.034,2425,4.712,2455,3.705,2456,4.475,2459,4.475,2462,5.317,2464,5.609]],["title/controllers/UsersController.html",[147,1.446,2465,2.894]],["body/controllers/UsersController.html",[0,0.075,1,2.511,3,0.072,4,0.072,5,0.072,8,2.328,10,3.267,11,2.351,12,1.525,14,2.511,15,0.139,17,1.131,27,2.495,29,0.512,30,0.014,32,1.127,35,1.452,36,1.456,39,0.645,47,0.738,63,0.893,87,0.247,95,0.827,99,0.081,109,0.967,110,0.006,111,0.006,147,0.859,149,0.893,151,1.332,153,1.203,154,1.946,155,2.326,156,2.326,158,2.219,161,1.408,163,2.098,164,2.093,166,1.098,167,1.495,173,1.982,175,1.265,176,1.719,178,1.408,180,1.719,182,3.27,183,1.719,184,1.332,185,2.889,187,3.551,188,0.414,191,1.204,193,1.204,195,1.007,196,1.148,198,1.592,205,3.759,209,0.768,234,2.698,241,1.579,251,1.861,253,1.809,259,1.249,260,0.74,262,2.823,276,2.14,350,3.616,424,1.296,465,3.08,466,3.085,469,2.89,472,2.502,473,2.088,474,3.695,476,2.767,477,2.077,478,4.526,479,5.467,496,1.872,497,3.708,512,1.408,515,1.495,522,1.265,523,1.719,524,1.495,525,1.886,526,1.719,527,1.249,528,1.719,531,1.872,532,1.597,533,4.476,534,4.809,535,2.502,538,2.343,540,1.332,542,4.353,548,4.715,549,3.937,556,2.077,557,3.759,580,2.077,582,2.077,587,1.872,640,1.051,669,2.765,673,1.051,674,2.121,729,1.332,742,2.933,757,5.239,761,3.356,771,4.686,772,2.077,780,5.389,781,2.077,782,2.077,783,3.759,784,4.022,785,3.616,817,2.207,847,1.872,848,1.872,853,1.872,912,4.743,916,2.343,923,3.616,926,3.616,927,4.012,928,2.077,929,2.077,936,2.077,954,1.597,955,1.597,972,3.254,973,2.077,974,3.254,1243,3.708,1365,3.032,1366,5.23,1419,1.148,1456,2.207,1499,2.343,1500,2.502,1502,1.719,1512,2.574,1581,1.719,1714,2.933,1719,2.721,1722,1.719,2143,2.077,2386,3.759,2424,3.759,2465,2.694,2466,2.077,2467,4.612,2468,2.387,2469,3.74,2470,2.387,2471,3.74,2472,2.387,2473,2.387,2474,2.387,2475,2.387,2476,2.387,2477,2.387,2478,2.387,2479,2.387,2480,2.387,2481,2.387,2482,2.387,2483,2.387,2484,2.387,2485,2.387,2486,4.612,2487,2.387,2488,2.387,2489,3.74,2490,3.74,2491,2.077,2492,2.387,2493,3.74,2494,2.387,2495,2.387,2496,2.387,2497,2.387,2498,2.387,2499,2.387,2500,2.387,2501,2.387,2502,2.387,2503,2.387,2504,2.387,2505,2.387,2506,2.387,2507,2.387,2508,2.387,2509,2.387,2510,2.387,2511,2.387,2512,2.387,2513,3.74,2514,2.387]],["title/modules/UsersModule.html",[209,1.293,290,2.688]],["body/modules/UsersModule.html",[0,0.172,3,0.166,4,0.166,5,0.166,12,1.024,30,0.014,87,0.268,99,0.187,110,0.011,111,0.011,149,2.509,188,0.95,209,2.331,211,2.638,212,2.638,213,2.905,214,2.905,215,2.638,216,3.839,217,3.839,221,3.553,222,2.638,223,2.765,225,3.743,226,1.974,229,3.743,289,4.649,290,5.43,302,4.299,888,4.769,1501,3.948,1512,4.599,2465,5.218,2491,4.769,2515,4.769,2516,4.769,2517,5.483,2518,4.769,2519,5.483,2520,5.483]],["title/injectables/UsersService.html",[231,0.902,1512,2.243]],["body/injectables/UsersService.html",[0,0.065,1,2.307,3,0.062,4,0.062,5,0.062,10,0.905,11,1.794,12,1.381,14,2.307,15,0.119,17,1.177,18,2.983,19,3.322,21,2.654,22,2.55,23,2.307,24,2.217,25,3.298,26,3.212,27,2.479,28,2.696,29,0.425,30,0.014,31,1.27,34,0.614,35,1.772,36,1.542,39,0.648,43,1.853,44,1.912,47,0.663,63,1.012,66,1.147,87,0.217,98,2.106,99,0.113,109,0.832,110,0.006,111,0.006,116,0.905,119,2.788,136,0.551,138,1.625,145,0.686,153,1.068,154,1.763,155,1.674,156,1.674,158,2.532,163,2.126,164,2.049,166,1.526,173,2.788,175,1.759,188,0.356,191,1.036,198,1.556,209,0.661,226,0.74,231,0.745,232,0.905,234,2.675,235,1.345,237,2.418,241,2.966,247,1.212,248,1.088,250,1.401,251,2.184,253,2.58,256,1.287,257,1.375,259,2.126,260,1.975,262,2.024,263,2.079,268,1.375,414,2.788,465,2.829,466,2.221,476,1.461,512,1.958,516,1.212,527,2.275,540,1.147,576,2.106,634,1.287,640,0.905,648,1.853,669,1.759,673,0.905,674,1.921,694,1.287,728,1.759,729,1.147,732,2.654,817,1.958,823,1.108,829,3.307,838,2.938,894,1.787,896,2.988,898,2.221,915,1.48,916,2.079,917,1.48,918,1.375,919,4.376,946,2.39,949,2.221,954,2.221,955,3.767,956,2.39,958,1.147,959,1.48,962,2.39,963,2.39,965,2.39,966,2.39,976,2.39,977,1.48,978,1.375,981,1.48,1000,1.375,1001,2.221,1006,2.39,1008,1.147,1010,2.616,1015,1.48,1019,2.39,1021,1.48,1023,2.39,1025,1.48,1027,2.39,1098,1.088,1243,3.322,1249,1.375,1365,2.106,1419,1.597,1456,1.212,1497,3.208,1498,1.48,1499,3.004,1500,4.376,1501,1.48,1502,1.48,1503,1.375,1504,3.208,1505,3.208,1506,2.794,1507,2.794,1508,2.794,1509,2.829,1510,2.794,1511,2.603,1512,1.853,1513,2.603,1514,2.603,1515,1.611,1516,1.611,1517,3.275,1518,2.603,1519,1.611,1520,1.611,1521,2.603,1522,2.221,1523,1.611,1524,1.611,1525,1.611,1526,1.611,1527,1.611,1528,1.611,1529,2.603,1530,1.611,1531,2.603,1532,1.48,1533,1.611,1534,3.76,1535,1.611,1536,3.275,1537,2.603,1538,3.76,1539,2.603,1540,1.611,1541,1.611,1542,1.611,1543,1.611,1544,1.611,1545,1.611,1546,1.611,1547,1.611,1548,1.611,1549,2.603,1550,3.275,1551,1.611,1552,2.603,1553,1.611,1554,1.611,1555,2.603,1556,1.48,1557,1.611,1558,1.611,1559,1.611,1560,1.611,1561,2.603,1562,1.611,1563,1.611,1564,2.603,1565,1.611,1566,1.611,1567,1.611,1568,1.611,1569,1.611,1570,1.611,1571,1.611,1572,1.611,1573,1.611,1574,1.611,1575,1.611,1576,2.603,1577,1.611,1578,2.603,1579,2.603,1580,2.603,1581,1.48,1582,1.611,1583,1.611,2521,3.32,2522,3.32,2523,2.055,2524,2.055,2525,2.055,2526,2.055,2527,2.055,2528,2.055,2529,2.055,2530,2.055,2531,2.055,2532,2.055,2533,2.055]],["title/coverage.html",[2534,4.301]],["body/coverage.html",[0,0.254,1,1.58,5,0.099,6,3.732,7,4.03,12,1.046,14,1.58,29,0.219,30,0.014,35,0.914,79,2.058,110,0.008,111,0.008,112,2.389,113,2.198,115,2.857,147,2.632,148,2.365,150,2.857,160,2.058,179,2.198,189,2.058,215,1.58,231,1.722,233,2.857,260,1.019,269,2.365,270,2.857,276,1.373,277,2.058,297,2.576,307,3.427,329,5.338,368,2.857,372,3.184,373,3.793,374,4.14,375,4.14,383,2.981,409,2.656,415,2.058,416,2.576,457,2.365,458,2.857,468,2.058,469,1.511,509,2.198,519,2.058,522,1.74,525,1.656,527,1.097,605,2.857,648,4.705,730,3.427,739,2.198,740,3.732,747,2.965,790,2.058,799,2.058,812,1.938,823,2.395,871,1.938,889,2.857,896,1.656,1112,4.03,1117,2.198,1138,1.938,1139,2.576,1142,1.656,1159,2.857,1160,3.732,1171,2.857,1172,3.732,1190,2.198,1191,2.857,1192,3.732,1228,2.365,1229,2.857,1230,3.732,1243,1.938,1244,2.857,1280,4.419,1281,3.732,1291,3.184,1345,2.365,1346,2.857,1365,1.656,1389,2.365,1408,2.365,1419,2.29,1465,2.808,1471,4.14,1497,2.198,1498,4.03,1503,2.198,1512,1.833,1584,2.857,1585,2.857,1591,2.857,1598,2.857,1649,2.857,1710,2.576,1711,2.857,1712,4.105,1719,1.938,1723,2.576,1735,2.808,1750,2.857,1751,2.857,1779,1.938,1780,2.857,1793,1.938,1865,2.198,1867,2.857,1868,2.365,1876,2.857,1877,2.857,1970,2.857,2012,2.365,2205,4.14,2262,2.857,2278,3.732,2284,3.732,2288,2.365,2301,2.857,2310,2.365,2311,2.857,2326,2.576,2339,2.857,2363,2.857,2368,2.857,2371,2.857,2377,2.857,2386,2.365,2387,2.857,2388,2.857,2391,2.857,2424,2.365,2425,4.105,2426,2.857,2455,2.365,2462,2.365,2465,2.365,2466,2.857,2534,2.576,2535,2.857,2536,3.285,2537,3.285,2538,6.792,2539,6.792,2540,6.514,2541,5.597,2542,4.14,2543,7.954,2544,3.285,2545,3.285,2546,4.759,2547,3.285,2548,6.137,2549,2.857,2550,4.868,2551,5.597,2552,2.857,2553,2.857,2554,5.597,2555,5.597,2556,4.759,2557,4.759,2558,6.137,2559,3.285,2560,3.285,2561,5.597,2562,4.759,2563,3.285,2564,3.285,2565,3.285,2566,3.285,2567,3.285,2568,3.285,2569,3.285]],["title/dependencies.html",[212,2.325,2570,2.919]],["body/dependencies.html",[0,0.213,30,0.014,93,2.248,95,1.923,110,0.011,111,0.011,122,2.342,145,1.853,188,0.962,212,2.67,226,1.998,294,3.097,296,3.997,638,4.828,874,4.352,876,3.477,880,3.477,916,3.477,1116,4.866,1406,5.878,1407,5.878,1616,4.352,1692,4.828,1824,4.828,1825,5.878,2287,4.352,2435,4.828,2571,7.771,2572,5.55,2573,6.757,2574,5.55,2575,5.55,2576,5.55,2577,5.55,2578,5.55,2579,5.55,2580,5.55,2581,5.55,2582,5.55,2583,5.55,2584,5.55,2585,5.55,2586,5.55,2587,5.55,2588,5.55,2589,5.55,2590,5.55,2591,5.55,2592,5.55,2593,5.55,2594,5.55,2595,5.55,2596,5.55,2597,5.55,2598,5.55]],["title/miscellaneous/enumerations.html",[2599,2.102,2600,4.204]],["body/miscellaneous/enumerations.html",[3,0.158,15,0.304,30,0.014,110,0.011,111,0.011,172,4.444,373,2.641,416,4.108,440,4.085,450,4.349,451,5.113,452,4.384,453,4.655,1139,4.108,1151,5.113,1155,4.085,1156,4.696,1194,5.113,1199,4.108,1200,5.568,1280,3.772,1281,5.568,1302,4.696,1319,4.557,1320,4.557,1321,5.672,1322,4.557,1323,3.772,1324,4.557,1325,4.557,1326,4.557,1327,4.557,1328,4.557,1329,5.672,1330,5.113,1331,5.672,1332,5.672,1333,4.557,1334,3.772,1335,4.108,1336,4.557,1337,4.557,1338,4.557,1723,4.108,1743,4.085,1747,4.362,2599,3.281,2600,4.557,2601,6.521,2602,5.238,2603,5.238,2604,5.238]],["title/miscellaneous/functions.html",[2599,2.102,2605,4.204]],["body/miscellaneous/functions.html",[15,0.363,17,1.125,29,0.417,30,0.013,63,0.888,110,0.012,111,0.012,163,2.086,215,3.686,2550,5.437,2552,6.308,2553,6.664,2599,3.915,2605,5.437,2606,7.661,2607,6.25,2608,7.661]],["title/index.html",[15,0.195,704,2.416,2609,3.355]],["body/index.html",[4,0.132,8,1.311,30,0.014,37,2.933,97,2.746,110,0.01,111,0.01,223,3.749,237,2.211,268,2.933,338,3.813,347,4.56,352,3.813,357,4.699,359,2.933,376,4.386,567,3.437,576,3.749,926,3.437,958,2.447,1064,3.813,1071,3.437,1120,5.546,1323,3.157,1334,3.157,1347,5.059,1404,3.157,1595,5.059,1783,3.813,1902,6.598,2019,3.813,2046,3.813,2157,6.046,2534,3.437,2535,5.059,2610,4.384,2611,4.384,2612,6.526,2613,5.815,2614,4.384,2615,4.384,2616,4.384,2617,6.526,2618,4.384,2619,6.95,2620,4.384,2621,7.702,2622,4.384,2623,4.384,2624,5.815,2625,4.384,2626,4.384,2627,6.526,2628,4.384,2629,4.384,2630,4.384,2631,4.384,2632,4.384,2633,6.95,2634,5.815,2635,4.384,2636,4.384,2637,4.384,2638,4.384,2639,5.815,2640,5.815,2641,4.384,2642,5.815,2643,7.434,2644,6.95,2645,4.384,2646,5.815,2647,4.384,2648,4.384,2649,4.384,2650,4.384,2651,6.95,2652,4.384,2653,4.384,2654,4.384,2655,5.815,2656,4.384,2657,4.384,2658,4.384,2659,4.384,2660,4.384,2661,5.815,2662,4.384,2663,4.384,2664,4.384,2665,5.815,2666,4.384,2667,4.384,2668,6.046,2669,5.815,2670,4.384,2671,4.384,2672,4.384,2673,4.384,2674,4.384,2675,4.384,2676,4.384,2677,4.384,2678,5.815,2679,4.384,2680,4.384,2681,4.384,2682,4.384,2683,4.384,2684,4.384,2685,4.384,2686,5.815,2687,4.384,2688,4.384,2689,4.384,2690,4.384,2691,5.815,2692,4.384,2693,4.384,2694,4.384,2695,5.815,2696,5.815,2697,4.384,2698,4.384,2699,4.384,2700,4.384,2701,4.384,2702,4.384,2703,4.384,2704,4.384,2705,4.384,2706,4.384,2707,3.813,2708,4.384,2709,4.384,2710,4.384,2711,4.384,2712,4.384,2713,4.384]],["title/modules.html",[211,2.639]],["body/modules.html",[30,0.012,110,0.012,111,0.012,210,4.046,211,2.909,281,4.355,285,4.046,286,4.046,287,4.046,288,4.046,289,3.568,290,4.046,2668,7.13,2714,8.197,2715,8.197,2716,8.197]],["title/overview.html",[2717,4.771]],["body/overview.html",[2,1.422,30,0.014,79,3.663,109,1.79,110,0.01,111,0.01,114,1.946,149,1.654,189,4.761,209,1.422,210,4.985,211,2.127,212,2.127,213,2.342,214,2.342,215,2.127,216,2.342,217,2.342,218,3.845,219,3.845,220,3.845,221,3.098,222,2.127,223,2.229,232,1.946,277,4.105,281,5.906,282,3.845,283,3.845,284,3.845,285,4.985,286,5.316,287,5.224,288,5.274,289,4.552,290,5.162,519,4.761,599,3.845,600,3.845,601,3.845,812,4.484,867,3.845,868,3.845,869,3.845,871,4.484,896,3.833,1111,2.467,1408,5.473,1419,2.127,1462,3.845,1463,3.845,1464,3.845,1465,4.484,1512,4.242,1779,4.114,1793,4.484,1862,3.845,1863,3.845,1864,3.845,1865,5.085,1888,3.845,2326,3.466,2332,3.845,2333,3.845,2334,3.845,2515,3.845,2516,3.845,2518,3.845,2717,3.845,2718,4.42,2719,4.42]],["title/properties.html",[16,0.716,2570,2.919]],["body/properties.html",[8,1.918,16,0.95,30,0.014,110,0.012,111,0.012,1323,4.619,2707,5.58,2720,6.414,2721,6.414,2722,6.414]],["title/miscellaneous/variables.html",[1125,3.233,2599,2.102]],["body/miscellaneous/variables.html",[12,1.255,15,0.319,27,2.418,28,2.137,29,0.484,30,0.014,34,2.259,47,0.699,110,0.011,111,0.011,114,2.418,172,4.002,198,1.277,251,1.528,297,5.265,314,4.778,315,4.778,317,3.955,321,3.955,323,4.778,324,4.778,325,4.778,330,4.307,336,2.91,347,5.265,469,2.526,476,2.418,527,2.587,761,3.065,1125,3.674,1619,4.307,2278,4.307,2279,4.778,2280,3.955,2281,4.778,2282,4.778,2283,4.778,2288,4.835,2542,4.778,2549,4.778,2599,3.441,2723,5.492,2724,6.714,2725,5.492,2726,5.492,2727,5.492,2728,5.492,2729,5.492,2730,5.492,2731,5.492,2732,5.492,2733,5.492,2734,5.492,2735,6.714,2736,5.492]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":648,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0')}${string(today.getdate()).padstart(2",{"_index":2024,"title":{},"body":{"injectables/QueueService.html":{}}}],["0.0.1",{"_index":2721,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2579,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2591,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":2598,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2578,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2588,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2543,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2541,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2567,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2558,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2556,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2563,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":2560,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2557,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":2566,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2539,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":2565,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2538,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2548,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2561,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2540,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2554,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2555,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2562,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1225,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UserResponseDto.html":{}}}],["01t00:00:00.000z",{"_index":2439,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["08:00",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["09123456789",{"_index":106,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["09123456789'})@isstring",{"_index":2263,"title":{},"body":{"classes/RegisterDto.html":{}}}],["09123456789'})@isstring()@isoptional",{"_index":58,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["1",{"_index":109,"title":{"injectables/MinioService-1.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":2023,"title":{},"body":{"injectables/QueueService.html":{}}}],["1).padstart(3",{"_index":2041,"title":{},"body":{"injectables/QueueService.html":{}}}],["1/10",{"_index":2546,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":2547,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2545,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1419,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["100",{"_index":128,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["100).tofixed(1",{"_index":1964,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["1024",{"_index":1420,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["10mb",{"_index":1421,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["11.0.0",{"_index":2573,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2574,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":2571,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":2576,"title":{},"body":{"dependencies.html":{}}}],["11:59",{"_index":1904,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["123",{"_index":49,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["13",{"_index":2719,"title":{},"body":{"overview.html":{}}}],["15",{"_index":2045,"title":{},"body":{"injectables/QueueService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["16.5.0",{"_index":2582,"title":{},"body":{"dependencies.html":{}}}],["1990",{"_index":1224,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["1d",{"_index":887,"title":{},"body":{"modules/AuthModule.html":{}}}],["1})@isoptional()@type(undefined)@isnumber()@min(1",{"_index":2427,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["2",{"_index":108,"title":{"interfaces/RequestWithUser-2.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["2.0.0",{"_index":2585,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":757,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":472,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":2438,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["23",{"_index":1888,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"overview.html":{}}}],["23:59",{"_index":1905,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["25",{"_index":2464,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["250",{"_index":1481,"title":{},"body":{"entities/DocumentFile.html":{}}}],["255",{"_index":140,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["2})@isnumber()@isoptional",{"_index":38,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["3",{"_index":1279,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueService.html":{}}}],["3.14.1",{"_index":2587,"title":{},"body":{"dependencies.html":{}}}],["30min",{"_index":698,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["33",{"_index":2544,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":2729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3600",{"_index":1645,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["4",{"_index":1249,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["4.0.1",{"_index":2589,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2572,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2580,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":2594,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":759,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["401",{"_index":764,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["403",{"_index":767,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["404",{"_index":771,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["409",{"_index":773,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["5",{"_index":174,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["5.0.1",{"_index":2597,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":2577,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":393,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{}}}],["500",{"_index":134,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["59",{"_index":1920,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["5:00",{"_index":696,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["6",{"_index":649,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateUserDto.html":{}}}],["6.0.0",{"_index":2575,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":2186,"title":{},"body":{"injectables/QueueService.html":{}}}],["639123456789",{"_index":1246,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["6})@isstring()@minlength(6",{"_index":1270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["7.8.2",{"_index":2593,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":79,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"overview.html":{}}}],["8.0.5",{"_index":2583,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":2456,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["8:00",{"_index":695,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["8})@isstring()@isnotempty()@minlength(8",{"_index":2274,"title":{},"body":{"classes/RegisterDto.html":{}}}],["8})@isstring()@isoptional()@minlength(8",{"_index":83,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["9",{"_index":2718,"title":{},"body":{"overview.html":{}}}],["9000",{"_index":1621,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["999",{"_index":1921,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["_",{"_index":1077,"title":{},"body":{"injectables/AuthService.html":{}}}],["__dirname",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":930,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":826,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["accesskey",{"_index":1624,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["accurate",{"_index":2025,"title":{},"body":{"injectables/QueueService.html":{}}}],["action",{"_index":1940,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["active",{"_index":1155,"title":{},"body":{"entities/Counter.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["activeusers",{"_index":1505,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["add",{"_index":849,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["addcounter",{"_index":1971,"title":{},"body":{"injectables/QueueService.html":{}}}],["addcounter(name",{"_index":1985,"title":{},"body":{"injectables/QueueService.html":{}}}],["adddays",{"_index":635,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["adddays(today",{"_index":708,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["additional",{"_index":1338,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["address",{"_index":20,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["address'})@isemail()@isnotempty",{"_index":1254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["addselect('count(user.id",{"_index":1568,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["admin",{"_index":10,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admin/staff",{"_index":480,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["admin/super",{"_index":1384,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["admincreateuser",{"_index":2467,"title":{},"body":{"controllers/UsersController.html":{}}}],["admincreateuser(createuserdto",{"_index":2468,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminid",{"_index":901,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{}}}],["administrators",{"_index":751,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["adminrolenames",{"_index":1053,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminrolenames.some",{"_index":1056,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles",{"_index":1051,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles.map((role",{"_index":1054,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminupdate",{"_index":1536,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["adminupdate(id",{"_index":2524,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminupdateuser",{"_index":741,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["adminupdateuser(adminid",{"_index":899,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminupdateuser(req",{"_index":746,"title":{},"body":{"controllers/AuthController.html":{}}}],["adminupdateuserdto",{"_index":1,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["adminupdateuserdto})@apiresponse({status",{"_index":756,"title":{},"body":{"controllers/AuthController.html":{}}}],["advanced",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["afterconnect",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["ahead",{"_index":2104,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails",{"_index":2119,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.foreach((detail",{"_index":2126,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.length",{"_index":2122,"title":{},"body":{"injectables/QueueService.html":{}}}],["allow",{"_index":580,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["allowed",{"_index":1428,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["allowedheaders",{"_index":1832,"title":{},"body":{"classes/QueueGateway.html":{}}}],["allowing",{"_index":2656,"title":{},"body":{"index.html":{}}}],["allows",{"_index":750,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["allqueues",{"_index":2230,"title":{},"body":{"controllers/QueuesController.html":{}}}],["allqueues.map((queue",{"_index":2234,"title":{},"body":{"controllers/QueuesController.html":{}}}],["alltimeslots",{"_index":700,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["alltimeslots.filter((slot",{"_index":702,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["already",{"_index":732,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["always",{"_index":1957,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["amazing",{"_index":2701,"title":{},"body":{"index.html":{}}}],["announcement",{"_index":113,"title":{"entities/Announcement.html":{}},"body":{"entities/Announcement.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["announcement.controller",{"_index":227,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["announcement.dto",{"_index":192,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{}}}],["announcement.dto.ts",{"_index":1160,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["announcement.dto.ts:10",{"_index":1164,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:14",{"_index":1165,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:18",{"_index":1162,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:22",{"_index":1167,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:6",{"_index":1168,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.isactive",{"_index":265,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcement.service",{"_index":190,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{}}}],["announcementcontroller",{"_index":148,"title":{"controllers/AnnouncementController.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"coverage.html":{}}}],["announcementmodule",{"_index":210,"title":{"modules/AnnouncementModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["announcementrepository",{"_index":239,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcements",{"_index":152,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["announcementservice",{"_index":189,"title":{"injectables/AnnouncementService.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{},"overview.html":{}}}],["api",{"_index":2219,"title":{},"body":{"controllers/QueuesController.html":{}}}],["apibearerauth",{"_index":535,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apibearerauth('jwt",{"_index":539,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{}}}],["apibody",{"_index":822,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apiconsumes",{"_index":1411,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apiconsumes('multipart/form",{"_index":1430,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apioperation",{"_index":533,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":749,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiparam",{"_index":821,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apiproperty",{"_index":1217,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["apiproperty({description",{"_index":1196,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["apiproperty({enum",{"_index":1203,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["apiproperty({example",{"_index":1252,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["apiproperty({type",{"_index":1720,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{}}}],["apipropertyoptional",{"_index":94,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["apipropertyoptional({description",{"_index":33,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional({example",{"_index":1245,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["apiresponse",{"_index":534,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":532,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags('appointments",{"_index":536,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["apitags('authentication",{"_index":824,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apitags('document",{"_index":1412,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apitags('users",{"_index":2495,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":385,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"injectables/AppointmentService.html":{},"entities/DocumentFile.html":{}}}],["app.appointmenttime",{"_index":693,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["app.controller",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["app.files",{"_index":1476,"title":{},"body":{"entities/DocumentFile.html":{}}}],["app.service",{"_index":278,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.statushistory",{"_index":386,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["appcontroller",{"_index":269,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":376,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1354,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["application.dto",{"_index":1410,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts",{"_index":1192,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["application.dto.ts:12",{"_index":1205,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:18",{"_index":2373,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:21",{"_index":1202,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:27",{"_index":2374,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:33",{"_index":1211,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:42",{"_index":1214,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.entity",{"_index":410,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.entity.ts",{"_index":1281,"title":{},"body":{"entities/DocumentApplication.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["application.entity.ts:41",{"_index":1299,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:44",{"_index":1314,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:51",{"_index":1288,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:54",{"_index":1286,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:61",{"_index":1303,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:64",{"_index":1308,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:67",{"_index":1297,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:70",{"_index":1290,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:73",{"_index":1311,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:76",{"_index":1301,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:81",{"_index":1313,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:84",{"_index":1294,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:90",{"_index":1307,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_id",{"_index":390,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["application_subtype",{"_index":1285,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_type",{"_index":1287,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationid",{"_index":377,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["applications",{"_index":1347,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"index.html":{}}}],["applications.controller",{"_index":1467,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.controller.ts",{"_index":1346,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"coverage.html":{}}}],["applications.controller.ts:112",{"_index":1376,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:136",{"_index":1367,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:154",{"_index":1361,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:165",{"_index":1381,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:183",{"_index":1390,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:211",{"_index":1393,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:226",{"_index":1387,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:241",{"_index":1370,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:249",{"_index":1385,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:46",{"_index":1355,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:74",{"_index":1400,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:96",{"_index":1359,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.module",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["applications.module.ts",{"_index":1466,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.service",{"_index":1409,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{}}}],["applications.service.ts",{"_index":2559,"title":{},"body":{"coverage.html":{}}}],["applications/document",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applications/dto/create",{"_index":1191,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/dto/update",{"_index":2371,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/entities/application",{"_index":374,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["applications/entities/document",{"_index":1280,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["applications/services/minio.service.ts",{"_index":1649,"title":{},"body":{"injectables/MinioService-1.html":{},"coverage.html":{}}}],["applications/services/minio.service.ts:109",{"_index":1656,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:119",{"_index":1659,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:128",{"_index":1664,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:46",{"_index":1665,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:50",{"_index":1657,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:65",{"_index":1666,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:7",{"_index":1667,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:8",{"_index":1668,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:9",{"_index":1655,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:93",{"_index":1662,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applicationstatus",{"_index":1302,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["applicationstatus.approved",{"_index":2375,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["applicationstatus.pending",{"_index":1344,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationstatushistory",{"_index":372,"title":{"entities/ApplicationStatusHistory.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applicationsubtype",{"_index":1193,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["applicationtype",{"_index":1194,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["applicationtype.birth_certificate",{"_index":1218,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["apply",{"_index":1521,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["appmodule",{"_index":281,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":415,"title":{"entities/Appointment.html":{}},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{}}}],["appointment'})@apiresponse({status",{"_index":471,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment.appointmentdate",{"_index":665,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.appointmenttime",{"_index":667,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.controller",{"_index":603,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["appointment.dto",{"_index":521,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts",{"_index":1172,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["appointment.dto.ts:13",{"_index":1178,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:17",{"_index":1180,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:21",{"_index":1181,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:25",{"_index":1174,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:29",{"_index":1182,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:33",{"_index":1183,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:37",{"_index":1176,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:41",{"_index":1177,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:45",{"_index":1185,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:48",{"_index":1186,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:51",{"_index":1179,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:9",{"_index":2370,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.service",{"_index":520,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{}}}],["appointment.status",{"_index":681,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.userid",{"_index":583,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment_type",{"_index":1754,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmentcontroller",{"_index":457,"title":{"controllers/AppointmentController.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"coverage.html":{}}}],["appointmentdate",{"_index":417,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmentmodule",{"_index":285,"title":{"modules/AppointmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules.html":{},"overview.html":{}}}],["appointmentnumber",{"_index":418,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentrepository",{"_index":614,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointments",{"_index":459,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentservice",{"_index":519,"title":{"injectables/AppointmentService.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{},"overview.html":{}}}],["appointmentstatus",{"_index":440,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"miscellaneous/enumerations.html":{}}}],["appointmentstatus.cancelled",{"_index":721,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.completed",{"_index":720,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.confirmed",{"_index":689,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.pending",{"_index":456,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{}}}],["appointmenttime",{"_index":419,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmenttype",{"_index":1231,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["appropriately",{"_index":1065,"title":{},"body":{"injectables/AuthService.html":{}}}],["approved",{"_index":1330,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["appservice",{"_index":277,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":41,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{}}}],["array.isarray(payload.roles",{"_index":1136,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["array.isarray(queue.details",{"_index":2238,"title":{},"body":{"controllers/QueuesController.html":{}}}],["asc",{"_index":657,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["asia/manila",{"_index":1891,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["assign",{"_index":43,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["assigned",{"_index":1080,"title":{},"body":{"injectables/AuthService.html":{}}}],["assigning",{"_index":984,"title":{},"body":{"injectables/AuthService.html":{}}}],["assignment",{"_index":2490,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignment'})@apiresponse({status",{"_index":2472,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignments",{"_index":861,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["assignments'})@apiparam({name",{"_index":754,"title":{},"body":{"controllers/AuthController.html":{}}}],["assignrolestouser",{"_index":2340,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":2345,"title":{},"body":{"injectables/RolesService.html":{}}}],["associated",{"_index":2164,"title":{},"body":{"injectables/QueueService.html":{}}}],["async",{"_index":234,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attempt",{"_index":931,"title":{},"body":{"injectables/AuthService.html":{}}}],["attempting",{"_index":1047,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":540,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth')@apibody({type",{"_index":808,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard",{"_index":776,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard)@get('profile",{"_index":787,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":877,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":524,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1585,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":813,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":528,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/decorators/user.decorator",{"_index":530,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["auth/dto/update",{"_index":1502,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/guards/jwt",{"_index":523,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/roles.guard",{"_index":526,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/jwt.strategy",{"_index":531,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":739,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authenticated",{"_index":543,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["authenticateduser",{"_index":469,"title":{"interfaces/AuthenticatedUser.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":1587,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1586,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":286,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2707,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":1833,"title":{},"body":{"classes/QueueGateway.html":{}}}],["authservice",{"_index":812,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1262,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{}}}],["availability",{"_index":661,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["available",{"_index":571,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["average",{"_index":2175,"title":{},"body":{"injectables/QueueService.html":{}}}],["averagewaittime",{"_index":2179,"title":{},"body":{"injectables/QueueService.html":{}}}],["await",{"_index":253,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":2646,"title":{},"body":{"index.html":{}}}],["back",{"_index":991,"title":{},"body":{"injectables/AuthService.html":{}}}],["backend",{"_index":2038,"title":{},"body":{"injectables/QueueService.html":{}}}],["backers",{"_index":2702,"title":{},"body":{"index.html":{}}}],["backward",{"_index":2420,"title":{},"body":{"entities/User.html":{}}}],["bad",{"_index":760,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception",{"_index":516,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('cannot",{"_index":650,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('date",{"_index":560,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["badrequestexception('document",{"_index":1435,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["badrequestexception('failed",{"_index":1035,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":644,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{}}}],["badrequestexception('this",{"_index":735,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception(`role",{"_index":1078,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`user",{"_index":1060,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(passwordvalidation.message",{"_index":971,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":2019,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["basic",{"_index":1062,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":916,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":940,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":921,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":973,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":2510,"title":{},"body":{"controllers/UsersController.html":{}}}],["bcrypt.hash(password",{"_index":975,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(updateuserdto.password",{"_index":1013,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":851,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":344,"title":{},"body":{"modules/AppModule.html":{}}}],["being",{"_index":1001,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["belongs",{"_index":577,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["below",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["better",{"_index":1915,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["between",{"_index":633,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["between(startdate",{"_index":705,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["between(startofday",{"_index":1928,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["between(todaystart",{"_index":2033,"title":{},"body":{"injectables/QueueService.html":{}}}],["bigint",{"_index":1486,"title":{},"body":{"entities/DocumentFile.html":{}}}],["birth",{"_index":1199,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["birth_certificate",{"_index":1319,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["birthdate",{"_index":1223,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["birthplace",{"_index":1226,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["board",{"_index":2694,"title":{},"body":{"index.html":{}}}],["body",{"_index":182,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["body('documentcategory",{"_index":1431,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["body('status",{"_index":588,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["book",{"_index":651,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["booked",{"_index":733,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots",{"_index":691,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots.includes(slot",{"_index":703,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["boolean",{"_index":138,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/FindAllOptions.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":215,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":2223,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["browse",{"_index":2716,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2714,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1691,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["bucketname",{"_index":1599,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["building",{"_index":2613,"title":{},"body":{"index.html":{}}}],["bulacan",{"_index":107,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulacan'})@isstring()@isoptional",{"_index":54,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulak",{"_index":1631,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["bulak_smart_connect",{"_index":2734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["business",{"_index":1327,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["business_permit",{"_index":1326,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["calculate",{"_index":2174,"title":{},"body":{"injectables/QueueService.html":{}}}],["callback",{"_index":1423,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["callback(null",{"_index":1429,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["called",{"_index":2165,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["caller",{"_index":1582,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["callnext",{"_index":1972,"title":{},"body":{"injectables/QueueService.html":{}}}],["callnext(counterid",{"_index":1987,"title":{},"body":{"injectables/QueueService.html":{}}}],["canactivate",{"_index":2285,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":2290,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["cancel",{"_index":1930,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancellation",{"_index":1942,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancellations",{"_index":1938,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelled",{"_index":453,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":716,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["cancelledqueues",{"_index":1932,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledqueues.length",{"_index":1936,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues",{"_index":1950,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues.length",{"_index":1952,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cascade",{"_index":388,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":1477,"title":{},"body":{"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["catch",{"_index":673,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["category",{"_index":1433,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["category)'})@apiresponse({status",{"_index":1375,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["caught",{"_index":1069,"title":{},"body":{"injectables/AuthService.html":{}}}],["certificate",{"_index":1200,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["change",{"_index":1009,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["changed",{"_index":1015,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["changed_at",{"_index":396,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changed_by",{"_index":398,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedat",{"_index":378,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedby",{"_index":379,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changing",{"_index":660,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["channel",{"_index":2671,"title":{},"body":{"index.html":{}}}],["character",{"_index":1110,"title":{},"body":{"injectables/AuthService.html":{}}}],["characters",{"_index":80,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["check",{"_index":576,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checkexists",{"_index":1973,"title":{},"body":{"injectables/QueueService.html":{}}}],["checkexists(id",{"_index":1989,"title":{},"body":{"injectables/QueueService.html":{}}}],["checking",{"_index":736,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["checks",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["checktimeslotavailability",{"_index":606,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["checktimeslotavailability(date",{"_index":615,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["citizen",{"_index":98,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["citizenrole",{"_index":979,"title":{},"body":{"injectables/AuthService.html":{}}}],["citizenrole.id",{"_index":982,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"overview.html":{}}}],["clear",{"_index":2204,"title":{},"body":{"injectables/QueueService.html":{}}}],["clicks",{"_index":2655,"title":{},"body":{"index.html":{}}}],["client",{"_index":1801,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":1840,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join('queue_updates",{"_index":1852,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":1849,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":1844,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":1855,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["cloud",{"_index":2641,"title":{},"body":{"index.html":{}}}],["cluster_announcementmodule",{"_index":218,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_exports",{"_index":219,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_providers",{"_index":220,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule",{"_index":599,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_exports",{"_index":600,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_providers",{"_index":601,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":867,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":869,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":870,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":868,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule",{"_index":1462,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_exports",{"_index":1464,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_providers",{"_index":1463,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":1862,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":1863,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":1864,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":2332,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":2333,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":2334,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2515,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2518,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2517,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2516,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["column",{"_index":144,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({default",{"_index":433,"title":{},"body":{"entities/Appointment.html":{}}}],["column({name",{"_index":392,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":436,"title":{},"body":{"entities/Appointment.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":125,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":427,"title":{},"body":{"entities/Appointment.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["combine",{"_index":2138,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["come",{"_index":2662,"title":{},"body":{"index.html":{}}}],["compatibility",{"_index":2421,"title":{},"body":{"entities/User.html":{}}}],["complete",{"_index":48,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["completed",{"_index":452,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":1728,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":1724,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["completedcount",{"_index":715,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["completedqueues",{"_index":2177,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.length",{"_index":2180,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.reduce((total",{"_index":2182,"title":{},"body":{"injectables/QueueService.html":{}}}],["completion",{"_index":1962,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["component",{"_index":1026,"title":{},"body":{"injectables/AuthService.html":{}}}],["components",{"_index":1548,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["concurrent",{"_index":1907,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["config",{"_index":882,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":884,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/database.config",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["configservice.get('db_host",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_logging",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_synchronize",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_timezone",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":1123,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":346,"title":{},"body":{"modules/AppModule.html":{}}}],["configured",{"_index":1682,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["confirmed",{"_index":451,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"miscellaneous/enumerations.html":{}}}],["confirmedcount",{"_index":714,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["conflict",{"_index":774,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["conflictexception",{"_index":915,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('email",{"_index":963,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('username",{"_index":966,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conn",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query(`set",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":1633,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["connected",{"_index":1839,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":987,"title":{},"body":{"injectables/AuthService.html":{}}}],["console",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":706,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.error('admin",{"_index":1095,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('error",{"_index":729,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["console.error('invalid",{"_index":2195,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.error('login",{"_index":957,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('registration",{"_index":992,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('user",{"_index":1038,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(`error",{"_index":675,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["console.log",{"_index":1046,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{}}}],["console.log('comparing",{"_index":937,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('creating",{"_index":2058,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('found",{"_index":2089,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log('generated",{"_index":952,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('get",{"_index":2221,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('getting",{"_index":2113,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('login",{"_index":833,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('password",{"_index":941,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('processing",{"_index":2235,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('queue",{"_index":2076,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('received",{"_index":1432,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["console.log('register",{"_index":841,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('stored",{"_index":935,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":932,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`calculated",{"_index":2112,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`creating",{"_index":2042,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`deleted",{"_index":679,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.log(`finding",{"_index":2133,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`found",{"_index":2098,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`getting",{"_index":2097,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`pending",{"_index":2111,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`queue",{"_index":2103,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`returning",{"_index":2140,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log(`serving",{"_index":2106,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`updated",{"_index":671,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.log(`updating",{"_index":2087,"title":{},"body":{"injectables/QueueService.html":{}}}],["const",{"_index":251,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":235,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["constructor(announcementrepository",{"_index":236,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["constructor(appointmentrepository",{"_index":612,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["constructor(configservice",{"_index":1588,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{}}}],["constructor(private",{"_index":195,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(queuerepository",{"_index":1883,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["constructor(queueservice",{"_index":1792,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":2328,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":2342,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":894,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["contact",{"_index":57,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["contact_number",{"_index":2392,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":21,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["contain",{"_index":1102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["containing",{"_index":1208,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["content",{"_index":1637,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["context",{"_index":2331,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":2294,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2293,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":2295,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":147,"title":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('announcements",{"_index":194,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["controller('appointments",{"_index":537,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["controller('auth",{"_index":825,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["controller('document",{"_index":1413,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["controller('queues",{"_index":2216,"title":{},"body":{"controllers/QueuesController.html":{}}}],["controller('roles",{"_index":2321,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('users",{"_index":2496,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":149,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":2187,"title":{},"body":{"injectables/QueueService.html":{}}}],["converting",{"_index":852,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["copy",{"_index":1198,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["cors",{"_index":1828,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":1509,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["counter",{"_index":1138,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":1730,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["counter.currentqueue.completedat",{"_index":2152,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueue.status",{"_index":2151,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueueid",{"_index":2155,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.id",{"_index":2171,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.name",{"_index":2161,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter/entities/counter.entity",{"_index":1746,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["counter_number",{"_index":1732,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":1809,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["countername",{"_index":2170,"title":{},"body":{"injectables/QueueService.html":{}}}],["counternumber",{"_index":1725,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["counterrepository",{"_index":1983,"title":{},"body":{"injectables/QueueService.html":{}}}],["counters",{"_index":2189,"title":{},"body":{"injectables/QueueService.html":{}}}],["counterstatus",{"_index":1151,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":1158,"title":{},"body":{"entities/Counter.html":{}}}],["counting",{"_index":2026,"title":{},"body":{"injectables/QueueService.html":{}}}],["counts",{"_index":710,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["courses",{"_index":2677,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2534,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":154,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create')@useguards(jwtauthguard",{"_index":2470,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@body",{"_index":197,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["create(createannouncementdto",{"_index":159,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["create(createappointmentdto",{"_index":467,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["create(createdto",{"_index":1353,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["create(createqueuedto",{"_index":1991,"title":{},"body":{"injectables/QueueService.html":{}}}],["create(createuserdto",{"_index":1580,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createannouncementdto",{"_index":160,"title":{"classes/CreateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["createappointmentdto",{"_index":468,"title":{"classes/CreateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["createappointmentdto.userid",{"_index":544,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["created",{"_index":473,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["created_at",{"_index":1289,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":116,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":123,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":395,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdby",{"_index":117,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["createdocumentapplicationdto",{"_index":1190,"title":{"classes/CreateDocumentApplicationDto.html":{}},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["createdto",{"_index":1356,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["createparamdecorator",{"_index":2279,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":1557,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createquerybuilder('user",{"_index":1518,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createqueuedto",{"_index":1228,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["createqueuedto.address",{"_index":2068,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.appointmenttype",{"_index":2071,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.firstname",{"_index":2065,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.isguest",{"_index":2056,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.lastname",{"_index":2066,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.middleinitial",{"_index":2067,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.phonenumber",{"_index":2069,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.reasonofvisit",{"_index":2070,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.userid",{"_index":2053,"title":{},"body":{"injectables/QueueService.html":{}}}],["creates",{"_index":2471,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":1243,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":1583,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":2440,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["credentials",{"_index":830,"title":{},"body":{"controllers/AuthController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["credentials'})@apibody({type",{"_index":795,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials'})@apiresponse({status",{"_index":766,"title":{},"body":{"controllers/AuthController.html":{}}}],["cron",{"_index":1900,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cron('59",{"_index":1887,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cruz",{"_index":1222,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["ctx",{"_index":2281,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2282,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1714,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["current_queue_id",{"_index":1145,"title":{},"body":{"entities/Counter.html":{}}}],["currently",{"_index":2101,"title":{},"body":{"injectables/QueueService.html":{}}}],["currentqueue",{"_index":1140,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{}}}],["currentqueueid",{"_index":1141,"title":{},"body":{"entities/Counter.html":{}}}],["currentuser",{"_index":2501,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.id",{"_index":2502,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.roles.some((role",{"_index":2503,"title":{},"body":{"controllers/UsersController.html":{}}}],["daily",{"_index":1889,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["data",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["data')@apioperation({summary",{"_index":1398,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["data'})@apiresponse({status",{"_index":763,"title":{},"body":{"controllers/AuthController.html":{}}}],["database",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":2608,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":122,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"dependencies.html":{}}}],["date')@useguards(jwtauthguard",{"_index":495,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["date().toisostring",{"_index":1693,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["date(today",{"_index":2028,"title":{},"body":{"injectables/QueueService.html":{}}}],["date(today.getfullyear",{"_index":1917,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["date.getday",{"_index":647,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["datestr",{"_index":2021,"title":{},"body":{"injectables/QueueService.html":{}}}],["day",{"_index":1903,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["dayofweek",{"_index":646,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["dd",{"_index":727,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["death",{"_index":1325,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["death_certificate",{"_index":1324,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["debug",{"_index":934,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{}}}],["debugging",{"_index":844,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["declarations",{"_index":214,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decline",{"_index":1332,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["decorators",{"_index":32,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["decorators/roles.decorator",{"_index":818,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["deeper",{"_index":2673,"title":{},"body":{"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":2395,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":829,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultroleid",{"_index":18,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultstrategy",{"_index":879,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":2289,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":39,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dela",{"_index":1221,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["delete",{"_index":185,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":176,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1386,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":507,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["delete(':id')@useguards(rolesguard)@roles('admin",{"_index":2482,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":1456,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletefile",{"_index":1601,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deletefile(objectname",{"_index":1605,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deleting",{"_index":680,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/MinioService-1.html":{}}}],["deletion",{"_index":596,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["dependencies",{"_index":212,"title":{"dependencies.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":2633,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":2645,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2639,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":2654,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":2359,"title":{},"body":{"injectables/RolesService.html":{}}}],["desc",{"_index":257,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["desc').skip(skip).take(limit",{"_index":1526,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["detail",{"_index":2128,"title":{},"body":{"injectables/QueueService.html":{}}}],["detail.queue.id",{"_index":2200,"title":{},"body":{"injectables/QueueService.html":{}}}],["details",{"_index":1209,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["details.entity",{"_index":1745,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["details.entity.ts",{"_index":1751,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":1758,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":1771,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":1770,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":1776,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":1775,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":1757,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":1762,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":1764,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":1753,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":1766,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":1773,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":1755,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:52",{"_index":1760,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":1736,"title":{},"body":{"entities/Queue.html":{}}}],["details?.address",{"_index":2247,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.firstname",{"_index":2243,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.lastname",{"_index":2244,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.middleinitial",{"_index":2245,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.phonenumber",{"_index":2248,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.reasonofvisit",{"_index":2246,"title":{},"body":{"controllers/QueuesController.html":{}}}],["detailsmap",{"_index":2115,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[detail.queueid",{"_index":2127,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[queue.id",{"_index":2139,"title":{},"body":{"injectables/QueueService.html":{}}}],["development",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":2683,"title":{},"body":{"index.html":{}}}],["different",{"_index":711,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["digits",{"_index":2036,"title":{},"body":{"injectables/QueueService.html":{}}}],["disable",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["disconnected",{"_index":1843,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":2670,"title":{},"body":{"index.html":{}}}],["dive",{"_index":2672,"title":{},"body":{"index.html":{}}}],["document",{"_index":409,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["document_category",{"_index":1480,"title":{},"body":{"entities/DocumentFile.html":{}}}],["documentapplication",{"_index":383,"title":{"entities/DocumentApplication.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["documentapplicationscontroller",{"_index":1345,"title":{"controllers/DocumentApplicationsController.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["documentapplicationsmodule",{"_index":287,"title":{"modules/DocumentApplicationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules.html":{},"overview.html":{}}}],["documentapplicationsservice",{"_index":1408,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{},"overview.html":{}}}],["documentation",{"_index":2535,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentcategory",{"_index":1396,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["documentfile",{"_index":1291,"title":{"entities/DocumentFile.html":{}},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["doe",{"_index":105,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":2269,"title":{},"body":{"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":67,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["doesn't",{"_index":2099,"title":{},"body":{"injectables/QueueService.html":{}}}],["don't",{"_index":579,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["dotenv",{"_index":2581,"title":{},"body":{"dependencies.html":{}}}],["download",{"_index":1379,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["dropschema",{"_index":342,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":9,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/create",{"_index":191,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":814,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":815,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":193,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["dto/user",{"_index":2493,"title":{},"body":{"controllers/UsersController.html":{}}}],["during",{"_index":1068,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueSchedulerService.html":{}}}],["e.g",{"_index":73,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["e2e",{"_index":2629,"title":{},"body":{"index.html":{}}}],["each",{"_index":1273,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueService.html":{}}}],["eager",{"_index":1306,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["earlier",{"_index":2108,"title":{},"body":{"injectables/QueueService.html":{}}}],["east",{"_index":1687,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["easy",{"_index":2124,"title":{},"body":{"injectables/QueueService.html":{}}}],["efficient",{"_index":2614,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":2637,"title":{},"body":{"index.html":{}}}],["email",{"_index":22,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["emailorusername",{"_index":1592,"title":{},"body":{"classes/LoginDto.html":{}}}],["emailregex",{"_index":993,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailregex.test(email",{"_index":995,"title":{},"body":{"injectables/AuthService.html":{}}}],["empty",{"_index":2131,"title":{},"body":{"injectables/QueueService.html":{}}}],["end",{"_index":568,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["enddate",{"_index":500,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["endofday",{"_index":1894,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endofday.toisostring",{"_index":1925,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endpoint",{"_index":842,"title":{},"body":{"controllers/AuthController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["endpoints",{"_index":1457,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["endpoint}:${port",{"_index":1683,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ensure",{"_index":2635,"title":{},"body":{"index.html":{}}}],["ensurebucketexists",{"_index":1650,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ensures",{"_index":2039,"title":{},"body":{"injectables/QueueService.html":{}}}],["ensuring",{"_index":1690,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["enterprise",{"_index":2685,"title":{},"body":{"index.html":{}}}],["entities",{"_index":114,"title":{},"body":{"entities/Announcement.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/announcement.entity",{"_index":228,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{}}}],["entities/application",{"_index":1468,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["entities/appointment.entity",{"_index":529,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["entities/document",{"_index":1216,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["entities/queue",{"_index":1874,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["entities/queue.entity",{"_index":1873,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":2336,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":1501,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":112,"title":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('announcements",{"_index":146,"title":{},"body":{"entities/Announcement.html":{}}}],["entity('application_status_history",{"_index":411,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["entity('appointments",{"_index":454,"title":{},"body":{"entities/Appointment.html":{}}}],["entity('counters",{"_index":1157,"title":{},"body":{"entities/Counter.html":{}}}],["entity('document_applications",{"_index":1339,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["entity('document_files",{"_index":1495,"title":{},"body":{"entities/DocumentFile.html":{}}}],["entity('queue_details",{"_index":1778,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":1748,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":2309,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":2418,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":441,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"entities/Queue.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["enumerations",{"_index":2600,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["environments",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["er_dup_entry",{"_index":1041,"title":{},"body":{"injectables/AuthService.html":{}}}],["err",{"_index":1067,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueuesController.html":{}}}],["error",{"_index":674,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["error('failed",{"_index":2148,"title":{},"body":{"injectables/QueueService.html":{}}}],["error('invalid",{"_index":2259,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('jwt_secret",{"_index":1124,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('queue",{"_index":2261,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('unauthorized",{"_index":2505,"title":{},"body":{"controllers/UsersController.html":{}}}],["error('user",{"_index":2356,"title":{},"body":{"injectables/RolesService.html":{}}}],["error(`failed",{"_index":2147,"title":{},"body":{"injectables/QueueService.html":{}}}],["error.code",{"_index":1040,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.message",{"_index":837,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["errormessage",{"_index":2145,"title":{},"body":{"injectables/QueueService.html":{}}}],["errors",{"_index":1044,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint",{"_index":923,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["eslint/no",{"_index":927,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["estimated_wait_time",{"_index":1738,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedwaittime",{"_index":1726,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["estimation",{"_index":2047,"title":{},"body":{"injectables/QueueService.html":{}}}],["event",{"_index":1853,"title":{},"body":{"classes/QueueGateway.html":{}}}],["example",{"_index":37,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"index.html":{}}}],["exceptions",{"_index":1096,"title":{},"body":{"injectables/AuthService.html":{}}}],["execution",{"_index":1908,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["executioncontext",{"_index":2280,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1074,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["existing",{"_index":1000,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existingappointment",{"_index":734,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments",{"_index":688,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments.map",{"_index":692,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existinguser",{"_index":1538,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail",{"_index":962,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail.id",{"_index":1004,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername",{"_index":965,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyusername.id",{"_index":1007,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":838,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["exists'})@apibearerauth('jwt",{"_index":775,"title":{},"body":{"controllers/AuthController.html":{}}}],["exists'})@apibody({type",{"_index":802,"title":{},"body":{"controllers/AuthController.html":{}}}],["expectation",{"_index":1836,"title":{},"body":{"classes/QueueGateway.html":{}}}],["expects",{"_index":2191,"title":{},"body":{"injectables/QueueService.html":{}}}],["experience",{"_index":2675,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":886,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiry",{"_index":1661,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["export",{"_index":99,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":217,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1407,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1395,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["extends",{"_index":13,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":72,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["extract",{"_index":2198,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["extraction",{"_index":2142,"title":{},"body":{"injectables/QueueService.html":{}}}],["extractjwt",{"_index":1114,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1128,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["failed",{"_index":860,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MinioService.html":{},"interfaces/RequestWithUser.html":{}}}],["failing",{"_index":2132,"title":{},"body":{"injectables/QueueService.html":{}}}],["false",{"_index":266,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"entities/QueueDetails.html":{},"injectables/QueueSchedulerService.html":{},"entities/Role.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isenum(applicationstatus",{"_index":2372,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isstring",{"_index":1201,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@joincolumn({name",{"_index":389,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["fast",{"_index":2649,"title":{},"body":{"index.html":{}}}],["features",{"_index":2658,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":2116,"title":{},"body":{"injectables/QueueService.html":{}}}],["fetching",{"_index":2129,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["few",{"_index":2651,"title":{},"body":{"index.html":{}}}],["fields",{"_index":976,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.application",{"_index":1293,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["file.buffer",{"_index":1635,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.entity",{"_index":1317,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["file.entity.ts",{"_index":1471,"title":{},"body":{"entities/DocumentFile.html":{},"coverage.html":{}}}],["file.entity.ts:17",{"_index":1490,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:20",{"_index":1479,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:23",{"_index":1484,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:26",{"_index":1489,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:29",{"_index":1487,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:32",{"_index":1492,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:35",{"_index":1482,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:38",{"_index":1494,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:45",{"_index":1478,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.mimetype",{"_index":1638,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.mimetype.match(/\\/(jpg|jpeg|png|pdf",{"_index":1424,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["file.originalname",{"_index":1640,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size",{"_index":1636,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size.tostring",{"_index":1695,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["file_name",{"_index":1483,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_size",{"_index":1485,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_type",{"_index":1488,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filefilter",{"_index":1422,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileid",{"_index":1382,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor",{"_index":1405,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor('file",{"_index":1416,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["filename",{"_index":1472,"title":{},"body":{"entities/DocumentFile.html":{}}}],["files",{"_index":1282,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["files.push(obj",{"_index":1706,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["filesize",{"_index":1418,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["filetype",{"_index":1473,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filter",{"_index":1522,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["finalisguest",{"_index":2062,"title":{},"body":{"injectables/QueueService.html":{}}}],["finally",{"_index":1956,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["find",{"_index":2088,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":155,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(options",{"_index":1513,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findall(query",{"_index":2474,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(status",{"_index":1357,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["findallbyuser",{"_index":607,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findallbyuser(userid",{"_index":619,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findalloptions",{"_index":1497,"title":{"interfaces/FindAllOptions.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findbyappointmentnumber",{"_index":460,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyappointmentnumber(@param('number",{"_index":574,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyappointmentnumber(appointmentnumber",{"_index":482,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyemail",{"_index":2521,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":1578,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findbyids",{"_index":2360,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname",{"_index":2341,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":2348,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyqueuenumber",{"_index":1974,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyqueuenumber(queuenumber",{"_index":1994,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatus",{"_index":1975,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatus(status",{"_index":1996,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatuswithdetails",{"_index":1976,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatuswithdetails(status",{"_index":1998,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyuseridwithdetails",{"_index":1977,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyuseridwithdetails(userid",{"_index":2000,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyusername",{"_index":2522,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":1579,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":156,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":203,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":166,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["finduserappointments",{"_index":461,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(@user",{"_index":553,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(user",{"_index":487,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["first",{"_index":62,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["first_name",{"_index":1756,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":23,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fixed",{"_index":1906,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["fk_appointment_user",{"_index":446,"title":{},"body":{"entities/Appointment.html":{}}}],["fk_current_queue",{"_index":1146,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":1769,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":1774,"title":{},"body":{"entities/QueueDetails.html":{}}}],["flag",{"_index":1958,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["flatten",{"_index":2233,"title":{},"body":{"controllers/QueuesController.html":{}}}],["fns",{"_index":638,"title":{},"body":{"injectables/AppointmentService.html":{},"dependencies.html":{}}}],["focus",{"_index":2657,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2688,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":768,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["foreign",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":445,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["form",{"_index":1207,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["form_data",{"_index":1295,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["format",{"_index":634,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["format(today",{"_index":724,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["formats",{"_index":2297,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["formdata",{"_index":1195,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["forwardref",{"_index":1827,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["found",{"_index":262,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apiresponse({status",{"_index":772,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":2612,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2201,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["full",{"_index":958,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["fullname",{"_index":1027,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fully",{"_index":1092,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":2551,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":2605,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":2653,"title":{},"body":{"index.html":{}}}],["general",{"_index":1943,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["generate",{"_index":694,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["generatealltimeslots",{"_index":608,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["generated",{"_index":1263,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["generating",{"_index":1697,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["get(':id",{"_index":167,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":1360,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id')@roles('admin",{"_index":2315,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id')@useguards(rolesguard)@roles('admin",{"_index":2476,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id/files",{"_index":1442,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files')@apioperation({summary",{"_index":1372,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all",{"_index":1445,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all')@apioperation({summary",{"_index":1363,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all",{"_index":1458,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all')@roles('admin",{"_index":1368,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats",{"_index":1460,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats')@roles('admin",{"_index":1383,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('available",{"_index":491,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('by",{"_index":483,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('date",{"_index":501,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('files/:fileid/download",{"_index":1448,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('files/:fileid/download')@apioperation({summary",{"_index":1378,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('health",{"_index":274,"title":{},"body":{"controllers/AppController.html":{}}}],["get('mine",{"_index":552,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('mine')@apioperation({summary",{"_index":488,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('minio_use_ssl",{"_index":1675,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["get('profile",{"_index":847,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["get('profile')@apioperation({summary",{"_index":2478,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('recent",{"_index":170,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["get('stats",{"_index":556,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["get('stats')@useguards(jwtauthguard",{"_index":505,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('stats')@useguards(rolesguard)@roles('admin",{"_index":2480,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('user/:userid",{"_index":2212,"title":{},"body":{"controllers/QueuesController.html":{},"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":2318,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('walk",{"_index":2214,"title":{},"body":{"controllers/QueuesController.html":{}}}],["get()@apioperation({summary",{"_index":1358,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get()@roles('admin",{"_index":2313,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@useguards(rolesguard)@roles('admin",{"_index":477,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["getallapplicationfiles",{"_index":1348,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplicationfiles(id",{"_index":1362,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplications",{"_index":1349,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles",{"_index":1350,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles(id",{"_index":1371,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getappointmentsbydate",{"_index":609,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydate(date",{"_index":624,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange",{"_index":610,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange(startdate",{"_index":626,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsstats",{"_index":611,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getavailableslots",{"_index":462,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getavailableslots(@query('date",{"_index":570,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getavailableslots(date",{"_index":490,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getbydate",{"_index":463,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(@query('date",{"_index":559,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(date",{"_index":494,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange",{"_index":464,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange(startdate",{"_index":499,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getcounters",{"_index":1978,"title":{},"body":{"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues",{"_index":1979,"title":{},"body":{"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues(queueids",{"_index":2004,"title":{},"body":{"injectables/QueueService.html":{}}}],["getdownloadurl",{"_index":1602,"title":{},"body":{"injectables/MinioService.html":{}}}],["getdownloadurl(objectname",{"_index":1608,"title":{},"body":{"injectables/MinioService.html":{}}}],["getfiledownloadurl",{"_index":1351,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfiledownloadurl(fileid",{"_index":1377,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfileinfo",{"_index":1651,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getfileinfo(objectname",{"_index":1658,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["gethello",{"_index":271,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpresignedurl",{"_index":1652,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getpresignedurl(objectname",{"_index":1660,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getprofile",{"_index":742,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":848,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":781,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["getprofile(userid",{"_index":902,"title":{},"body":{"injectables/AuthService.html":{}}}],["getqueuebyid",{"_index":2206,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(@param('id",{"_index":2256,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(id",{"_index":2209,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuedetails",{"_index":1980,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueuedetails(queueid",{"_index":2007,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition",{"_index":1981,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition(queueid",{"_index":2009,"title":{},"body":{"injectables/QueueService.html":{}}}],["getrawmany",{"_index":1570,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["getrecentannouncements",{"_index":157,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getrecentannouncements(@query('limit",{"_index":201,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["getrecentannouncements(limit",{"_index":169,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getstats",{"_index":465,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":704,"title":{"index.html":{}},"body":{"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["gettodaypendingcount",{"_index":1879,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["getuserqueues",{"_index":2207,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(@param('userid",{"_index":2250,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(userid",{"_index":2211,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserroles",{"_index":2312,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":2324,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":2317,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getwalkinqueues",{"_index":2208,"title":{},"body":{"controllers/QueuesController.html":{}}}],["global",{"_index":1859,"title":{},"body":{"classes/QueueGateway.html":{}}}],["graph",{"_index":2680,"title":{},"body":{"index.html":{}}}],["groupby('role.name",{"_index":1569,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["grow",{"_index":2698,"title":{},"body":{"index.html":{}}}],["guard",{"_index":2326,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2327,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":816,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guards/roles.guard",{"_index":819,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guest",{"_index":2054,"title":{},"body":{"injectables/QueueService.html":{}}}],["handle",{"_index":1008,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["handleconnection",{"_index":1784,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":1798,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledailyqueuereset",{"_index":1880,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["handledisconnect",{"_index":1785,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":1803,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":1786,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":1805,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":1787,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":1808,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":1788,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":1812,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates",{"_index":1789,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates(client",{"_index":1815,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":1916,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["hands",{"_index":2674,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2663,"title":{},"body":{"index.html":{}}}],["hash",{"_index":936,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["hashed",{"_index":1581,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":974,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["haslowercase",{"_index":1105,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasnumbers",{"_index":1107,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasroleassigned",{"_index":1086,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasspecialchars",{"_index":1108,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasuppercase",{"_index":1101,"title":{},"body":{"injectables/AuthService.html":{}}}],["healthcheck",{"_index":272,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":370,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":2678,"title":{},"body":{"index.html":{}}}],["here",{"_index":1064,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["history",{"_index":1304,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.application",{"_index":1305,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.entity",{"_index":1318,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["history.entity.ts",{"_index":375,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["history.entity.ts:17",{"_index":400,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:20",{"_index":394,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:23",{"_index":404,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:26",{"_index":402,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:29",{"_index":406,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:32",{"_index":399,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:35",{"_index":397,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:43",{"_index":391,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["hit",{"_index":843,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["host",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["hour",{"_index":737,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["http://localhost:5173",{"_index":1831,"title":{},"body":{"classes/QueueGateway.html":{}}}],["httpcode",{"_index":517,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":595,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["https://nestjs.com",{"_index":2711,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":518,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["id",{"_index":36,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":2536,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":42,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["ignoreexpiration",{"_index":1129,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["iii",{"_index":75,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["iii)'})@isoptional()@isstring",{"_index":1267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ildefonso",{"_index":53,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["image",{"_index":118,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["implements",{"_index":1669,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":229,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["in(queueids",{"_index":2121,"title":{},"body":{"injectables/QueueService.html":{}}}],["in(roleids",{"_index":2362,"title":{},"body":{"injectables/RolesService.html":{}}}],["inactive",{"_index":1156,"title":{},"body":{"entities/Counter.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["inactiveusers",{"_index":1506,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["include",{"_index":2202,"title":{},"body":{"injectables/QueueService.html":{}}}],["including",{"_index":753,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index(['applicationid",{"_index":412,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["index(['applicationtype",{"_index":1341,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['changedat",{"_index":413,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["index(['createdat",{"_index":1343,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['documentcategory",{"_index":1496,"title":{},"body":{"entities/DocumentFile.html":{}}}],["index(['status",{"_index":1342,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['userid",{"_index":1340,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["information",{"_index":97,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["information'})@apiresponse({status",{"_index":806,"title":{},"body":{"controllers/AuthController.html":{}}}],["infrastructure",{"_index":2660,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":55,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["initial",{"_index":1212,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["inject",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["inject(forwardref",{"_index":1837,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["injectable",{"_index":231,"title":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":232,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":248,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(announcement",{"_index":249,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["injectrepository(appointment",{"_index":639,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["injectrepository(counter",{"_index":2018,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queue",{"_index":1901,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["injectrepository(queuedetails",{"_index":2017,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(role",{"_index":2352,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":918,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["input",{"_index":762,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["install",{"_index":2652,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":2622,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":836,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["insufficient",{"_index":769,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":2681,"title":{},"body":{"index.html":{}}}],["interface",{"_index":823,"title":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":1111,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"overview.html":{}}}],["intervals",{"_index":699,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["invalid",{"_index":590,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["inversejoincolumn",{"_index":2412,"title":{},"body":{"entities/User.html":{}}}],["is_active",{"_index":2401,"title":{},"body":{"entities/User.html":{}}}],["is_guest",{"_index":1759,"title":{},"body":{"entities/QueueDetails.html":{}}}],["isactive",{"_index":119,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["isarray",{"_index":92,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isauthorized",{"_index":1055,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":1170,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{}}}],["isboolean()@isoptional",{"_index":1236,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isdatestring",{"_index":1188,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isemail",{"_index":88,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":1187,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isenum(applicationstatus",{"_index":2376,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["isenum(applicationtype",{"_index":1219,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isenum(appointmentstatus",{"_index":1189,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isenum(queuestatus",{"_index":2381,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":2379,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["isguest",{"_index":420,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["isnan(number(payload.sub",{"_index":1133,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnan(queueid",{"_index":2258,"title":{},"body":{"controllers/QueuesController.html":{}}}],["isnan(userid",{"_index":997,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnan(useridnumber",{"_index":2194,"title":{},"body":{"injectables/QueueService.html":{}}}],["isnotempty",{"_index":1169,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isdatestring",{"_index":1175,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnotempty()@isstring",{"_index":1173,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnumber",{"_index":91,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isobject",{"_index":1215,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isoptional",{"_index":89,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isoptional()@isboolean",{"_index":1166,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["isoptional()@isenum(appointmentstatus",{"_index":1184,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isoptional()@isstring",{"_index":1161,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{}}}],["ispasswordvalid",{"_index":939,"title":{},"body":{"injectables/AuthService.html":{}}}],["isprivileged",{"_index":1443,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["isresetinprogress",{"_index":1878,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["isstring",{"_index":90,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isstring()@isnotempty",{"_index":1163,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{}}}],["isstring()@isoptional",{"_index":1232,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalid",{"_index":637,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{}}}],["isvalid(date",{"_index":643,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalid(parseddate",{"_index":686,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalidemail",{"_index":890,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":904,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":2167,"title":{},"body":{"injectables/QueueService.html":{}}}],["items",{"_index":828,"title":{},"body":{"controllers/AuthController.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{}}}],["job",{"_index":2691,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2693,"title":{},"body":{"index.html":{}}}],["john",{"_index":103,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":2267,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":64,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john.doe@example.com",{"_index":1253,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["john_doe",{"_index":101,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":2276,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":85,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["johndoe",{"_index":1275,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["join",{"_index":2704,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":408,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["joined",{"_index":1851,"title":{},"body":{"classes/QueueGateway.html":{}}}],["jointable",{"_index":2416,"title":{},"body":{"entities/User.html":{}}}],["jpeg",{"_index":1425,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["jr",{"_index":74,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["jr.'})@isstring()@isoptional",{"_index":76,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["json",{"_index":1296,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["juan",{"_index":1220,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["jwt",{"_index":880,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":820,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["jwtauthguard",{"_index":522,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1127,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":873,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":881,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":1117,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":895,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":871,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2708,"title":{},"body":{"index.html":{}}}],["keep",{"_index":2419,"title":{},"body":{"entities/User.html":{}}}],["keeps",{"_index":2037,"title":{},"body":{"injectables/QueueService.html":{}}}],["key",{"_index":352,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["last",{"_index":66,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["last_modified_by",{"_index":1300,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["last_name",{"_index":1761,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastmodifiedby",{"_index":1283,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["lastname",{"_index":24,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["lastname}${nameextension",{"_index":959,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["latest",{"_index":1373,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["learn",{"_index":2666,"title":{},"body":{"index.html":{}}}],["leftjoin('user.roles",{"_index":1566,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.defaultrole",{"_index":1519,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.roles",{"_index":1520,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["legacy",{"_index":2218,"title":{},"body":{"controllers/QueuesController.html":{}}}],["legend",{"_index":213,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":127,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{}}}],["lessthan",{"_index":2015,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthan(queue.createdat",{"_index":2110,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal",{"_index":2014,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(new",{"_index":2178,"title":{},"body":{"injectables/QueueService.html":{}}}],["let's",{"_index":2196,"title":{},"body":{"injectables/QueueService.html":{}}}],["letter",{"_index":1104,"title":{},"body":{"injectables/AuthService.html":{}}}],["license",{"_index":1323,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["licensed",{"_index":2696,"title":{},"body":{"index.html":{}}}],["limit",{"_index":173,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limits",{"_index":1417,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["line",{"_index":925,"title":{},"body":{"injectables/AuthService.html":{}}}],["linkedin",{"_index":2690,"title":{},"body":{"index.html":{}}}],["listfiles",{"_index":1653,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["listfiles(prefix",{"_index":1663,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["literal",{"_index":912,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{}}}],["localhost",{"_index":1619,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["log",{"_index":1434,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["logdailystatistics",{"_index":1881,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logdailystatistics(startofday",{"_index":1893,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logger",{"_index":332,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{}}}],["logger(appointmentcontroller.name",{"_index":541,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["logger(minioservice.name",{"_index":1612,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["logger(queuegateway.name",{"_index":1795,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queueschedulerservice.name",{"_index":1898,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logging",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":743,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["login'})@apiresponse({status",{"_index":791,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":832,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":789,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":790,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":920,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":938,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto})@post('login",{"_index":796,"title":{},"body":{"controllers/AuthController.html":{}}}],["looking",{"_index":2640,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":2125,"title":{},"body":{"injectables/QueueService.html":{}}}],["loop",{"_index":2687,"title":{},"body":{"index.html":{}}}],["loss",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["lowercase",{"_index":1106,"title":{},"body":{"injectables/AuthService.html":{}}}],["main",{"_index":50,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maintain",{"_index":986,"title":{},"body":{"injectables/AuthService.html":{}}}],["makes",{"_index":2647,"title":{},"body":{"index.html":{}}}],["managing",{"_index":2659,"title":{},"body":{"index.html":{}}}],["manila",{"_index":1227,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["manual",{"_index":1965,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["manualdailyreset",{"_index":1882,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["many",{"_index":2107,"title":{},"body":{"injectables/QueueService.html":{}}}],["manytomany",{"_index":2308,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":2305,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":2410,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":407,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":384,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["mark",{"_index":1931,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["marriage",{"_index":1321,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_certificate",{"_index":1320,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_license",{"_index":1322,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["match",{"_index":1835,"title":{},"body":{"classes/QueueGateway.html":{}}}],["matching",{"_index":111,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(total",{"_index":1533,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["math.floor",{"_index":2185,"title":{},"body":{"injectables/QueueService.html":{}}}],["mau",{"_index":2643,"title":{},"body":{"index.html":{}}}],["message",{"_index":1098,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1692,"title":{},"body":{"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["method",{"_index":1535,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":153,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middle",{"_index":69,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["middle_initial",{"_index":1763,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":2404,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":421,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["middlename",{"_index":25,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["migrationsrun",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["miguel",{"_index":1259,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["min",{"_index":78,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["min(1",{"_index":2436,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["minimum",{"_index":1269,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["minio",{"_index":1616,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["minio.client",{"_index":1614,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minio_access_key",{"_index":1678,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_bucket_name",{"_index":1680,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_endpoint",{"_index":1671,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_object_name",{"_index":1491,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minio_secret_key",{"_index":1679,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minioadmin",{"_index":1626,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioadmin123",{"_index":1628,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioclient",{"_index":1600,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioobjectname",{"_index":1474,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minioservice",{"_index":1465,"title":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}},"body":{"modules/DocumentApplicationsModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"coverage.html":{},"overview.html":{}}}],["minlength",{"_index":82,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(6",{"_index":1278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":102,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minute",{"_index":738,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["minutes",{"_index":2048,"title":{},"body":{"injectables/QueueService.html":{}}}],["miscellaneous",{"_index":2599,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2695,"title":{},"body":{"index.html":{}}}],["mm",{"_index":726,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["mode",{"_index":2624,"title":{},"body":{"index.html":{}}}],["module",{"_index":209,"title":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["modules",{"_index":211,"title":{"modules.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/announcement/announcement.module",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appointment/appointment.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/document",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/queue/queue.module",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":2157,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["multer",{"_index":2584,"title":{},"body":{"dependencies.html":{}}}],["multiple",{"_index":2130,"title":{},"body":{"injectables/QueueService.html":{}}}],["mysql",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":2586,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":2709,"title":{},"body":{"index.html":{}}}],["name",{"_index":63,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["name'})@isstring()@isnotempty",{"_index":1256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["name_extension",{"_index":2407,"title":{},"body":{"entities/User.html":{}}}],["namecomponents",{"_index":1017,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.firstname",{"_index":1028,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.lastname",{"_index":1030,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.middlename",{"_index":1029,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.nameextension",{"_index":1031,"title":{},"body":{"injectables/AuthService.html":{}}}],["nameextension",{"_index":26,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["namespace",{"_index":1834,"title":{},"body":{"classes/QueueGateway.html":{}}}],["need",{"_index":1404,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["nest",{"_index":2617,"title":{},"body":{"index.html":{}}}],["nested",{"_index":2231,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nestframework",{"_index":2713,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1120,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["nestjs/common",{"_index":188,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2287,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":874,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2366,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["nestjs/passport",{"_index":876,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1406,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":95,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":226,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1824,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":260,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["new_status",{"_index":401,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["newdate",{"_index":664,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["newfirstname",{"_index":1549,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname",{"_index":1551,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname}${newnameextension",{"_index":1554,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newmiddlename",{"_index":1550,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newnameextension",{"_index":1552,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newstatus",{"_index":380,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["newtime",{"_index":666,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["next",{"_index":924,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["nextcalled",{"_index":2173,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue",{"_index":2154,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.counternumber",{"_index":2160,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.id",{"_index":2163,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.status",{"_index":2159,"title":{},"body":{"injectables/QueueService.html":{}}}],["node.js",{"_index":2611,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":247,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`announcement",{"_index":261,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["notfoundexception(`appointment",{"_index":659,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["notfoundexception(`counter",{"_index":2150,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`details",{"_index":2085,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`queue",{"_index":2082,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`role",{"_index":2355,"title":{},"body":{"injectables/RolesService.html":{}}}],["notfoundexception(`user",{"_index":1534,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notification",{"_index":1944,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["notify",{"_index":1937,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["notifycounterupdate",{"_index":1790,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":1818,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":1791,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":1820,"title":{},"body":{"classes/QueueGateway.html":{}}}],["npm",{"_index":2621,"title":{},"body":{"index.html":{}}}],["null",{"_index":850,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["null/undefined",{"_index":2237,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nullable",{"_index":135,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":31,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["number'})@isoptional()@isstring",{"_index":1247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["number(createqueuedto.userid",{"_index":2055,"title":{},"body":{"injectables/QueueService.html":{}}}],["number(payload.sub",{"_index":1134,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["number(req.user.id",{"_index":859,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["number(targetuserid",{"_index":866,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["number/:number",{"_index":484,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["obj",{"_index":1705,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["object",{"_index":827,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["object.assign(announcement",{"_index":264,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["object.assign(appointment",{"_index":670,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["object.values(appointmentstatus).includes(status",{"_index":589,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object.values(appointmentstatus).join",{"_index":592,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["objectname",{"_index":1607,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["occurred",{"_index":1097,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["of(id",{"_index":1559,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":2692,"title":{},"body":{"index.html":{}}}],["official",{"_index":2644,"title":{},"body":{"index.html":{}}}],["ok",{"_index":280,"title":{},"body":{"controllers/AppController.html":{}}}],["old_status",{"_index":403,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["oldstatus",{"_index":381,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["omit",{"_index":1511,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["on'].includes(usesslvalue",{"_index":1677,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ondelete",{"_index":387,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["one",{"_index":591,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["ones",{"_index":1556,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":1316,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":1292,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetoone",{"_index":1153,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":1143,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":1781,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":1782,"title":{},"body":{"classes/QueueGateway.html":{}}}],["only)'})@apiresponse({status",{"_index":1366,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["onmoduleinit",{"_index":1654,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["open",{"_index":2697,"title":{},"body":{"index.html":{}}}],["operator",{"_index":2357,"title":{},"body":{"injectables/RolesService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["optional)'})@isoptional()@isstring",{"_index":1260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["options",{"_index":1514,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["order",{"_index":256,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["organize",{"_index":2123,"title":{},"body":{"injectables/QueueService.html":{}}}],["origin",{"_index":1829,"title":{},"body":{"classes/QueueGateway.html":{}}}],["original",{"_index":1639,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["out",{"_index":223,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outer",{"_index":1070,"title":{},"body":{"injectables/AuthService.html":{}}}],["overview",{"_index":2717,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":578,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["package",{"_index":2570,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1499,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pages",{"_index":1717,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["paginatedusersresponsedto",{"_index":1710,"title":{"classes/PaginatedUsersResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["param",{"_index":184,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["param('fileid",{"_index":1449,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["param('id",{"_index":205,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":864,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["parameter",{"_index":561,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["parameters",{"_index":163,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":683,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseddate",{"_index":684,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseduserid",{"_index":2060,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseint(id",{"_index":2257,"title":{},"body":{"controllers/QueuesController.html":{}}}],["parseint(process.env.db_port",{"_index":2728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.minio_port",{"_index":1620,"title":{},"body":{"injectables/MinioService.html":{}}}],["parseint(stat.count",{"_index":1573,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["parseint(userid",{"_index":2193,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseintpipe",{"_index":186,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["parseiso",{"_index":636,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(createappointmentdto.appointmentdate",{"_index":642,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(date",{"_index":685,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["part",{"_index":2684,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":2365,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["partialtype(createannouncementdto",{"_index":2364,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{}}}],["partialtype(createappointmentdto",{"_index":2369,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["parts",{"_index":1014,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":1116,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":875,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":878,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1113,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1121,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":27,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":1099,"title":{},"body":{"injectables/AuthService.html":{}}}],["password123",{"_index":81,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["password123'})@isstring()@isnotempty",{"_index":1596,"title":{},"body":{"classes/LoginDto.html":{}}}],["passwords",{"_index":1528,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["passwordvalidation",{"_index":968,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordvalidation.isvalid",{"_index":970,"title":{},"body":{"injectables/AuthService.html":{}}}],["past",{"_index":653,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["patch",{"_index":183,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":180,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":510,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["patch(':id')@useguards(rolesguard)@roles('admin",{"_index":2484,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/status",{"_index":587,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/status')@roles('admin",{"_index":1392,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["patch(':id/status')@useguards(jwtauthguard",{"_index":513,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["patch(':id/status')@useguards(rolesguard)@roles('admin",{"_index":2487,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":2220,"title":{},"body":{"controllers/QueuesController.html":{}}}],["payload",{"_index":947,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.roles.map((role",{"_index":1137,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1132,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pdf",{"_index":1427,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["pending",{"_index":450,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["pendingaheadcount",{"_index":2109,"title":{},"body":{"injectables/QueueService.html":{}}}],["pendingcount",{"_index":713,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["pendingqueues",{"_index":1926,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.length",{"_index":1929,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.map(queue",{"_index":1934,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueueswithdetails",{"_index":2224,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pendingqueueswithdetails.length",{"_index":2228,"title":{},"body":{"controllers/QueuesController.html":{}}}],["per",{"_index":1374,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"classes/UserQueryDto.html":{}}}],["perform",{"_index":1061,"title":{},"body":{"injectables/AuthService.html":{}}}],["performance",{"_index":2118,"title":{},"body":{"injectables/QueueService.html":{}}}],["permission",{"_index":584,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["permissions",{"_index":862,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["permissions'})@apiresponse({status",{"_index":770,"title":{},"body":{"controllers/AuthController.html":{}}}],["permit",{"_index":1328,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["person",{"_index":2049,"title":{},"body":{"injectables/QueueService.html":{}}}],["phone_number",{"_index":1765,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":422,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["pickup",{"_index":1335,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["platform",{"_index":2642,"title":{},"body":{"index.html":{}}}],["please",{"_index":2669,"title":{},"body":{"index.html":{}}}],["pm",{"_index":697,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["png",{"_index":1426,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["port",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":1847,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["possible",{"_index":2638,"title":{},"body":{"index.html":{}}}],["post",{"_index":161,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["post(':id/files",{"_index":1415,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post(':id/files')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1397,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post('admin",{"_index":2469,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('admin/update",{"_index":863,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('login",{"_index":831,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('register",{"_index":839,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('update",{"_index":857,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post()@apioperation({summary",{"_index":470,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["potential",{"_index":2236,"title":{},"body":{"controllers/QueuesController.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["presigned",{"_index":1698,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["prevent",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{}}}],["primarycolumn",{"_index":1315,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarycolumn({length",{"_index":1298,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarygeneratedcolumn",{"_index":132,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":250,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["privileged",{"_index":1364,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["process",{"_index":1914,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["process.env.db_host",{"_index":2727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":2733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":2730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.minio_access_key",{"_index":1625,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_bucket_name",{"_index":1630,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_endpoint",{"_index":1618,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_secret_key",{"_index":1627,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_use_ssl",{"_index":1623,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.node_env",{"_index":2735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.ws_cors_origin",{"_index":1830,"title":{},"body":{"classes/QueueGateway.html":{}}}],["processing",{"_index":1329,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["production",{"_index":347,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":783,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["profile'})@apiresponse({status",{"_index":782,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["progress",{"_index":1911,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["progressive",{"_index":2610,"title":{},"body":{"index.html":{}}}],["project",{"_index":2619,"title":{},"body":{"index.html":{}}}],["promise",{"_index":241,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":1700,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["promise.all",{"_index":718,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["propagate",{"_index":1955,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["proper",{"_index":1049,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueSchedulerService.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"properties.html":{}}}],["provided",{"_index":1010,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["provided)'})@isoptional()@isstring",{"_index":1276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["provided)'})@isstring()@isoptional",{"_index":1264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["providedisguest",{"_index":2061,"title":{},"body":{"injectables/QueueService.html":{}}}],["provideduserid",{"_index":2059,"title":{},"body":{"injectables/QueueService.html":{}}}],["providers",{"_index":216,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["query",{"_index":187,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["query('end",{"_index":566,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('set",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["query('start",{"_index":565,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('status",{"_index":1437,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["query.dto",{"_index":2494,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto.ts",{"_index":2426,"title":{},"body":{"classes/UserQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":2429,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:26",{"_index":2428,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:34",{"_index":2434,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:42",{"_index":2431,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["querybuilder",{"_index":1516,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere('roles.name",{"_index":1524,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.getmanyandcount",{"_index":1527,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.orderby('user.createdat",{"_index":1525,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.where",{"_index":1523,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["questions",{"_index":2667,"title":{},"body":{"index.html":{}}}],["queue",{"_index":1142,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":2092,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.completedat.gettime",{"_index":2183,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.controller",{"_index":1869,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":1144,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":2094,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.createdat",{"_index":2241,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.createdat.gettime",{"_index":2184,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.details",{"_index":1767,"title":{},"body":{"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["queue.details[0",{"_index":2239,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.dto",{"_index":2016,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.dto.ts",{"_index":1230,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:11",{"_index":2378,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:13",{"_index":1238,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:17",{"_index":1239,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:21",{"_index":1233,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:25",{"_index":1240,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:29",{"_index":1241,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":1234,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:37",{"_index":1237,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:5",{"_index":1242,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":2380,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:9",{"_index":1235,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.entity",{"_index":1777,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.estimatedwaittime",{"_index":2242,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.gateway",{"_index":1871,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queue.id",{"_index":2136,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.queuenumber",{"_index":2240,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.service",{"_index":1826,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{}}}],["queue.status",{"_index":2091,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue/entities/queue.entity",{"_index":1154,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":1768,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":1741,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":1867,"title":{},"body":{"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":1845,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":1735,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queuedetails.queue",{"_index":2073,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuedetailsrepository",{"_index":1982,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuegateway",{"_index":1779,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":1752,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queueids",{"_index":2006,"title":{},"body":{"injectables/QueueService.html":{}}}],["queueids.length",{"_index":2114,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuemodule",{"_index":288,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenumber",{"_index":1727,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queuerepository",{"_index":1885,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queues",{"_index":1923,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queues.controller",{"_index":1870,"title":{},"body":{"modules/QueueModule.html":{}}}],["queues.length",{"_index":2134,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues.map((queue",{"_index":2135,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues/user",{"_index":2251,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queues/walk",{"_index":2222,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queueschedulerservice",{"_index":1865,"title":{"injectables/QueueSchedulerService.html":{}},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"coverage.html":{},"overview.html":{}}}],["queuescontroller",{"_index":1868,"title":{"controllers/QueuesController.html":{}},"body":{"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queueservice",{"_index":1793,"title":{"injectables/QueueService.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":1743,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":1935,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.completed",{"_index":1960,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.pending",{"_index":1749,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.serving",{"_index":1948,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["range",{"_index":564,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["range')@useguards(jwtauthguard",{"_index":502,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["rate",{"_index":1963,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["re",{"_index":1042,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":2705,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":196,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":1334,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["ready_for_pickup",{"_index":1333,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["real",{"_index":2682,"title":{},"body":{"index.html":{}}}],["reason",{"_index":1941,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["reason_of_visit",{"_index":1772,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":423,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["received",{"_index":834,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["recent",{"_index":1574,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recently",{"_index":2459,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["recentusers",{"_index":1510,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["recentusers.map((user",{"_index":1577,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":1206,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["referencedcolumnname",{"_index":2422,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":2590,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2286,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["register",{"_index":744,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":840,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["register(registerdto",{"_index":798,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":799,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registerdto})@post('register",{"_index":803,"title":{},"body":{"controllers/AuthController.html":{}}}],["registration",{"_index":801,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["registration'})@apiresponse({status",{"_index":800,"title":{},"body":{"controllers/AuthController.html":{}}}],["reject",{"_index":1701,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["rejected",{"_index":1331,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["relation",{"_index":2072,"title":{},"body":{"injectables/QueueService.html":{}}}],["relation(user",{"_index":1558,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":414,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"injectables/AuthService.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":158,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":207,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["remove(id",{"_index":175,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(user.roles",{"_index":1560,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["replaces",{"_index":2358,"title":{},"body":{"injectables/RolesService.html":{}}}],["repository",{"_index":237,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":780,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":853,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":854,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["request",{"_index":761,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":2283,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["request.user?.roles",{"_index":2296,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requestwithuser",{"_index":747,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["required",{"_index":562,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["requiredroles",{"_index":2291,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":2299,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requires",{"_index":1337,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requires_additional_info",{"_index":1336,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requiring",{"_index":2650,"title":{},"body":{"index.html":{}}}],["reset",{"_index":222,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve(files",{"_index":1709,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["resources",{"_index":2661,"title":{},"body":{"index.html":{}}}],["response",{"_index":954,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["response.dto",{"_index":1722,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["response.dto.ts",{"_index":1712,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":2444,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1716,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:20",{"_index":2454,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:21",{"_index":1715,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:23",{"_index":2461,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:26",{"_index":2445,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:27",{"_index":1713,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2457,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:32",{"_index":2449,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:33",{"_index":1718,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:35",{"_index":2458,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:38",{"_index":2448,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:41",{"_index":2463,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:44",{"_index":2450,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:47",{"_index":2460,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:50",{"_index":2451,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:56",{"_index":2437,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:62",{"_index":2447,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:68",{"_index":2441,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:74",{"_index":2453,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:8",{"_index":2446,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:81",{"_index":2452,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:87",{"_index":2442,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1721,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:93",{"_index":2443,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["result",{"_index":676,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["result.affected",{"_index":678,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["result.length",{"_index":2141,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["results",{"_index":110,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1036,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieved",{"_index":784,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["retrieving",{"_index":1094,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":198,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":164,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["robert",{"_index":104,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["robert'})@isstring()@isoptional",{"_index":70,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["role",{"_index":35,"title":{"entities/Role.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["role'})@isoptional()@isstring",{"_index":2430,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["role.id",{"_index":1088,"title":{},"body":{"injectables/AuthService.html":{}}}],["role.name",{"_index":946,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["role_id",{"_index":2423,"title":{},"body":{"entities/User.html":{}}}],["roleid",{"_index":1075,"title":{},"body":{"injectables/AuthService.html":{}}}],["roleids",{"_index":19,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roleids.length",{"_index":1561,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolename",{"_index":1508,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["rolenames",{"_index":944,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["rolenames.includes(role",{"_index":2300,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["roles",{"_index":527,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":549,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["roles.controller",{"_index":2337,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":945,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":2320,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":2417,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":302,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["roles/roles.service",{"_index":917,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roles_key",{"_index":2288,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":2310,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":525,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesguard)@roles('admin",{"_index":496,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["rolesmodule",{"_index":289,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":2344,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":896,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["rolestats",{"_index":1565,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolestats.map((stat",{"_index":1571,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rollback",{"_index":985,"title":{},"body":{"injectables/AuthService.html":{}}}],["rolled",{"_index":990,"title":{},"body":{"injectables/AuthService.html":{}}}],["room",{"_index":2166,"title":{},"body":{"injectables/QueueService.html":{}}}],["rooms",{"_index":1856,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":2731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1902,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"index.html":{}}}],["runs",{"_index":2636,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2592,"title":{},"body":{"dependencies.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s",{"_index":994,"title":{},"body":{"injectables/AuthService.html":{}}}],["salt",{"_index":972,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["san",{"_index":52,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["sanitizedrecentusers",{"_index":1576,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["sanitizedusers",{"_index":1529,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["save",{"_index":2043,"title":{},"body":{"injectables/QueueService.html":{}}}],["saved",{"_index":2077,"title":{},"body":{"injectables/QueueService.html":{}}}],["saveddetails",{"_index":2074,"title":{},"body":{"injectables/QueueService.html":{}}}],["saveddetails.isguest",{"_index":2078,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue",{"_index":2050,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue.id",{"_index":2064,"title":{},"body":{"injectables/QueueService.html":{}}}],["scalable",{"_index":2615,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["schedulemodule.forroot",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["scheduler.service",{"_index":1872,"title":{},"body":{"modules/QueueModule.html":{}}}],["scheduler.service.ts",{"_index":1877,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["scheduler.service.ts:10",{"_index":1899,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:11",{"_index":1884,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:113",{"_index":1895,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:146",{"_index":1897,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:152",{"_index":1886,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:24",{"_index":1892,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["schema",{"_index":793,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["search",{"_index":1500,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["searching",{"_index":1922,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["secret",{"_index":883,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":1122,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["secretorkey",{"_index":1130,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["seeddatabaseifneeded",{"_index":2552,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":2607,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":690,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["select('role.name",{"_index":1567,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["send",{"_index":1854,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{}}}],["sequence",{"_index":2020,"title":{},"body":{"injectables/QueueService.html":{}}}],["served",{"_index":2102,"title":{},"body":{"injectables/QueueService.html":{}}}],["server",{"_index":1783,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["service",{"_index":2057,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["services/minio.service",{"_index":1469,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["serving",{"_index":1747,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["servingcount",{"_index":2105,"title":{},"body":{"injectables/QueueService.html":{}}}],["servingqueues",{"_index":1947,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.length",{"_index":1949,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.map(queue",{"_index":1951,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueueswithdetails",{"_index":2225,"title":{},"body":{"controllers/QueuesController.html":{}}}],["servingqueueswithdetails.length",{"_index":2229,"title":{},"body":{"controllers/QueuesController.html":{}}}],["set",{"_index":356,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["setmetadata(roles_key",{"_index":2736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2620,"title":{},"body":{"index.html":{}}}],["shouldupdatename",{"_index":1016,"title":{},"body":{"injectables/AuthService.html":{}}}],["side",{"_index":2616,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":885,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":2046,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["simplify",{"_index":2052,"title":{},"body":{"injectables/QueueService.html":{}}}],["single",{"_index":2117,"title":{},"body":{"injectables/QueueService.html":{}}}],["size",{"_index":1694,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["skip",{"_index":1515,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["skipping",{"_index":1912,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["slot",{"_index":731,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["slots",{"_index":492,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["smart",{"_index":1632,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["socket",{"_index":1799,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":1825,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["soft",{"_index":267,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":1109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["specific",{"_index":1043,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["specified",{"_index":687,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["sponsors",{"_index":2700,"title":{},"body":{"index.html":{}}}],["sql",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["sr",{"_index":1266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../appointment.entity.ts",{"_index":2602,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../counter.entity.ts",{"_index":2603,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":2723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../document",{"_index":2601,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2606,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":2604,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":2725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":270,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":275,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":273,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":368,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":369,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":740,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:102",{"_index":804,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:112",{"_index":788,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:134",{"_index":810,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:183",{"_index":779,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:63",{"_index":797,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":872,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":889,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:104",{"_index":907,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":897,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:206",{"_index":905,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:211",{"_index":903,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:239",{"_index":909,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":914,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:383",{"_index":900,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":906,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:538",{"_index":911,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":2542,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":2278,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1591,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:15",{"_index":1594,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:23",{"_index":1597,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":2262,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:22",{"_index":2266,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:30",{"_index":2277,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:40",{"_index":2275,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:48",{"_index":2268,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:56",{"_index":2271,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:64",{"_index":2270,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:72",{"_index":2272,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:80",{"_index":2273,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:87",{"_index":2264,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/update",{"_index":6,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":1584,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":2284,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:13",{"_index":2329,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:16",{"_index":2330,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1112,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":1589,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:35",{"_index":1590,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":2549,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":2550,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/announcement/announcement.controller.ts",{"_index":150,"title":{},"body":{"controllers/AnnouncementController.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.controller.ts:21",{"_index":162,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:26",{"_index":165,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:31",{"_index":171,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:36",{"_index":168,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:41",{"_index":181,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:49",{"_index":177,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.module.ts",{"_index":224,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["src/modules/announcement/announcement.service.ts",{"_index":233,"title":{},"body":{"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.service.ts:15",{"_index":240,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:24",{"_index":242,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:31",{"_index":243,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:43",{"_index":246,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:53",{"_index":245,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:59",{"_index":244,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:9",{"_index":238,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/dto/create",{"_index":1159,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/dto/update",{"_index":2363,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts",{"_index":115,"title":{},"body":{"entities/Announcement.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:12",{"_index":133,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:15",{"_index":141,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:18",{"_index":131,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:21",{"_index":137,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:24",{"_index":139,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:27",{"_index":129,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:30",{"_index":124,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:33",{"_index":143,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/appointment/appointment.controller.ts",{"_index":458,"title":{},"body":{"controllers/AppointmentController.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.controller.ts:110",{"_index":493,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:119",{"_index":486,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:125",{"_index":485,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:132",{"_index":511,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:157",{"_index":514,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:176",{"_index":508,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:44",{"_index":475,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:59",{"_index":481,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:66",{"_index":489,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:74",{"_index":506,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:82",{"_index":498,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:93",{"_index":503,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.module.ts",{"_index":602,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["src/modules/appointment/appointment.service.ts",{"_index":605,"title":{},"body":{"injectables/AppointmentService.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.service.ts:100",{"_index":621,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:114",{"_index":631,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:14",{"_index":613,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:149",{"_index":630,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:162",{"_index":632,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:177",{"_index":629,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:20",{"_index":617,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:209",{"_index":625,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:230",{"_index":627,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:253",{"_index":628,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:305",{"_index":616,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:330",{"_index":623,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:69",{"_index":618,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:78",{"_index":620,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:88",{"_index":622,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/dto/create",{"_index":1171,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/dto/update",{"_index":2368,"title":{},"body":{"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts",{"_index":416,"title":{},"body":{"entities/Appointment.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:22",{"_index":432,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:25",{"_index":428,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:28",{"_index":431,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:31",{"_index":435,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:34",{"_index":437,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:37",{"_index":425,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:40",{"_index":438,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:43",{"_index":439,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:46",{"_index":426,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:49",{"_index":429,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:56",{"_index":442,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:59",{"_index":448,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:66",{"_index":447,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:69",{"_index":434,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:72",{"_index":430,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:75",{"_index":443,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":1139,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":1149,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":1150,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":1152,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":1148,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":1147,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/document",{"_index":373,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/MinioService-1.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/dto/create",{"_index":1229,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":2377,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":1750,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":1723,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":1740,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":1742,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":1744,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":1733,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":1734,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":1729,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":1739,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":1737,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":1731,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue",{"_index":1876,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":2564,"title":{},"body":{"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":1780,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:23",{"_index":1796,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:26",{"_index":1794,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:34",{"_index":1800,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:39",{"_index":1804,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:44",{"_index":1814,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:51",{"_index":1807,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:57",{"_index":1811,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:63",{"_index":1817,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:70",{"_index":1821,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:75",{"_index":1819,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":1866,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":1970,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.service.ts:123",{"_index":1993,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:129",{"_index":1997,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:136",{"_index":2002,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:148",{"_index":1995,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:160",{"_index":2008,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:176",{"_index":2013,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:21",{"_index":1984,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:218",{"_index":2010,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:269",{"_index":2005,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:304",{"_index":1999,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:33",{"_index":1992,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:358",{"_index":1988,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:428",{"_index":2011,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:475",{"_index":1986,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:481",{"_index":2003,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:488",{"_index":1990,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:495",{"_index":2001,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queues.controller.ts",{"_index":2205,"title":{},"body":{"controllers/QueuesController.html":{},"coverage.html":{}}}],["src/modules/queue/queues.controller.ts:109",{"_index":2210,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:19",{"_index":2215,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:74",{"_index":2213,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":2301,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":2304,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":2302,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":2307,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":2303,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":2311,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":2314,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":2316,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":2319,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":2335,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":2339,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":2347,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":2350,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":2349,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":2351,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":2346,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":2343,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/services/minio.service.ts",{"_index":1598,"title":{},"body":{"injectables/MinioService.html":{},"coverage.html":{}}}],["src/services/minio.service.ts:22",{"_index":1611,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:46",{"_index":1609,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:59",{"_index":1606,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:6",{"_index":1613,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:7",{"_index":1615,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:8",{"_index":1604,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/users/dto/create",{"_index":1244,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/paginated",{"_index":1711,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":2387,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":2425,"title":{},"body":{"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":2391,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":2400,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":2398,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:23",{"_index":2415,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:26",{"_index":2409,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":2399,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":2405,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":2403,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:38",{"_index":2406,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:41",{"_index":2408,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":2393,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":2402,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":2394,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":2414,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:57",{"_index":2396,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:60",{"_index":2397,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:74",{"_index":2413,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":2466,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:106",{"_index":2485,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:121",{"_index":2483,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:135",{"_index":2488,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:153",{"_index":2473,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:46",{"_index":2475,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":2479,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":2481,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:80",{"_index":2477,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2519,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1498,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:108",{"_index":2525,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:210",{"_index":2532,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:220",{"_index":2533,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:230",{"_index":2531,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:273",{"_index":2528,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:280",{"_index":2529,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:287",{"_index":2526,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":2523,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":2527,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:87",{"_index":2530,"title":{},"body":{"injectables/UsersService.html":{}}}],["st",{"_index":51,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["staff",{"_index":478,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{}}}],["staff'].includes(role.name",{"_index":1439,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["start",{"_index":567,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["start:dev",{"_index":2625,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2626,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":504,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["started",{"_index":2609,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2618,"title":{},"body":{"index.html":{}}}],["starting",{"_index":1913,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday",{"_index":1896,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.todatestring",{"_index":1961,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.toisostring",{"_index":1924,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["stat.rolename",{"_index":1572,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["state",{"_index":988,"title":{},"body":{"injectables/AuthService.html":{}}}],["statement",{"_index":845,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["statements",{"_index":2537,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":557,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueSchedulerService.html":{},"controllers/UsersController.html":{}}}],["stats",{"_index":730,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["status",{"_index":276,"title":{},"body":{"controllers/AppController.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["status'})@isboolean",{"_index":2389,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status.dto",{"_index":2492,"title":{},"body":{"controllers/UsersController.html":{}}}],["status.dto.ts",{"_index":2388,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:10",{"_index":2390,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status_message",{"_index":405,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["statusdto",{"_index":1391,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.status",{"_index":1453,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.statusmessage",{"_index":1454,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statuses",{"_index":712,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["statushistory",{"_index":1284,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["statusmessage",{"_index":382,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["stay",{"_index":2686,"title":{},"body":{"index.html":{}}}],["steps",{"_index":2634,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":2648,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":1115,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1702,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('data",{"_index":1704,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('end",{"_index":1708,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('error",{"_index":1707,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["strength",{"_index":967,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":47,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":2146,"title":{},"body":{"injectables/QueueService.html":{}}}],["string(payload.email",{"_index":1135,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["string(todaycount",{"_index":2040,"title":{},"body":{"injectables/QueueService.html":{}}}],["structure",{"_index":2232,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sub",{"_index":948,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["submission",{"_index":1213,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["subscribemessage",{"_index":1823,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":1806,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('join_queue_updates",{"_index":1816,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":1810,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":1813,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subtype",{"_index":1197,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["success",{"_index":953,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{}}}],["successful",{"_index":792,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["successfully",{"_index":474,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":785,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":542,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1126,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":497,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@apioperation({summary",{"_index":479,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@post('admin/update",{"_index":777,"title":{},"body":{"controllers/AuthController.html":{}}}],["super_admin')@useguards(rolesguard)@apioperation({summary",{"_index":1369,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["super_admin'].includes(role.name",{"_index":582,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":2668,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supporting",{"_index":2217,"title":{},"body":{"controllers/QueuesController.html":{}}}],["svg",{"_index":2715,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2595,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":2569,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2568,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":268,"title":{},"body":{"injectables/AnnouncementService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["taken",{"_index":964,"title":{},"body":{"injectables/AuthService.html":{}}}],["target",{"_index":1058,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuser",{"_index":1059,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuserid",{"_index":748,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["temporarily",{"_index":2203,"title":{},"body":{"injectables/QueueService.html":{}}}],["term",{"_index":2432,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["test",{"_index":1595,"title":{},"body":{"classes/LoginDto.html":{},"index.html":{}}}],["test(password",{"_index":1100,"title":{},"body":{"injectables/AuthService.html":{}}}],["test:covdeployment",{"_index":2631,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2630,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":100,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isemail()@isnotempty",{"_index":2265,"title":{},"body":{"classes/RegisterDto.html":{}}}],["test@example.com'})@isemail()@isoptional",{"_index":60,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isnotempty",{"_index":1593,"title":{},"body":{"classes/LoginDto.html":{}}}],["testing",{"_index":1967,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["testminioconnection",{"_index":2553,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":2627,"title":{},"body":{"index.html":{}}}],["text",{"_index":130,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["thanks",{"_index":2699,"title":{},"body":{"index.html":{}}}],["this.announcementrepository.create",{"_index":252,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.find",{"_index":255,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.findone",{"_index":258,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.save(announcement",{"_index":254,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementservice.create(createannouncementdto",{"_index":199,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findall",{"_index":200,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findone(id",{"_index":204,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.getrecentannouncements(limit",{"_index":202,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.remove(id",{"_index":208,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.update(id",{"_index":206,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.appointmentrepository.count",{"_index":719,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.delete(id",{"_index":677,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.find",{"_index":656,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.findone",{"_index":658,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(appointment",{"_index":682,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(updated",{"_index":672,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentservice.create(createappointmentdto",{"_index":547,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findall",{"_index":551,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findallbyuser(user.id",{"_index":555,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findbyappointmentnumber(appointmentnumber",{"_index":575,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findone(+id",{"_index":573,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydate(date",{"_index":563,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydaterange",{"_index":569,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsstats",{"_index":558,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getavailableslots(date",{"_index":572,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.remove(+id",{"_index":598,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.update(+id",{"_index":586,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.updatestatus(+id",{"_index":594,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appservice.gethello",{"_index":279,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.adminupdateuser",{"_index":865,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.getprofile(number(req.user.id",{"_index":856,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":835,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(registerdto",{"_index":846,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.updateuserinfo",{"_index":858,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.bucketname",{"_index":1629,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.checktimeslotavailability(newdate",{"_index":668,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.configservice",{"_index":1674,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get",{"_index":1670,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('minio_port",{"_index":1672,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('ws_cors_origin",{"_index":1842,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.counterrepository.create",{"_index":2188,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.find",{"_index":2190,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.findone",{"_index":2149,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.save(counter",{"_index":2156,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.documentapplicationsservice.create(createdto",{"_index":1414,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall",{"_index":1459,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall(userid",{"_index":1441,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findone(id",{"_index":1447,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getallapplicationfiles",{"_index":1446,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationfiles",{"_index":1444,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationstats",{"_index":1461,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getfiledownloadurl",{"_index":1450,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.remove(id",{"_index":1455,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.update",{"_index":1451,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.updatestatus",{"_index":1452,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.uploadfile",{"_index":1436,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.ensurebucketexists",{"_index":1684,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.findone(id",{"_index":263,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.findone(queueid",{"_index":2083,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.generatealltimeslots",{"_index":701,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.getdetailsformultiplequeues(queueids",{"_index":2137,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getprofile(targetuserid",{"_index":1093,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getqueueposition(queueid",{"_index":2086,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(savedqueue.id",{"_index":2079,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.handledailyqueuereset",{"_index":1969,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isresetinprogress",{"_index":1909,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isvalidemail(email",{"_index":961,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isvalidemail(updateuserdto.email",{"_index":1003,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":951,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logdailystatistics(startofday",{"_index":1953,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.logger.error",{"_index":1954,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.logger.error('delete",{"_index":1648,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('error",{"_index":1689,"title":{},"body":{"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{}}}],["this.logger.error('get",{"_index":1646,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('upload",{"_index":1643,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.log",{"_index":593,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueSchedulerService.html":{}}}],["this.logger.log('fetching",{"_index":550,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`bucket",{"_index":1688,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`client",{"_index":1838,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`cors",{"_index":1841,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`creating",{"_index":546,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`deleting",{"_index":597,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`fetching",{"_index":554,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`file",{"_index":1641,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.logger.log(`minio",{"_index":1681,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`socket",{"_index":1850,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`updating",{"_index":585,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.warn",{"_index":1910,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.minioclient",{"_index":1617,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.bucketexists(this.bucketname",{"_index":1685,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.listobjects",{"_index":1703,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.makebucket(this.bucketname",{"_index":1686,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.presignedgetobject",{"_index":1644,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.putobject",{"_index":1634,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.removeobject(this.bucketname",{"_index":1647,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.statobject(this.bucketname",{"_index":1699,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.queuedetailsrepository.create",{"_index":2063,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.find",{"_index":2120,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.findone",{"_index":2084,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.save(queuedetails",{"_index":2075,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifycounterupdate(counterid",{"_index":2172,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(id",{"_index":2096,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(nextqueue.id",{"_index":2169,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(queue.id",{"_index":1939,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuegateway.server.emit('dailyqueuereset",{"_index":1945,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuegateway.server.emit('queuelistupdate",{"_index":2080,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.count",{"_index":1959,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["this.queuerepository.create",{"_index":2044,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.find",{"_index":1927,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["this.queuerepository.findone",{"_index":2081,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save",{"_index":1933,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.save(counter.currentqueue",{"_index":2153,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(nextqueue",{"_index":2162,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(queue",{"_index":2051,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.pending",{"_index":2226,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.serving",{"_index":2227,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findbyuseridwithdetails(userid",{"_index":2253,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findone(queueid",{"_index":2260,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":1846,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":1848,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.reflector.getallandoverride",{"_index":2292,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":2353,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findby",{"_index":2361,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":2354,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.assignrolestouser",{"_index":1079,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.assignrolestouser(id",{"_index":1562,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.assignrolestouser(user.id",{"_index":981,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.findall",{"_index":2322,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findbyname('citizen",{"_index":980,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findone(+id",{"_index":2323,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(roleid",{"_index":1076,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findone(updateuserdto.defaultroleid",{"_index":1083,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":2325,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(adminid",{"_index":1052,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(targetuserid",{"_index":1085,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":943,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(userid",{"_index":999,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.emit('counterlistupdate",{"_index":1861,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":1858,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":1860,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":1857,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.updateuserinfo(targetuserid",{"_index":1066,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository",{"_index":1517,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.count",{"_index":1564,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":977,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(id",{"_index":1563,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(user.id",{"_index":989,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.find",{"_index":1575,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":919,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":978,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(id",{"_index":1555,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(targetuserid",{"_index":1091,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.update(userid",{"_index":1033,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.adminupdate(+id",{"_index":2506,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(userwithhashedpassword",{"_index":2512,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":2497,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(req.user.id",{"_index":2498,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.id",{"_index":2514,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(userid",{"_index":2504,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getstats",{"_index":2499,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":2507,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updatestatus(+id",{"_index":2508,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validatepasswordstrength(password",{"_index":969,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepasswordstrength(updateuserdto.password",{"_index":1012,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":259,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":357,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["time_zone",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["timestamp",{"_index":1946,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["timezone",{"_index":1890,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["title",{"_index":120,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["today",{"_index":654,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["today's",{"_index":722,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["today.getdate",{"_index":1919,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.getfullyear()}${string(today.getmonth",{"_index":2022,"title":{},"body":{"injectables/QueueService.html":{}}}],["today.getmonth",{"_index":1918,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.sethours(0",{"_index":655,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todayappointments",{"_index":723,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todaycount",{"_index":2032,"title":{},"body":{"injectables/QueueService.html":{}}}],["todayend",{"_index":2030,"title":{},"body":{"injectables/QueueService.html":{}}}],["todayend.sethours(23",{"_index":2031,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart",{"_index":2027,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart.sethours(0",{"_index":2029,"title":{},"body":{"injectables/QueueService.html":{}}}],["token",{"_index":950,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tokens",{"_index":1119,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1676,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["tomorrow",{"_index":707,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["tomorrow.sethours(0",{"_index":709,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["total",{"_index":728,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["totalcount",{"_index":717,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["totalpages",{"_index":1532,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["totalusers",{"_index":1504,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["totalwaittimems",{"_index":2181,"title":{},"body":{"injectables/QueueService.html":{}}}],["touch",{"_index":2706,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":2435,"title":{},"body":{"classes/UserQueryDto.html":{},"dependencies.html":{}}}],["trigger",{"_index":1966,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["triggered",{"_index":1968,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["triggering",{"_index":2144,"title":{},"body":{"injectables/QueueService.html":{}}}],["true",{"_index":136,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["true})@joincolumn({name",{"_index":444,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":640,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["turn",{"_index":2168,"title":{},"body":{"injectables/QueueService.html":{}}}],["twitter",{"_index":2712,"title":{},"body":{"index.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1039,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["typeorm",{"_index":145,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":225,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":1470,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["typeormmodule.forfeature([announcement",{"_index":230,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["typeormmodule.forfeature([appointment",{"_index":604,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":1875,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":2338,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":888,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":2367,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["typescript",{"_index":926,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["ui",{"_index":2596,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":765,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorized'})@apibearerauth('jwt",{"_index":786,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":807,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":811,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('admin",{"_index":1050,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('insufficient",{"_index":1057,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":855,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('user",{"_index":998,"title":{},"body":{"injectables/AuthService.html":{}}}],["uncomment",{"_index":1403,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"injectables/UsersService.html":{}}}],["undefined})@apiresponse({status",{"_index":794,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray()@isoptional",{"_index":45,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["undefined})@isenum(applicationtype",{"_index":1204,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isobject",{"_index":1210,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isoptional()@isarray()@isnumber",{"_index":1272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unexpected",{"_index":1045,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":455,"title":{},"body":{"entities/Appointment.html":{},"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["uniqueness",{"_index":1537,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":2628,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":476,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2722,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":2489,"title":{},"body":{"controllers/UsersController.html":{}}}],["unused",{"_index":928,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["update",{"_index":11,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update'})@apibody({type",{"_index":755,"title":{},"body":{"controllers/AuthController.html":{}}}],["update(id",{"_index":178,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["updateannouncementdto",{"_index":179,"title":{"classes/UpdateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["updateappointmentdto",{"_index":509,"title":{"classes/UpdateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["updateappointmentdto.appointmentdate",{"_index":662,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updateappointmentdto.appointmenttime",{"_index":663,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updated",{"_index":669,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated'})@apiresponse({status",{"_index":758,"title":{},"body":{"controllers/AuthController.html":{}}}],["updated_at",{"_index":1310,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedat",{"_index":121,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{}}}],["updatedata",{"_index":1539,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.contactnumber",{"_index":1544,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.defaultroleid",{"_index":1547,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.email",{"_index":1540,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.firstname",{"_index":1542,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.lastname",{"_index":1543,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.middlename",{"_index":1545,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.name",{"_index":1553,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.nameextension",{"_index":1546,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.username",{"_index":1541,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedatecolumn",{"_index":142,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedatecolumn({name",{"_index":1309,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedocumentapplicationdto",{"_index":1389,"title":{"classes/UpdateDocumentApplicationDto.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["updatedqueue",{"_index":2095,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatedto",{"_index":1388,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["updateduser",{"_index":1034,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateduser.defaultrole?.name",{"_index":1037,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateprofile",{"_index":745,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["updateprofile(req",{"_index":805,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatequeuedto",{"_index":2012,"title":{"classes/UpdateQueueDto.html":{}},"body":{"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updatequeuedto.counternumber",{"_index":2093,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto.status",{"_index":2090,"title":{},"body":{"injectables/QueueService.html":{}}}],["updates",{"_index":1071,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"index.html":{}}}],["updatestatus",{"_index":466,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatus(id",{"_index":512,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatusdto",{"_index":2486,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatestatusdto.isactive",{"_index":2509,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":14,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.defaultroleid",{"_index":1082,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.email",{"_index":1002,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.firstname",{"_index":1018,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.lastname",{"_index":1022,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.middlename",{"_index":1020,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.nameextension",{"_index":1024,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.password",{"_index":1011,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids",{"_index":1072,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.includes(updateuserdto.defaultroleid",{"_index":1090,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.join",{"_index":1081,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.length",{"_index":1073,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.username",{"_index":1005,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto:22",{"_index":61,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:27",{"_index":86,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:37",{"_index":84,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:42",{"_index":65,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:47",{"_index":71,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:52",{"_index":68,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:60",{"_index":77,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:68",{"_index":59,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:76",{"_index":56,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto['name",{"_index":1032,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto})@useguards(jwtauthguard)@post('update",{"_index":809,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserinfo",{"_index":891,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserinfo(userid",{"_index":908,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserstatusdto",{"_index":2386,"title":{"classes/UpdateUserStatusDto.html":{}},"body":{"classes/UpdateUserStatusDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updating",{"_index":96,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["upload",{"_index":1399,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["uploaddocument",{"_index":1352,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaddocument(id",{"_index":1394,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaded",{"_index":1642,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploaded_at",{"_index":1493,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedat",{"_index":1475,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedfile",{"_index":1402,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploadfile",{"_index":1603,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploadfile(file",{"_index":1610,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploading",{"_index":1696,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["uppercase",{"_index":1103,"title":{},"body":{"injectables/AuthService.html":{}}}],["url",{"_index":1380,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["use",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["usefactory",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":515,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":538,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(rolesguard",{"_index":548,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":1401,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user",{"_index":12,"title":{"entities/User.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":752,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["user'})@isoptional()@isnumber",{"_index":1250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.defaultrole?.name",{"_index":956,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.defaultroleid",{"_index":983,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":817,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":7,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:102",{"_index":1251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":2382,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1277,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:36",{"_index":1271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":2385,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:42",{"_index":2383,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:44",{"_index":1257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:47",{"_index":2384,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:52",{"_index":1261,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:60",{"_index":1258,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1265,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:76",{"_index":1268,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:84",{"_index":1248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:90",{"_index":40,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":1274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":46,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":949,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1019,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":545,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{}}}],["user.lastname",{"_index":1023,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.middlename",{"_index":1021,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.nameextension",{"_index":1025,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":922,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":2306,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.roles.map((role",{"_index":1531,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.roles.some((role",{"_index":581,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["user.username",{"_index":1006,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user/:userid",{"_index":778,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["user?.id",{"_index":1440,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user?.roles.some((role",{"_index":1438,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user_id",{"_index":1312,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":2411,"title":{},"body":{"entities/User.html":{}}}],["userdetails",{"_index":2197,"title":{},"body":{"injectables/QueueService.html":{}}}],["userdetails.map((detail",{"_index":2199,"title":{},"body":{"injectables/QueueService.html":{}}}],["userid",{"_index":424,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{}}}],["useridnumber",{"_index":2192,"title":{},"body":{"injectables/QueueService.html":{}}}],["username",{"_index":28,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username'})@isoptional()@isstring",{"_index":2433,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["userquerydto",{"_index":2424,"title":{"classes/UserQueryDto.html":{}},"body":{"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userqueues",{"_index":2252,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.length",{"_index":2254,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.map((queue",{"_index":2255,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userresponsedto",{"_index":1719,"title":{"classes/UserResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userroles",{"_index":1084,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.map((role",{"_index":2298,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.some",{"_index":1087,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":1365,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Role.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":2520,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map((user",{"_index":1530,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":2491,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":449,"title":{},"body":{"entities/Appointment.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["usersbyrole",{"_index":1507,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["usersbyroledto",{"_index":2462,"title":{"classes/UsersByRoleDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userscontroller",{"_index":2465,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":290,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":898,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":1512,"title":{"injectables/UsersService.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstats",{"_index":1503,"title":{"interfaces/UserStats.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userstatsresponsedto",{"_index":2455,"title":{"classes/UserStatsResponseDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userwithhashedpassword",{"_index":2511,"title":{},"body":{"controllers/UsersController.html":{}}}],["userwithoutpassword",{"_index":955,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userwithroles",{"_index":2513,"title":{},"body":{"controllers/UsersController.html":{}}}],["usessl",{"_index":1622,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["usesslvalue",{"_index":1673,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["using",{"_index":359,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["valid",{"_index":942,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":960,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":1131,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validatepasswordstrength",{"_index":892,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatepasswordstrength(password",{"_index":910,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":893,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":913,"title":{},"body":{"injectables/AuthService.html":{}}}],["validating",{"_index":1118,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validation",{"_index":996,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{}}}],["validator",{"_index":93,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"dependencies.html":{}}}],["validity",{"_index":641,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["value",{"_index":172,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/UserQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":2100,"title":{},"body":{"injectables/QueueService.html":{}}}],["varchar",{"_index":126,"title":{},"body":{"entities/Announcement.html":{}}}],["variable",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["variables",{"_index":1125,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":929,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["verify",{"_index":1048,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":2720,"title":{},"body":{"properties.html":{}}}],["video",{"_index":2676,"title":{},"body":{"index.html":{}}}],["view",{"_index":2500,"title":{},"body":{"controllers/UsersController.html":{}}}],["visit",{"_index":2665,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":2679,"title":{},"body":{"index.html":{}}}],["void",{"_index":1802,"title":{},"body":{"classes/QueueGateway.html":{}}}],["wait",{"_index":2176,"title":{},"body":{"injectables/QueueService.html":{}}}],["waiting",{"_index":2158,"title":{},"body":{"injectables/QueueService.html":{}}}],["walk",{"_index":2249,"title":{},"body":{"controllers/QueuesController.html":{}}}],["watch",{"_index":2623,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":1063,"title":{},"body":{"injectables/AuthService.html":{}}}],["website",{"_index":2710,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":1822,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":1797,"title":{},"body":{"classes/QueueGateway.html":{}}}],["weekend",{"_index":645,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["weekends",{"_index":652,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["willbeassigned",{"_index":1089,"title":{},"body":{"injectables/AuthService.html":{}}}],["without",{"_index":2143,"title":{},"body":{"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":2664,"title":{},"body":{"index.html":{}}}],["world",{"_index":371,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":2689,"title":{},"body":{"index.html":{}}}],["xxx",{"_index":2035,"title":{},"body":{"injectables/QueueService.html":{}}}],["yes",{"_index":933,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["you'd",{"_index":2703,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2632,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":725,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["yyyymmdd",{"_index":2034,"title":{},"body":{"injectables/QueueService.html":{}}}],["zone",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":221,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for admin to update any user\n\n            \n\n            \n                Extends\n            \n            \n                            UpdateUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Default role ID for the user', example: 2})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of role IDs to assign to the user', example: undefined, type: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:76\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:52\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:47\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:60\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Announcement.html":{"url":"entities/Announcement.html","title":"entity - Announcement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Announcement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/entities/announcement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, default: 'admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 500, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('announcements')\nexport class Announcement {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'varchar', length: 500, nullable: true })\n  image: string;\n\n  @Column({ type: 'boolean', default: true })\n  isActive: boolean;\n\n  @Column({ type: 'varchar', length: 100, default: 'admin' })\n  createdBy: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnnouncementController.html":{"url":"controllers/AnnouncementController.html","title":"controller - AnnouncementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnnouncementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                announcements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                getRecentAnnouncements\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('recent')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseIntPipe,\n  Query,\n} from '@nestjs/common';\nimport { AnnouncementService } from './announcement.service';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Controller('announcements')\nexport class AnnouncementController {\n  constructor(private readonly announcementService: AnnouncementService) {}\n\n  @Post()\n  create(@Body() createAnnouncementDto: CreateAnnouncementDto) {\n    return this.announcementService.create(createAnnouncementDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.announcementService.findAll();\n  }\n\n  @Get('recent')\n  getRecentAnnouncements(@Query('limit', ParseIntPipe) limit: number = 5) {\n    return this.announcementService.getRecentAnnouncements(limit);\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAnnouncementDto: UpdateAnnouncementDto,\n  ) {\n    return this.announcementService.update(id, updateAnnouncementDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnnouncementModule.html":{"url":"modules/AnnouncementModule.html","title":"module - AnnouncementModule","body":"\n                   \n\n\n\n\n    Modules\n    AnnouncementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/announcement/announcement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnnouncementController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnnouncementService } from './announcement.service';\nimport { AnnouncementController } from './announcement.controller';\nimport { Announcement } from './entities/announcement.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Announcement])],\n  controllers: [AnnouncementController],\n  providers: [AnnouncementService],\n  exports: [AnnouncementService],\n})\nexport class AnnouncementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnnouncementService.html":{"url":"injectables/AnnouncementService.html","title":"injectable - AnnouncementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnnouncementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getRecentAnnouncements\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(announcementRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/announcement/announcement.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        announcementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Announcement } from './entities/announcement.entity';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Injectable()\nexport class AnnouncementService {\n  constructor(\n    @InjectRepository(Announcement)\n    private announcementRepository: Repository,\n  ) {}\n\n  async create(\n    createAnnouncementDto: CreateAnnouncementDto,\n  ): Promise {\n    const announcement = this.announcementRepository.create(\n      createAnnouncementDto,\n    );\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async findAll(): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const announcement = await this.announcementRepository.findOne({\n      where: { id, isActive: true },\n    });\n\n    if (!announcement) {\n      throw new NotFoundException(`Announcement with ID ${id} not found`);\n    }\n\n    return announcement;\n  }\n\n  async update(\n    id: number,\n    updateAnnouncementDto: UpdateAnnouncementDto,\n  ): Promise {\n    const announcement = await this.findOne(id);\n\n    Object.assign(announcement, updateAnnouncementDto);\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async remove(id: number): Promise {\n    const announcement = await this.findOne(id);\n    announcement.isActive = false; // Soft delete\n    await this.announcementRepository.save(announcement);\n  }\n\n  async getRecentAnnouncements(limit: number = 5): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n      take: limit,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnnouncementModule\n                        \n                        \n                            AppointmentModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DocumentApplicationsModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\nimport { AppointmentModule } from './modules/appointment/appointment.module';\nimport { AnnouncementModule } from './modules/announcement/announcement.module';\nimport { DocumentApplicationsModule } from './modules/document-applications/document-applications.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('DB_SYNCHRONIZE') === 'true', // Use environment variable\n        logging: configService.get('DB_LOGGING') === 'true', // Use environment variable\n        logger: 'advanced-console',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone using environment variable\n            await conn.query(`SET time_zone = '${configService.get('DB_TIMEZONE') || '+08:00'}';`);\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n    AppointmentModule,\n    AnnouncementModule,\n    DocumentApplicationsModule,\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ApplicationStatusHistory.html":{"url":"entities/ApplicationStatusHistory.html","title":"entity - ApplicationStatusHistory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ApplicationStatusHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/application-status-history.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                changedAt\n                            \n                            \n                                    \n                                changedBy\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                newStatus\n                            \n                            \n                                    \n                                oldStatus\n                            \n                            \n                                    \n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.statusHistory, {onDelete: 'CASCADE', nullable: false})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'changed_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'changed_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        newStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'new_status', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        oldStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'old_status', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('application_status_history')\n@Index(['applicationId'])\n@Index(['changedAt'])\nexport class ApplicationStatusHistory {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'old_status', length: 50, nullable: true })\n  oldStatus: string;\n\n  @Column({ name: 'new_status', length: 50 })\n  newStatus: string;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'changed_by', nullable: true })\n  changedBy: number;\n\n  @CreateDateColumn({ name: 'changed_at' })\n  changedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.statusHistory, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Appointment.html":{"url":"entities/Appointment.html","title":"entity - Appointment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Appointment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/entities/appointment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                appointmentNumber\n                            \n                            \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: AppointmentStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'userId', foreignKeyConstraintName: 'FK_appointment_user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:59\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\n\nexport enum AppointmentStatus {\n  PENDING = 'pending',\n  CONFIRMED = 'confirmed',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('appointments')\nexport class Appointment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  appointmentNumber: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ nullable: true })\n  middleInitial: string;\n\n  @Column()\n  address: string;\n\n  @Column()\n  phoneNumber: string;\n\n  @Column()\n  reasonOfVisit: string;\n\n  @Column({ type: 'date' })\n  appointmentDate: string;\n\n  @Column()\n  appointmentTime: string;\n\n  @Column({\n    type: 'enum',\n    enum: AppointmentStatus,\n    default: AppointmentStatus.PENDING,\n  })\n  status: AppointmentStatus;\n\n  @Column({ nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({\n    name: 'userId',\n    foreignKeyConstraintName: 'FK_appointment_user',\n  })\n  user: User;\n\n  @Column({ default: false })\n  isGuest: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppointmentController.html":{"url":"controllers/AppointmentController.html","title":"controller - AppointmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppointmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appointments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findUserAppointments\n                            \n                            \n                                    \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDateRange\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new appointment'})@ApiResponse({status: 201, description: 'Appointment created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all appointments (Admin/Staff only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-number/:number')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findUserAppointments\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserAppointments(user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('mine')@ApiOperation({summary: 'Get user appointments'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('available-slots')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDate(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-date')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDateRange(startDate: string, endDate: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('date-range')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Delete appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAppointmentDto: UpdateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: AppointmentStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query,\n  BadRequestException,\n  HttpCode,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { AppointmentService } from './appointment.service';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { AppointmentStatus } from './entities/appointment.entity';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\n\n@ApiTags('Appointments')\n@Controller('appointments')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class AppointmentController {\n  private readonly logger = new Logger(AppointmentController.name);\n\n  constructor(private readonly appointmentService: AppointmentService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new appointment' })\n  @ApiResponse({ status: 201, description: 'Appointment created successfully' })\n  async create(\n    @Body() createAppointmentDto: CreateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Set the userId from the authenticated user\n    createAppointmentDto.userId = user.id;\n\n    this.logger.log(`Creating appointment for user ${user.id}`);\n    return this.appointmentService.create(createAppointmentDto);\n  }\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all appointments (Admin/Staff only)' })\n  async findAll() {\n    this.logger.log('Fetching all appointments');\n    return this.appointmentService.findAll();\n  }\n\n  @Get('mine')\n  @ApiOperation({ summary: 'Get user appointments' })\n  async findUserAppointments(@User() user: AuthenticatedUser) {\n    this.logger.log(`Fetching appointments for user ${user.id}`);\n    return this.appointmentService.findAllByUser(user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getStats() {\n    this.logger.log('Fetching appointment statistics');\n    return this.appointmentService.getAppointmentsStats();\n  }\n\n  @Get('by-date')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDate(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching appointments for date: ${date}`);\n    return this.appointmentService.getAppointmentsByDate(date);\n  }\n\n  @Get('date-range')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDateRange(\n    @Query('start') startDate: string,\n    @Query('end') endDate: string,\n  ) {\n    if (!startDate || !endDate) {\n      throw new BadRequestException(\n        'Start and end date parameters are required',\n      );\n    }\n    this.logger.log(`Fetching appointments from ${startDate} to ${endDate}`);\n    return this.appointmentService.getAppointmentsByDateRange(\n      startDate,\n      endDate,\n    );\n  }\n\n  @Get('available-slots')\n  async getAvailableSlots(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching available slots for date: ${date}`);\n    return this.appointmentService.getAvailableSlots(date);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    this.logger.log(`Fetching appointment with ID: ${id}`);\n    return this.appointmentService.findOne(+id);\n  }\n\n  @Get('by-number/:number')\n  async findByAppointmentNumber(@Param('number') appointmentNumber: string) {\n    this.logger.log(`Fetching appointment with number: ${appointmentNumber}`);\n    return this.appointmentService.findByAppointmentNumber(appointmentNumber);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update appointment' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateAppointmentDto: UpdateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow update\n    if (\n      !user.roles.some((role) => ['admin', 'staff', 'super_admin'].includes(role.name)) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to update this appointment',\n      );\n    }\n\n    this.logger.log(`Updating appointment with ID: ${id}`);\n    return this.appointmentService.update(+id, updateAppointmentDto);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body('status') status: AppointmentStatus,\n  ) {\n    if (!Object.values(AppointmentStatus).includes(status)) {\n      throw new BadRequestException(\n        `Invalid status. Must be one of: ${Object.values(AppointmentStatus).join(', ')}`,\n      );\n    }\n\n    this.logger.log(\n      `Updating status for appointment with ID: ${id} to ${status}`,\n    );\n    return this.appointmentService.updateStatus(+id, status);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Delete appointment' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow deletion\n    if (\n      !user.roles.some((role) => ['admin', 'staff', 'super_admin'].includes(role.name)) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to delete this appointment',\n      );\n    }\n\n    this.logger.log(`Deleting appointment with ID: ${id}`);\n    await this.appointmentService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppointmentModule.html":{"url":"modules/AppointmentModule.html","title":"module - AppointmentModule","body":"\n                   \n\n\n\n\n    Modules\n    AppointmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\n\nAppointmentService \n\nAppointmentService \n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appointment/appointment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppointmentService } from './appointment.service';\nimport { AppointmentController } from './appointment.controller';\nimport { Appointment } from './entities/appointment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Appointment])],\n  controllers: [AppointmentController],\n  providers: [AppointmentService],\n  exports: [AppointmentService],\n})\nexport class AppointmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppointmentService.html":{"url":"injectables/AppointmentService.html","title":"injectable - AppointmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppointmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkTimeSlotAvailability\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                generateAllTimeSlots\n                            \n                            \n                                    Async\n                                getAppointmentsByDate\n                            \n                            \n                                    Async\n                                getAppointmentsByDateRange\n                            \n                            \n                                    Async\n                                getAppointmentsStats\n                            \n                            \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appointmentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appointment/appointment.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appointmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkTimeSlotAvailability\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeSlotAvailability(date: string, time: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:305\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                time\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateAllTimeSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAllTimeSlots()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:330\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     string[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDate(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDateRange(startDate: string, endDate: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:230\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:253\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, status: AppointmentStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Appointment, AppointmentStatus } from './entities/appointment.entity';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { format, addDays, parseISO, isValid } from 'date-fns';\n\n@Injectable()\nexport class AppointmentService {\n  constructor(\n    @InjectRepository(Appointment)\n    private appointmentRepository: Repository,\n  ) {}\n\n  async create(\n    createAppointmentDto: CreateAppointmentDto,\n  ): Promise {\n    try {\n      // Check date validity\n      const date = parseISO(createAppointmentDto.appointmentDate);\n      if (!isValid(date)) {\n        throw new BadRequestException('Invalid appointment date');\n      }\n\n      // Check if date is a weekend\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        throw new BadRequestException('Cannot book appointments on weekends');\n      }\n\n      // Check if date is in the past\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      if (date  {\n    return this.appointmentRepository.find({\n      order: {\n        appointmentDate: 'ASC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findAllByUser(userId: number): Promise {\n    return this.appointmentRepository.find({\n      where: { userId },\n      order: {\n        appointmentDate: 'DESC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { id },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment with ID ${id} not found`);\n    }\n\n    return appointment;\n  }\n\n  async findByAppointmentNumber(\n    appointmentNumber: string,\n  ): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { appointmentNumber },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment ${appointmentNumber} not found`);\n    }\n\n    return appointment;\n  }\n\n  async update(\n    id: number,\n    updateAppointmentDto: UpdateAppointmentDto,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n\n      // If changing date or time, check availability\n      if (\n        updateAppointmentDto.appointmentDate ||\n        updateAppointmentDto.appointmentTime\n      ) {\n        const newDate =\n          updateAppointmentDto.appointmentDate || appointment.appointmentDate;\n        const newTime =\n          updateAppointmentDto.appointmentTime || appointment.appointmentTime;\n\n        if (\n          newDate !== appointment.appointmentDate ||\n          newTime !== appointment.appointmentTime\n        ) {\n          await this.checkTimeSlotAvailability(newDate, newTime);\n        }\n      }\n\n      // Update the appointment\n      const updated = Object.assign(appointment, updateAppointmentDto);\n      console.log(`Updated appointment ${id}:`, updated);\n      return this.appointmentRepository.save(updated);\n    } catch (error) {\n      console.error(`Error updating appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async remove(id: number): Promise {\n    try {\n      const result = await this.appointmentRepository.delete(id);\n      if (result.affected === 0) {\n        throw new NotFoundException(`Appointment with ID ${id} not found`);\n      }\n      console.log(`Deleted appointment ${id}`);\n    } catch (error) {\n      console.error(`Error deleting appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async updateStatus(\n    id: number,\n    status: AppointmentStatus,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n      appointment.status = status;\n      console.log(`Updated status for appointment ${id} to ${status}`);\n      return this.appointmentRepository.save(appointment);\n    } catch (error) {\n      console.error(`Error updating status for appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getAvailableSlots(date: string): Promise {\n    try {\n      // Parse the date\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      // Get all appointments for the specified date\n      const existingAppointments = await this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n        select: ['appointmentTime'],\n      });\n\n      const bookedSlots = existingAppointments.map(\n        (app) => app.appointmentTime,\n      );\n\n      // Generate all time slots (8:00 AM - 5:00 PM with 30min intervals)\n      const allTimeSlots = this.generateAllTimeSlots();\n\n      // Return only available slots\n      return allTimeSlots.filter((slot) => !bookedSlots.includes(slot));\n    } catch (error) {\n      console.error(`Error getting available slots for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDate(date: string): Promise {\n    try {\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n        },\n        order: {\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      console.error(`Error getting appointments for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDateRange(\n    startDate: string,\n    endDate: string,\n  ): Promise {\n    try {\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: Between(startDate, endDate),\n        },\n        order: {\n          appointmentDate: 'ASC',\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      console.error(\n        `Error getting appointments in range ${startDate} to ${endDate}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async getAppointmentsStats() {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      const tomorrow = addDays(today, 1);\n      tomorrow.setHours(0, 0, 0, 0);\n\n      // Get counts for different statuses\n      const [\n        pendingCount,\n        confirmedCount,\n        completedCount,\n        cancelledCount,\n        totalCount,\n      ] = await Promise.all([\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.PENDING },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CONFIRMED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.COMPLETED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CANCELLED },\n        }),\n        this.appointmentRepository.count(),\n      ]);\n\n      // Get today's appointments\n      const todayAppointments = await this.appointmentRepository.count({\n        where: {\n          appointmentDate: format(today, 'yyyy-MM-dd'),\n        },\n      });\n\n      return {\n        pending: pendingCount,\n        confirmed: confirmedCount,\n        completed: completedCount,\n        cancelled: cancelledCount,\n        total: totalCount,\n        today: todayAppointments,\n      };\n    } catch (error) {\n      console.error('Error getting appointment stats:', error);\n      throw error;\n    }\n  }\n\n  private async checkTimeSlotAvailability(\n    date: string,\n    time: string,\n  ): Promise {\n    try {\n      // Check if time slot is already booked\n      const existingAppointment = await this.appointmentRepository.findOne({\n        where: {\n          appointmentDate: date,\n          appointmentTime: time,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n      });\n\n      if (existingAppointment) {\n        throw new BadRequestException('This time slot is already booked');\n      }\n    } catch (error) {\n      console.error(\n        `Error checking time slot availability for ${date} at ${time}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n  private generateAllTimeSlots(): string[] {\n    const slots: string[] = [];\n    let hour = 8;\n    let minute = 0;\n\n    while (hour \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(req: RequestWithUser, targetUserId: string, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin update user', description: 'Allows administrators to update any user's information including role assignments'})@ApiParam({name: 'userId', description: 'ID of the user to update'})@ApiBody({type: AdminUpdateUserDto})@ApiResponse({status: 200, description: 'User successfully updated'})@ApiResponse({status: 400, description: 'Bad request - invalid input data'})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiResponse({status: 403, description: 'Forbidden - insufficient permissions'})@ApiResponse({status: 404, description: 'Not found - user or role not found'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@Post('admin/update-user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User login'})@ApiResponse({status: 200, description: 'Login successful', schema: undefined})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiBody({type: LoginDto})@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User registration'})@ApiResponse({status: 201, description: 'Registration successful', schema: undefined})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBody({type: RegisterDto})@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: RequestWithUser, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update user profile', description: 'Allows a user to update their own profile information'})@ApiResponse({status: 200, description: 'Profile updated successfully'})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@ApiBody({type: UpdateUserDto})@UseGuards(JwtAuthGuard)@Post('update-profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport { AuthenticatedUser } from './jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\n\ninterface RequestWithUser extends Request {\n  user: AuthenticatedUser;\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.id));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.id),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.id),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: '1d' },\n        };\n      },\n    }),\n    TypeOrmModule.forFeature([User]),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                updateUserInfo\n                            \n                            \n                                    Private\n                                validatePasswordStrength\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(adminId: number, targetUserId: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:383\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                adminId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:211\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:206\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserInfo(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:239\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validatePasswordStrength\n                        \n                    \n                \n            \n            \n                \n                        \n                    validatePasswordStrength(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:538\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    const passwordValidation = this.validatePasswordStrength(password);\n    if (!passwordValidation.isValid) {\n      throw new BadRequestException(passwordValidation.message);\n    }\n\n    // Hash password\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    try {\n      // Create new user with all fields\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password: hashedPassword,\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name,\n      });\n\n      await this.usersRepository.save(user);\n\n      // Add citizen role to the user\n      try {\n        const citizenRole = await this.rolesService.findByName('citizen');\n        await this.rolesService.assignRolesToUser(user.id, [citizenRole.id]);\n\n        // Set default role\n        user.defaultRoleId = citizenRole.id;\n        await this.usersRepository.save(user);\n      } catch (error) {\n        console.error('Error assigning citizen role:', error);\n        // Rollback: Delete the user to maintain a consistent state\n        await this.usersRepository.delete(user.id);\n        throw new ConflictException(\n          'Failed to assign citizen role. Registration rolled back.',\n        );\n      }\n\n      // Generate JWT token\n      const payload = { sub: user.id, email: user.email, roles: ['citizen'] };\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: this.jwtService.sign(payload),\n        user: {\n          ...userWithoutPassword,\n          roles: ['citizen'],\n          defaultRole: 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  async getProfile(userId: number) {\n    // Validation for userId\n    if (!userId || isNaN(userId)) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['defaultRole'],\n    });\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    // Get user roles\n    const roles = await this.rolesService.getUserRoles(userId);\n    const roleNames = roles.map((role) => role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  async updateUserInfo(userId: number, updateUserDto: UpdateUserDto) {\n    try {\n      // First get the existing user\n      const user = await this.usersRepository.findOne({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('User not found');\n      }\n\n      // Check if email is being updated and not already taken\n      if (updateUserDto.email && updateUserDto.email !== user.email) {\n        // Validate email format\n        if (!this.isValidEmail(updateUserDto.email)) {\n          throw new BadRequestException('Invalid email format');\n        }\n\n        const existingUserByEmail = await this.usersRepository.findOne({\n          where: { email: updateUserDto.email },\n        });\n\n        if (existingUserByEmail && existingUserByEmail.id !== userId) {\n          throw new ConflictException('Email already exists');\n        }\n      }\n\n      // Check if username is being updated and not already taken\n      if (updateUserDto.username && updateUserDto.username !== user.username) {\n        const existingUserByUsername = await this.usersRepository.findOne({\n          where: { username: updateUserDto.username },\n        });\n\n        if (existingUserByUsername && existingUserByUsername.id !== userId) {\n          throw new ConflictException('Username already exists');\n        }\n      }\n\n      // Handle password change if provided\n      if (updateUserDto.password) {\n        // Validate password strength\n        const passwordValidation = this.validatePasswordStrength(updateUserDto.password);\n        if (!passwordValidation.isValid) {\n          throw new BadRequestException(passwordValidation.message);\n        }\n\n        // Hash new password\n        const salt = await bcrypt.genSalt();\n        const hashedPassword = await bcrypt.hash(updateUserDto.password, salt);\n        updateUserDto.password = hashedPassword;\n      } else {\n        // Remove password from DTO if not being updated\n        delete updateUserDto.password;\n      }\n\n      // Update name if name parts are changed\n      let shouldUpdateName = false;\n      const nameComponents = {\n        firstName: updateUserDto.firstName || user.firstName,\n        middleName:\n          updateUserDto.middleName !== undefined\n            ? updateUserDto.middleName\n            : user.middleName,\n        lastName: updateUserDto.lastName || user.lastName,\n        nameExtension:\n          updateUserDto.nameExtension !== undefined\n            ? updateUserDto.nameExtension\n            : user.nameExtension,\n      };\n\n      if (\n        updateUserDto.firstName ||\n        updateUserDto.middleName !== undefined ||\n        updateUserDto.lastName ||\n        updateUserDto.nameExtension !== undefined\n      ) {\n        shouldUpdateName = true;\n      }\n\n      // Generate full name if any name component changed\n      if (shouldUpdateName) {\n        const fullName = `${nameComponents.firstName} ${\n          nameComponents.middleName ? nameComponents.middleName + ' ' : ''\n        }${nameComponents.lastName}${\n          nameComponents.nameExtension ? ' ' + nameComponents.nameExtension : ''\n        }`;\n        updateUserDto['name'] = fullName;\n      }\n\n      try {\n        // Update user with all provided fields\n        await this.usersRepository.update(userId, updateUserDto);\n\n        // Get updated user with relations\n        const updatedUser = await this.usersRepository.findOne({\n          where: { id: userId },\n          relations: ['defaultRole'],\n        });\n\n        if (!updatedUser) {\n          throw new BadRequestException('Failed to retrieve updated user');\n        }\n\n        // Get user roles\n        const roles = await this.rolesService.getUserRoles(userId);\n        const roleNames = roles.map((role) => role.name);\n\n        // Remove password from response\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { password: __password, ...result } = updatedUser;\n\n        return {\n          ...result,\n          roles: roleNames,\n          defaultRole: updatedUser.defaultRole?.name || 'citizen',\n        };\n      } catch (error: unknown) {\n        console.error('User update database error:', error);\n        if (\n          typeof error === 'object' &&\n          error !== null &&\n          'code' in error &&\n          error.code === 'ER_DUP_ENTRY'\n        ) {\n          throw new ConflictException('Email or username already exists');\n        }\n        throw new BadRequestException(\n          'Failed to update user information in database',\n        );\n      }\n    } catch (error) {\n      console.error('User update error:', error);\n      // Re-throw specific errors\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n      // For any other unexpected error\n      throw new BadRequestException('Failed to update user information');\n    }\n  }\n  async adminUpdateUser(\n    adminId: number,\n    targetUserId: number,\n    updateUserDto: AdminUpdateUserDto,\n  ) {\n    console.log(\n      `Admin ${adminId} attempting to update user ${targetUserId}`,\n      updateUserDto,\n    );\n\n    try {\n      // Verify the admin has proper permissions\n      const admin = await this.usersRepository.findOne({\n        where: { id: adminId },\n      });\n\n      if (!admin) {\n        throw new UnauthorizedException('Admin not found');\n      }\n\n      // Get admin roles\n      const adminRoles = await this.rolesService.getUserRoles(adminId);\n      const adminRoleNames = adminRoles.map((role) => role.name);\n\n      // Check if the user has admin or super_admin role\n      const isAuthorized = adminRoleNames.some(\n        (role) => role === 'admin' || role === 'super_admin',\n      );\n\n      if (!isAuthorized) {\n        throw new UnauthorizedException('Insufficient permissions');\n      }\n\n      // Check if target user exists\n      const targetUser = await this.usersRepository.findOne({\n        where: { id: targetUserId },\n      });\n\n      if (!targetUser) {\n        throw new BadRequestException(`User with ID ${targetUserId} not found`);\n      }\n\n      // First perform the basic user update\n      // We'll catch any errors here to handle them appropriately\n      try {\n        await this.updateUserInfo(targetUserId, updateUserDto);\n      } catch (err) {\n        console.error('Error during basic user update:', err);\n        throw err; // Re-throw to be caught by outer try-catch\n      }\n\n      // Handle role updates if provided\n      if (updateUserDto.roleIds && updateUserDto.roleIds.length > 0) {\n        try {\n          // Verify all roles exist before assigning\n          for (const roleId of updateUserDto.roleIds) {\n            try {\n              await this.rolesService.findOne(roleId);\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (_) {\n              throw new BadRequestException(`Role with ID ${roleId} not found`);\n            }\n          }\n\n          // Assign roles\n          await this.rolesService.assignRolesToUser(\n            targetUserId,\n            updateUserDto.roleIds,\n          );\n          console.log(\n            `Assigned roles ${updateUserDto.roleIds.join(', ')} to user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error assigning roles:', error);\n          throw new BadRequestException(\n            error instanceof Error ? error.message : 'Failed to assign roles',\n          );\n        }\n      }\n\n      // Update default role if provided\n      if (updateUserDto.defaultRoleId) {\n        try {\n          // Verify the role exists\n          try {\n            await this.rolesService.findOne(updateUserDto.defaultRoleId);\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          } catch (_) {\n            throw new BadRequestException(\n              `Default role with ID ${updateUserDto.defaultRoleId} not found`,\n            );\n          }\n\n          // Verify user has this role assigned or will have it assigned\n          const userRoles = await this.rolesService.getUserRoles(targetUserId);\n          const hasRoleAssigned = userRoles.some(\n            (role) => role.id === updateUserDto.defaultRoleId,\n          );\n\n          const willBeAssigned =\n            updateUserDto.roleIds &&\n            updateUserDto.roleIds.includes(updateUserDto.defaultRoleId);\n\n          if (!hasRoleAssigned && !willBeAssigned) {\n            throw new BadRequestException(\n              'Cannot set default role to a role the user does not have',\n            );\n          }\n\n          // Update the default role\n          await this.usersRepository.update(targetUserId, {\n            defaultRoleId: updateUserDto.defaultRoleId,\n          });\n          console.log(\n            `Updated default role to ${updateUserDto.defaultRoleId} for user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error updating default role:', error);\n          throw new BadRequestException(\n            error instanceof Error\n              ? error.message\n              : 'Failed to update default role',\n          );\n        }\n      }\n\n      // Return the fully updated user\n      try {\n        const updatedUser = await this.getProfile(targetUserId);\n        return updatedUser;\n      } catch (error) {\n        console.error('Error retrieving updated user profile:', error);\n        throw new BadRequestException(\n          'User was updated but profile could not be retrieved',\n        );\n      }\n    } catch (error) {\n      console.error('Admin update user error:', error);\n\n      // Re-throw specific exceptions\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      // For any other errors\n      throw new BadRequestException(\n        'Failed to update user: Unexpected error occurred',\n      );\n    }\n  }\n\n  private validatePasswordStrength(password: string): { isValid: boolean; message?: string } {\n    if (!password) {\n      return { isValid: false, message: 'Password is required' };\n    }\n\n    if (password.length ]/.test(password);\n\n    if (!hasUpperCase) {\n      return { isValid: false, message: 'Password must contain at least one uppercase letter' };\n    }\n\n    if (!hasLowerCase) {\n      return { isValid: false, message: 'Password must contain at least one lowercase letter' };\n    }\n\n    if (!hasNumbers) {\n      return { isValid: false, message: 'Password must contain at least one number' };\n    }\n\n    if (!hasSpecialChars) {\n      return { isValid: false, message: 'Password must contain at least one special character (!@#$%^&*(),.?\":{}|<>)' };\n    }\n\n    return { isValid: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedUser.html":{"url":"interfaces/AuthenticatedUser.html","title":"interface - AuthenticatedUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnnouncementDto.html":{"url":"classes/CreateAnnouncementDto.html","title":"class - CreateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/create-announcement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsBoolean } from 'class-validator';\n\nexport class CreateAnnouncementDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsString()\n  createdBy?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAppointmentDto.html":{"url":"classes/CreateAppointmentDto.html","title":"class - CreateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/create-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsOptional,\n  IsEnum,\n  IsDateString,\n} from 'class-validator';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class CreateAppointmentDto {\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @IsOptional()\n  @IsString()\n  middleInitial: string;\n\n  @IsNotEmpty()\n  @IsString()\n  address: string;\n\n  @IsNotEmpty()\n  @IsString()\n  phoneNumber: string;\n\n  @IsNotEmpty()\n  @IsString()\n  reasonOfVisit: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  appointmentDate: string;\n\n  @IsNotEmpty()\n  @IsString()\n  appointmentTime: string;\n\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n\n  @IsOptional()\n  userId?: number;\n\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDocumentApplicationDto.html":{"url":"classes/CreateDocumentApplicationDto.html","title":"class - CreateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/create-document-application.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                applicationSubtype\n                            \n                            \n                                    \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                    \n                                formData\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application subtype (optional)', example: 'Copy of Birth Certificate', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationType, description: 'Type of document application', example: undefined})@IsEnum(ApplicationType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Form data containing all application details', example: undefined})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional status message', example: 'Initial application submission', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional, IsObject, IsString } from 'class-validator';\nimport { ApplicationType } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateDocumentApplicationDto {\n  @ApiProperty({\n    enum: ApplicationType,\n    description: 'Type of document application',\n    example: ApplicationType.BIRTH_CERTIFICATE,\n  })\n  @IsEnum(ApplicationType)\n  applicationType: ApplicationType;\n\n  @ApiProperty({\n    description: 'Application subtype (optional)',\n    example: 'Copy of Birth Certificate',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  applicationSubtype?: string;\n\n  @ApiProperty({\n    description: 'Form data containing all application details',\n    example: {\n      firstName: 'Juan',\n      lastName: 'Dela Cruz',\n      birthDate: '1990-01-01',\n      birthPlace: 'Manila',\n    },\n  })\n  @IsObject()\n  formData: Record;\n\n  @ApiProperty({\n    description: 'Optional status message',\n    example: 'Initial application submission',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsOptional()\n  userId?: number | string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '+639123456789', description: 'Contact number'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID for the user'})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name (optional)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'John Miguel Doe Jr.', description: 'Full name (auto-generated if not provided)'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension (e.g., Jr., Sr., III)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password123', description: 'User password (minimum 6 characters)', minLength: 6})@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: undefined, description: 'Array of role IDs to assign to the user', type: undefined})@IsOptional()@IsArray()@IsNumber({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username (optional, will use email if not provided)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  MinLength,\n  IsArray,\n  IsNumber,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username (optional, will use email if not provided)',\n  })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({\n    example: 'password123',\n    description: 'User password (minimum 6 characters)',\n    minLength: 6,\n  })\n  @IsString()\n  @MinLength(6)\n  password: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name (optional)',\n  })\n  @IsOptional()\n  @IsString()\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    example: 'John Miguel Doe Jr.',\n    description: 'Full name (auto-generated if not provided)',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension (e.g., Jr., Sr., III)',\n  })\n  @IsOptional()\n  @IsString()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  @IsOptional()\n  @IsString()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    example: [2, 3],\n    description: 'Array of role IDs to assign to the user',\n    type: [Number],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  roleIds?: number[];\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID for the user',\n  })\n  @IsOptional()\n  @IsNumber()\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentApplication.html":{"url":"entities/DocumentApplication.html","title":"entity - DocumentApplication","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-application.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                applicationSubtype\n                            \n                            \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                files\n                            \n                            \n                                    \n                                formData\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastModifiedBy\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                statusHistory\n                            \n                            \n                                    \n                                statusMessage\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_subtype', length: 100, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationType, name: 'application_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.application, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'form_data', type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastModifiedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_modified_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusHistory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatusHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, history => history.application, {cascade: false, eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\nimport { DocumentFile } from './document-file.entity';\nimport { ApplicationStatusHistory } from './application-status-history.entity';\n\nexport enum ApplicationType {\n  BIRTH_CERTIFICATE = 'Birth Certificate',\n  MARRIAGE_CERTIFICATE = 'Marriage Certificate',\n  MARRIAGE_LICENSE = 'Marriage License',\n  DEATH_CERTIFICATE = 'Death Certificate',\n  BUSINESS_PERMIT = 'Business Permit',\n}\n\nexport enum ApplicationStatus {\n  PENDING = 'Pending',\n  PROCESSING = 'Processing',\n  APPROVED = 'Approved',\n  REJECTED = 'Rejected',\n  DECLINE = 'Decline',\n  READY_FOR_PICKUP = 'Ready for Pickup',\n  REQUIRES_ADDITIONAL_INFO = 'Requires Additional Info',\n}\n\n@Entity('document_applications')\n@Index(['userId'])\n@Index(['applicationType'])\n@Index(['status'])\n@Index(['createdAt'])\nexport class DocumentApplication {\n  @PrimaryColumn({ length: 50 })\n  id: string;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationType,\n    name: 'application_type',\n  })\n  applicationType: ApplicationType;\n\n  @Column({ name: 'application_subtype', length: 100, nullable: true })\n  applicationSubtype: string;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationStatus,\n    default: ApplicationStatus.PENDING,\n  })\n  status: ApplicationStatus;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'form_data', type: 'json' })\n  formData: Record;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @Column({ name: 'last_modified_by', nullable: true })\n  lastModifiedBy: number;\n\n  // Relations\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({ name: 'user_id' })\n  user: User;\n\n  @OneToMany(() => DocumentFile, (file) => file.application, { cascade: true })\n  files: DocumentFile[];\n\n  @OneToMany(() => ApplicationStatusHistory, (history) => history.application, {\n    cascade: false,\n    eager: false,\n  })\n  statusHistory: ApplicationStatusHistory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentApplicationsController.html":{"url":"controllers/DocumentApplicationsController.html","title":"controller - DocumentApplicationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentApplicationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                document-applications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplications\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getFileDownloadUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadDocument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new document application'})@ApiResponse({status: 201, description: 'Application created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(status?: string, user?: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get user applications'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get specific application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files/all')@ApiOperation({summary: 'Get all application files (privileged users only)'})@ApiResponse({status: 200, description: 'All files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplications\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplications()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/all')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get all applications (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:241\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files')@ApiOperation({summary: 'Get application files (latest per category)'})@ApiResponse({status: 200, description: 'Files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getFileDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileDownloadUrl(fileId: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:fileId/download')@ApiOperation({summary: 'Get file download URL'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/stats')@Roles('admin', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get application statistics (Admin/Super Admin only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:249\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:226\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, statusDto: literal type, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Update application status (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:211\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                statusDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        uploadDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadDocument(id: string, file: Express.Multer.File, documentCategory: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/files')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiOperation({summary: 'Upload document file'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                documentCategory\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Query,\n  UseGuards,\n  //Request, // Uncomment if you need to use Request object\n  BadRequestException,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { CreateDocumentApplicationDto } from './dto/create-document-application.dto';\nimport { UpdateDocumentApplicationDto } from './dto/update-document-application.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport { ApplicationStatus } from './entities/document-application.entity';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiConsumes,\n} from '@nestjs/swagger';\n\n@ApiTags('Document Applications')\n@Controller('document-applications')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class DocumentApplicationsController {\n  constructor(\n    private readonly documentApplicationsService: DocumentApplicationsService,\n  ) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new document application' })\n  @ApiResponse({ status: 201, description: 'Application created successfully' })\n  async create(\n    @Body() createDto: CreateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.create(createDto, user.id);\n  }\n\n  @Post(':id/files')\n  @UseInterceptors(\n    FileInterceptor('file', {\n      limits: {\n        fileSize: 10 * 1024 * 1024, // 10MB limit\n      },\n      fileFilter: (req, file, callback) => {\n        if (!file.mimetype.match(/\\/(jpg|jpeg|png|pdf)$/)) {\n          return callback(\n            new BadRequestException(\n              'Only JPEG, PNG, and PDF files are allowed',\n            ),\n            false,\n          );\n        }\n        callback(null, true);\n      },\n    }),\n  )\n  @ApiConsumes('multipart/form-data')\n  @ApiOperation({ summary: 'Upload document file' })\n  async uploadDocument(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n    @Body('documentCategory') documentCategory: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    console.log('Received document category:', documentCategory); // Debug log\n\n    if (!documentCategory) {\n      throw new BadRequestException('Document category is required');\n    }\n\n    return this.documentApplicationsService.uploadFile(\n      id,\n      file,\n      documentCategory,\n      user.id,\n    );\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get user applications' })\n  async findAll(\n    @Query('status') status?: string,\n    @User() user?: AuthenticatedUser,\n  ) {\n    const userId = user?.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user?.id;\n    return this.documentApplicationsService.findAll(userId);\n  }\n\n  @Get(':id/files')\n  @ApiOperation({ summary: 'Get application files (latest per category)' })\n  @ApiResponse({ status: 200, description: 'Files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    console.log(\n      `Getting files for application ${id}, user: ${user.email}, isPrivileged: ${!userId}`,\n    );\n\n    return await this.documentApplicationsService.getApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id/files/all')\n  @ApiOperation({ summary: 'Get all application files (privileged users only)' })\n  @ApiResponse({ status: 200, description: 'All files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getAllApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    return await this.documentApplicationsService.getAllApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get specific application' })\n  async findOne(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    return this.documentApplicationsService.findOne(id, userId);\n  }\n\n  @Get('files/:fileId/download')\n  @ApiOperation({ summary: 'Get file download URL' })\n  async getFileDownloadUrl(\n    @Param('fileId') fileId: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const url = await this.documentApplicationsService.getFileDownloadUrl(\n      +fileId,\n      userId,\n    );\n    return { url };\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update application' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: UpdateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const adminId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? user.id\n      : undefined;\n\n    return this.documentApplicationsService.update(\n      id,\n      updateDto,\n      userId,\n      adminId,\n    );\n  }\n\n  @Patch(':id/status')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Update application status (Privileged users only)' })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() statusDto: { status: string; statusMessage?: string },\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.updateStatus(\n      id,\n      statusDto.status as ApplicationStatus,\n      statusDto.statusMessage,\n      user.id,\n    );\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete application' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    await this.documentApplicationsService.remove(id, userId);\n    return { message: 'Application deleted successfully' };\n  }\n\n  // Admin endpoints\n  @Get('admin/all')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Get all applications (Privileged users only)' })\n  async getAllApplications() {\n    return this.documentApplicationsService.findAll();\n  }\n\n  @Get('admin/stats')\n  @Roles('admin', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Get application statistics (Admin/Super Admin only)' })\n  async getStats(): Promise\n  > {\n    return this.documentApplicationsService.getApplicationStats();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentApplicationsModule.html":{"url":"modules/DocumentApplicationsModule.html","title":"module - DocumentApplicationsModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentApplicationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\n\n\nMinioService \n\nMinioService \n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentApplicationsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { DocumentApplicationsController } from './document-applications.controller';\nimport { DocumentApplication } from './entities/document-application.entity';\nimport { DocumentFile } from './entities/document-file.entity';\nimport { ApplicationStatusHistory } from './entities/application-status-history.entity';\nimport { MinioService } from './services/minio.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DocumentApplication,\n      DocumentFile,\n      ApplicationStatusHistory,\n    ]),\n  ],\n  controllers: [DocumentApplicationsController],\n  providers: [DocumentApplicationsService, MinioService],\n  exports: [DocumentApplicationsService, MinioService],\n})\nexport class DocumentApplicationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentFile.html":{"url":"entities/DocumentFile.html","title":"entity - DocumentFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                documentCategory\n                            \n                            \n                                    \n                                fileName\n                            \n                            \n                                    \n                                fileSize\n                            \n                            \n                                    \n                                fileType\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                minioObjectName\n                            \n                            \n                                    \n                                uploadedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.files, {onDelete: 'CASCADE'})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'document_category', length: 250, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_name', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_size', type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_type', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        minioObjectName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'minio_object_name', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'uploaded_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('document_files')\n@Index(['applicationId'])\n@Index(['documentCategory'])\nexport class DocumentFile {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'file_name', length: 255 })\n  fileName: string;\n\n  @Column({ name: 'file_type', length: 100 })\n  fileType: string;\n\n  @Column({ name: 'file_size', type: 'bigint' })\n  fileSize: number;\n\n  @Column({ name: 'minio_object_name', length: 500 })\n  minioObjectName: string;\n\n  @Column({ name: 'document_category', length: 250, nullable: true })\n  documentCategory: string;\n\n  @CreateDateColumn({ name: 'uploaded_at' })\n  uploadedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.files, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindAllOptions.html":{"url":"interfaces/FindAllOptions.html","title":"interface - FindAllOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FindAllOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            search\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        search\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        search:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthenticatedUser\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email or username for login', example: 'test@example.com'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Test User password', example: 'password123'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'Email or username for login',\n    example: 'test@example.com',\n  })\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @ApiProperty({\n    description: 'Test User password',\n    example: 'password123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService.html":{"url":"injectables/MinioService.html","title":"injectable - MinioService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/minio.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadUrl(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor() {\n    this.minioClient = new Minio.Client({\n      endPoint: process.env.MINIO_ENDPOINT || 'localhost',\n      port: parseInt(process.env.MINIO_PORT || '9000'),\n      useSSL: process.env.MINIO_USE_SSL === 'true',\n      accessKey: process.env.MINIO_ACCESS_KEY || 'minioadmin',\n      secretKey: process.env.MINIO_SECRET_KEY || 'minioadmin123',\n    });\n\n    this.bucketName = process.env.MINIO_BUCKET_NAME || 'bulak-smart-connect';\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        {\n          'Content-Type': file.mimetype,\n          'Original-Name': file.originalname,\n        },\n      );\n\n      this.logger.log(`File uploaded: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Upload failed:', error);\n      throw error;\n    }\n  }\n\n  async getDownloadUrl(objectName: string): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        3600,\n      );\n    } catch (error) {\n      this.logger.error('Get URL failed:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Delete failed:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService-1.html":{"url":"injectables/MinioService-1.html","title":"injectable - MinioService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                ensureBucketExists\n                            \n                            \n                                    Async\n                                getFileInfo\n                            \n                            \n                                    Async\n                                getPresignedUrl\n                            \n                            \n                                    Async\n                                listFiles\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ensureBucketExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureBucketExists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFileInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileInfo(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresignedUrl(objectName: string, expiry: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                expiry\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3600\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    listFiles(prefix?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService implements OnModuleInit {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor(private configService: ConfigService) {\n    const endpoint = this.configService.get(\n      'MINIO_ENDPOINT',\n      'localhost',\n    );\n    const port = this.configService.get('MINIO_PORT', 9000);\n    const useSSLValue = this.configService\n      .get('MINIO_USE_SSL', 'false')\n      .toLowerCase();\n    const useSSL = ['true', '1', 'yes', 'on'].includes(useSSLValue);\n    const accessKey = this.configService.get(\n      'MINIO_ACCESS_KEY',\n      'minioadmin',\n    );\n    const secretKey = this.configService.get(\n      'MINIO_SECRET_KEY',\n      'minioadmin123',\n    );\n\n    this.minioClient = new Minio.Client({\n      endPoint: endpoint,\n      port: port,\n      useSSL: useSSL,\n      accessKey: accessKey,\n      secretKey: secretKey,\n    });\n\n    this.bucketName = this.configService.get(\n      'MINIO_BUCKET_NAME',\n      'bulak-smart-connect',\n    );\n\n    this.logger.log(`MinIO configured with endpoint: ${endpoint}:${port}`);\n  }\n\n  async onModuleInit() {\n    await this.ensureBucketExists();\n  }\n\n  async ensureBucketExists(): Promise {\n    try {\n      const exists = await this.minioClient.bucketExists(this.bucketName);\n      if (!exists) {\n        await this.minioClient.makeBucket(this.bucketName, 'us-east-1');\n        this.logger.log(`Bucket ${this.bucketName} created successfully`);\n      } else {\n        this.logger.log(`Bucket ${this.bucketName} already exists`);\n      }\n    } catch (error) {\n      this.logger.error('Error ensuring bucket exists:', error);\n      throw error;\n    }\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      const metaData = {\n        'Content-Type': file.mimetype,\n        'Original-Name': file.originalname,\n        'Upload-Date': new Date().toISOString(),\n        'File-Size': file.size.toString(),\n      };\n\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        metaData,\n      );\n\n      this.logger.log(`File uploaded successfully: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Error uploading file:', error);\n      throw error;\n    }\n  }\n\n  async getPresignedUrl(\n    objectName: string,\n    expiry: number = 3600,\n  ): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        expiry,\n      );\n    } catch (error) {\n      this.logger.error('Error generating presigned URL:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted successfully: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Error deleting file:', error);\n      throw error;\n    }\n  }\n\n  async getFileInfo(objectName: string): Promise {\n    try {\n      return await this.minioClient.statObject(this.bucketName, objectName);\n    } catch (error) {\n      this.logger.error('Error getting file info:', error);\n      throw error;\n    }\n  }\n\n  async listFiles(prefix?: string): Promise {\n    return new Promise((resolve, reject) => {\n      const files: any[] = [];\n      const stream = this.minioClient.listObjects(\n        this.bucketName,\n        prefix,\n        true,\n      );\n\n      stream.on('data', (obj) => files.push(obj));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(files));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedUsersResponseDto.html":{"url":"classes/PaginatedUsersResponseDto.html","title":"class - PaginatedUsersResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedUsersResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/paginated-users-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                limit\n                            \n                            \n                                    \n                                page\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                totalPages\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'Current page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Total number of pages'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Array of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nexport class PaginatedUsersResponseDto {\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Array of users',\n  })\n  users: UserResponseDto[];\n\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  total: number;\n\n  @ApiProperty({\n    example: 1,\n    description: 'Current page number',\n  })\n  page: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Number of items per page',\n  })\n  limit: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Total number of pages',\n  })\n  totalPages: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_guest', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n\n  @Column({ name: 'is_guest', default: false })\n  isGuest: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueueUpdates\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueueUpdates\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueueUpdates(client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('join_queue_updates')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@WebSocketGateway({\n  cors: {\n    origin: process.env.WS_CORS_ORIGIN || 'http://localhost:5173',\n    methods: ['GET', 'POST'],\n    credentials: true,\n    allowedHeaders: ['Content-Type', 'Authorization'],\n  },\n  namespace: 'socket.io', // Add this to match client expectation\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n    this.logger.log(`CORS origin configured: ${this.configService.get('WS_CORS_ORIGIN')}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  @SubscribeMessage('join_queue_updates')\n  async handleJoinQueueUpdates(client: Socket) {\n    this.logger.log(`Socket ${client.id} joined queue updates`);\n    await client.join('queue_updates');\n    return { event: 'joined', data: 'Successfully joined queue updates' };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                        \n                            QueuesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueuesController } from './queues.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { QueueSchedulerService } from './queue-scheduler.service';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Queue, QueueDetails, Counter]),\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [QueueController, QueuesController],\n  providers: [QueueService, QueueGateway, QueueSchedulerService],\n  exports: [QueueService, QueueGateway, QueueSchedulerService],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueSchedulerService.html":{"url":"injectables/QueueSchedulerService.html","title":"injectable - QueueSchedulerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueSchedulerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue-scheduler.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isResetInProgress\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTodayPendingCount\n                            \n                            \n                                    \n                                    Async\n                                handleDailyQueueReset\n                            \n                            \n                                    Private\n                                    Async\n                                logDailyStatistics\n                            \n                            \n                                    Async\n                                manualDailyReset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTodayPendingCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodayPendingCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:152\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleDailyQueueReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDailyQueueReset()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('59 23 * * *', {name: 'daily-queue-reset', timeZone: 'Asia/Manila'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        logDailyStatistics\n                        \n                    \n                \n            \n            \n                \n                        \n                    logDailyStatistics(startOfDay: Date, endOfDay: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        manualDailyReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    manualDailyReset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isResetInProgress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueSchedulerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueSchedulerService {\n  private readonly logger = new Logger(QueueSchedulerService.name);\n  private isResetInProgress = false; \n\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    private queueGateway: QueueGateway,\n  ) {}\n\n  // Run every day at 11:59 PM (23:59)\n  @Cron('59 23 * * *', {\n    name: 'daily-queue-reset',\n    timeZone: 'Asia/Manila',\n  })\n  async handleDailyQueueReset() {\n    // ✅ FIXED: Prevent concurrent execution\n    if (this.isResetInProgress) {\n      this.logger.warn('🚫 Daily reset already in progress, skipping...');\n      return;\n    }\n\n    this.isResetInProgress = true;\n    this.logger.log('🔄 Starting daily queue reset process...');\n\n    try {\n      // ✅ FIXED: Better timezone handling\n      const today = new Date();\n      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n      const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59, 999);\n\n      this.logger.log(`🗓️ Searching for queues between: ${startOfDay.toISOString()} and ${endOfDay.toISOString()}`);\n\n      // Get all pending queues created today\n      const pendingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.PENDING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      this.logger.log(`📋 Found ${pendingQueues.length} pending queues to cancel`);\n\n      if (pendingQueues.length > 0) {\n        // Mark all pending queues as cancelled\n        const cancelledQueues = await this.queueRepository.save(\n          pendingQueues.map(queue => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          }))\n        );\n\n        this.logger.log(`❌ Cancelled ${cancelledQueues.length} pending queues`);\n\n        // Notify clients about cancellations\n        for (const queue of cancelledQueues) {\n          this.queueGateway.notifyQueueUpdate(queue.id, {\n            action: 'cancelled',\n            reason: 'End of day auto-cancellation',\n            queue: queue,\n          });\n        }\n\n        // Send general notification\n        this.queueGateway.server.emit('dailyQueueReset', {\n          cancelledCount: cancelledQueues.length,\n          timestamp: new Date(),\n          message: 'Daily queue reset completed. All pending queues have been cancelled.',\n        });\n      }\n\n      // Also cancel any serving queues\n      const servingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.SERVING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      if (servingQueues.length > 0) {\n        const cancelledServingQueues = await this.queueRepository.save(\n          servingQueues.map(queue => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          }))\n        );\n\n        this.logger.log(`❌ Cancelled ${cancelledServingQueues.length} serving queues`);\n      }\n\n      this.logger.log('✅ Daily queue reset completed successfully');\n      await this.logDailyStatistics(startOfDay, endOfDay);\n\n    } catch (error) {\n      this.logger.error('❌ Error during daily queue reset:', error);\n      throw error; // ✅ FIXED: Propagate error for proper handling\n    } finally {\n      this.isResetInProgress = false; // ✅ FIXED: Always reset flag\n    }\n  }\n\n  // Optional: Log daily statistics\n  private async logDailyStatistics(startOfDay: Date, endOfDay: Date) {\n    try {\n      const [completed, cancelled, total] = await Promise.all([\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.COMPLETED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.CANCELLED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n      ]);\n\n      this.logger.log(`📊 Daily Statistics for ${startOfDay.toDateString()}:`);\n      this.logger.log(`   Total Queues: ${total}`);\n      this.logger.log(`   Completed: ${completed}`);\n      this.logger.log(`   Cancelled: ${cancelled}`);\n      this.logger.log(`   Completion Rate: ${total > 0 ? ((completed / total) * 100).toFixed(1) : 0}%`);\n    } catch (error) {\n      this.logger.error('Error logging daily statistics:', error);\n    }\n  }\n\n  // Manual trigger for testing or admin use\n  async manualDailyReset() {\n    this.logger.log('🔄 Manual daily queue reset triggered');\n    return await this.handleDailyQueueReset(); // ✅ FIXED: Return result\n  }\n\n  // Get pending queues count for today\n  async getTodayPendingCount(): Promise {\n    const today = new Date();\n    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59, 999);\n\n    return await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: Between(startOfDay, endOfDay),\n      },\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCounter\n                            \n                            \n                                    Async\n                                callNext\n                            \n                            \n                                    Async\n                                checkExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByQueueNumber\n                            \n                            \n                                    Async\n                                findByStatus\n                            \n                            \n                                    Async\n                                findByStatusWithDetails\n                            \n                            \n                                    Async\n                                findByUserIdWithDetails\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCounters\n                            \n                            \n                                    Async\n                                getDetailsForMultipleQueues\n                            \n                            \n                                    Async\n                                getQueueDetails\n                            \n                            \n                                    Async\n                                getQueuePosition\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueDetailsRepository: Repository, counterRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueDetailsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        counterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:475\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:358\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkExists(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:488\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatusWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatusWithDetails(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:304\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUserIdWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserIdWithDetails(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:495\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:481\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDetailsForMultipleQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDetailsForMultipleQueues(queueIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:269\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:428\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateQueueDto: UpdateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual, LessThan, In, Between } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport {\n  Counter,\n  //CounterStatus, //Uncomment if you need to use CounterStatus\n} from '../counter/entities/counter.entity';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    @InjectRepository(QueueDetails)\n    private queueDetailsRepository: Repository,\n    @InjectRepository(Counter)\n    private counterRepository: Repository,\n    @Inject(forwardRef(() => QueueGateway))\n    private queueGateway: QueueGateway,\n  ) {}\n\n  async create(createQueueDto: CreateQueueDto) {\n    // Generate a queue number based on date and sequence\n    const today = new Date();\n    const dateStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;\n\n    // Get the start and end of today for accurate daily counting\n    const todayStart = new Date(today);\n    todayStart.setHours(0, 0, 0, 0);\n    \n    const todayEnd = new Date(today);\n    todayEnd.setHours(23, 59, 59, 999);\n\n    // Count ONLY queues created TODAY (this will reset to 0 each day)\n    const todayCount = await this.queueRepository.count({\n      where: {\n        createdAt: Between(todayStart, todayEnd),\n      },\n    });\n\n    // Format the queue number: YYYYMMDD-XXX (using 3 digits for daily sequence)\n    // This keeps your existing backend format but ensures daily reset\n    const queueNumber = `${dateStr}-${String(todayCount + 1).padStart(3, '0')}`;\n\n    console.log(`Creating queue number: ${queueNumber} for today. Daily count: ${todayCount + 1}`);\n\n    // Create and save the queue\n    const queue = this.queueRepository.create({\n      queueNumber,\n      status: QueueStatus.PENDING,\n      estimatedWaitTime: 15 * (todayCount + 1), // Simple estimation: 15 minutes per person\n    });\n\n    const savedQueue = await this.queueRepository.save(queue);\n\n    // Simplify the user ID handling\n    const userId =\n      typeof createQueueDto.userId === 'number'\n        ? createQueueDto.userId\n        : typeof createQueueDto.userId === 'string' &&\n            createQueueDto.userId !== 'guest'\n          ? Number(createQueueDto.userId)\n          : undefined;\n\n    // isGuest is already a boolean from the DTO validation\n    const isGuest = createQueueDto.isGuest ?? !userId;\n\n    // Log for debugging\n    console.log('=== QUEUE SERVICE CREATE DEBUG ===');\n    console.log('Creating queue details with:', {\n      providedUserId: createQueueDto.userId,\n      parsedUserId: userId,\n      providedIsGuest: createQueueDto.isGuest,\n      finalIsGuest: isGuest,\n    });\n\n    // Create queue details\n    const queueDetails = this.queueDetailsRepository.create({\n      queueId: savedQueue.id,\n      userId: userId,\n      firstName: createQueueDto.firstName,\n      lastName: createQueueDto.lastName,\n      middleInitial: createQueueDto.middleInitial,\n      address: createQueueDto.address,\n      phoneNumber: createQueueDto.phoneNumber,\n      reasonOfVisit: createQueueDto.reasonOfVisit,\n      appointmentType: createQueueDto.appointmentType,\n      isGuest: isGuest,\n    });\n\n    // Set the queue relation\n    queueDetails.queue = savedQueue;\n\n    const savedDetails = await this.queueDetailsRepository.save(queueDetails);\n\n    console.log('Queue details saved with isGuest:', savedDetails.isGuest);\n\n    // Get queue position\n    const position = await this.getQueuePosition(savedQueue.id);\n\n    const result = { queue: savedQueue, details: savedDetails, position };\n\n    // Notify all clients that a new queue has been created\n    this.queueGateway.server.emit('queueListUpdate', {\n      action: 'created',\n      queueId: savedQueue.id,\n    });\n\n    return result;\n  }\n\n  async findAll() {\n    return await this.queueRepository.find({\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findByStatus(status: QueueStatus) {\n    return await this.queueRepository.find({\n      where: { status },\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findOne(id: number) {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${id} not found`);\n    }\n\n    return queue;\n  }\n\n  async findByQueueNumber(queueNumber: string) {\n    const queue = await this.queueRepository.findOne({\n      where: { queueNumber },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${queueNumber} not found`);\n    }\n\n    return queue;\n  }\n\n  async getQueueDetails(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId },\n      relations: ['user'],\n    });\n\n    if (!details) {\n      throw new NotFoundException(`Details for queue #${queueId} not found`);\n    }\n\n    const position = await this.getQueuePosition(queueId);\n\n    return { queue, details, position };\n  }\n  async update(id: number, updateQueueDto: UpdateQueueDto) {\n    console.log(`Updating queue ${id} with:`, updateQueueDto);\n\n    try {\n      // Find the queue\n      const queue = await this.findOne(id);\n      console.log('Found queue:', queue);\n\n      if (updateQueueDto.status) {\n        // Log the status change\n        console.log(\n          `Changing status from ${queue.status} to ${updateQueueDto.status}`,\n        );\n        queue.status = updateQueueDto.status;\n\n        // If completed, set completion time\n        if (updateQueueDto.status === QueueStatus.COMPLETED) {\n          queue.completedAt = new Date();\n        }\n      }\n\n      if (updateQueueDto.counterNumber) {\n        queue.counterNumber = updateQueueDto.counterNumber;\n      }\n\n      // Save the updated queue\n      const updatedQueue = await this.queueRepository.save(queue);\n      console.log('Queue updated successfully:', updatedQueue);\n\n      // Notify clients about the queue update\n      this.queueGateway.notifyQueueUpdate(id, {\n        action: 'updated',\n        queue: updatedQueue,\n      });\n\n      return updatedQueue;\n    } catch (error) {\n      console.error(`Error updating queue ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getQueuePosition(queueId: number) {\n    console.log(`Getting position for queue ID: ${queueId}`);\n\n    const queue = await this.findOne(queueId);\n    console.log(`Found queue:`, queue);\n\n    // If the queue doesn't exist, return position 0\n    if (!queue) {\n      console.log('Queue not found');\n      return { position: 0 };\n    }\n\n    // If the queue is not pending, return special position values\n    if (queue.status === QueueStatus.SERVING) {\n      console.log('Queue is currently being served');\n      return { position: 0, status: 'serving' };\n    }\n\n    if (queue.status === QueueStatus.COMPLETED) {\n      console.log('Queue is completed');\n      return { position: 0, status: 'completed' };\n    }\n\n    if (queue.status !== QueueStatus.PENDING) {\n      console.log(`Queue status is ${queue.status}, not pending`);\n      return { position: 0, status: queue.status };\n    }\n\n    // Count serving queues (they are ahead of all pending queues)\n    const servingCount = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.SERVING,\n      },\n    });\n    console.log(`Serving queues count: ${servingCount}`);\n\n    // Count how many pending queues are ahead of this one (created earlier)\n    const pendingAheadCount = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: LessThan(queue.createdAt), // Queues created before this one\n      },\n    });\n    console.log(`Pending queues ahead: ${pendingAheadCount}`);\n\n    // Total position = serving queues + pending queues ahead + 1\n    const position = servingCount + pendingAheadCount + 1;\n    console.log(`Calculated position: ${position}`);\n\n    return { position, status: 'pending' };\n  }\n  async getDetailsForMultipleQueues(queueIds: number[]) {\n    console.log('Getting details for queue IDs:', queueIds);\n\n    if (!queueIds || queueIds.length === 0) {\n      return {};\n    }\n\n    const detailsMap = {};\n\n    try {\n      // Fetch all queue details in a single query for better performance\n      const allDetails = await this.queueDetailsRepository.find({\n        where: {\n          queueId: In(queueIds),\n        },\n        relations: ['user'],\n      });\n\n      console.log(\n        `Found ${allDetails.length} details for ${queueIds.length} queues`,\n      );\n\n      // Organize by queueId for easy lookup\n      allDetails.forEach((detail) => {\n        detailsMap[detail.queueId] = detail;\n      });\n\n      return detailsMap;\n    } catch (error: unknown) {\n      console.error('Error fetching details for multiple queues:', error);\n      // Return empty details rather than failing\n      return {};\n    }\n  }\n\n  async findByStatusWithDetails(status: QueueStatus) {\n    console.log(`Finding queues with status: ${status} and their details`);\n\n    try {\n      // First get all queues with this status\n      const queues = await this.queueRepository.find({\n        where: { status },\n        order: { createdAt: 'ASC' },\n      });\n\n      console.log(`Found ${queues.length} queues with status ${status}`);\n\n      if (queues.length === 0) {\n        return [];\n      }\n\n      // Get all queue IDs\n      const queueIds = queues.map((queue) => queue.id);\n\n      // Fetch details for all these queues\n      const detailsMap = await this.getDetailsForMultipleQueues(queueIds);\n\n      // Combine queue and details data\n      const result = queues.map((queue) => {\n        return {\n          ...queue,\n          details: detailsMap[queue.id] || null,\n        };\n      });\n\n      console.log(`Returning ${result.length} queues with details`);\n      return result;\n    } catch (error: unknown) {\n      // Handle error message extraction without triggering ESLint\n      let errorMessage: string;\n\n      if (error instanceof Error) {\n        errorMessage = error.message;\n      } else {\n        errorMessage = String(error);\n      }\n\n      console.error('Error in findByStatusWithDetails:', errorMessage);\n\n      if (error instanceof Error) {\n        throw new Error(`Failed to get queue details: ${error.message}`);\n      }\n      if (typeof error === 'string') {\n        throw new Error(`Failed to get queue details: ${error}`);\n      }\n      throw new Error('Failed to get queue details: An unknown error occurred');\n    }\n  }\n\n  async callNext(counterId: number) {\n    const counter = await this.counterRepository.findOne({\n      where: { id: counterId },\n      relations: ['currentQueue'],\n    });\n\n    if (!counter) {\n      throw new NotFoundException(`Counter #${counterId} not found`);\n    }\n\n    // Mark current queue as completed if exists\n    if (counter.currentQueue) {\n      counter.currentQueue.status = QueueStatus.COMPLETED;\n      counter.currentQueue.completedAt = new Date();\n      await this.queueRepository.save(counter.currentQueue);\n    }\n\n    // Find the next pending queue\n    const nextQueue = await this.queueRepository.findOne({\n      where: { status: QueueStatus.PENDING },\n      order: { createdAt: 'ASC' },\n    });\n\n    if (!nextQueue) {\n      counter.currentQueueId = null;\n      counter.currentQueue = null;\n      await this.counterRepository.save(counter);\n      return { counter, message: 'No more queues waiting' };\n    }\n\n    // Update the next queue\n    nextQueue.status = QueueStatus.SERVING;\n    nextQueue.counterNumber = counter.name;\n    await this.queueRepository.save(nextQueue);\n\n    // Update counter\n    counter.currentQueueId = nextQueue.id;\n    counter.currentQueue = nextQueue;\n    await this.counterRepository.save(counter);\n\n    // Get associated details\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId: nextQueue.id },\n    });\n\n    const result = {\n      counter,\n      queue: nextQueue,\n      details,\n      message: 'Next queue called successfully',\n    };\n\n    if (nextQueue) {\n      // Notify the specific queue room that it's their turn\n      this.queueGateway.notifyQueueUpdate(nextQueue.id, {\n        action: 'called',\n        counterName: counter.name,\n        counterId: counter.id,\n      });\n    }\n\n    // Notify counter clients\n    this.queueGateway.notifyCounterUpdate(counterId, {\n      action: 'nextCalled',\n      ...result,\n    });\n\n    return result;\n  }\n\n  async getStats() {\n    const [\n      pendingCount,\n      servingCount,\n      completedCount,\n      cancelledCount,\n      totalCount,\n    ] = await Promise.all([\n      this.queueRepository.count({ where: { status: QueueStatus.PENDING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.SERVING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.COMPLETED } }),\n      this.queueRepository.count({ where: { status: QueueStatus.CANCELLED } }),\n      this.queueRepository.count(),\n    ]);\n\n    // Calculate average wait time\n    const completedQueues = await this.queueRepository.find({\n      where: {\n        status: QueueStatus.COMPLETED,\n        completedAt: LessThanOrEqual(new Date()),\n      },\n      select: ['createdAt', 'completedAt'],\n    });\n\n    let averageWaitTime = 0;\n    if (completedQueues.length > 0) {\n      const totalWaitTimeMs = completedQueues.reduce((total, queue) => {\n        return (\n          total + (queue.completedAt.getTime() - queue.createdAt.getTime())\n        );\n      }, 0);\n      averageWaitTime = Math.floor(\n        totalWaitTimeMs / completedQueues.length / 60000,\n      ); // Convert to minutes\n    }\n\n    return {\n      pending: pendingCount,\n      serving: servingCount,\n      completed: completedCount,\n      cancelled: cancelledCount,\n      total: totalCount,\n      averageWaitTime,\n    };\n  }\n\n  // Add a counter\n  async addCounter(name: string) {\n    const counter = this.counterRepository.create({ name });\n    return await this.counterRepository.save(counter);\n  }\n\n  // Get all counters\n  async getCounters() {\n    return await this.counterRepository.find({\n      relations: ['currentQueue'],\n    });\n  }\n\n  // Check if queue exists\n  async checkExists(id: number): Promise {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n    return !!queue;\n  }\n\n  async findByUserIdWithDetails(userId: string) {\n    // Convert string userId to number since the database expects a number\n    const userIdNumber = parseInt(userId, 10);\n\n    if (isNaN(userIdNumber)) {\n      console.error('Invalid userId provided:', userId);\n      return [];\n    }\n\n    // First, let's find the user's queue details that contain the userId\n    const userDetails = await this.queueDetailsRepository.find({\n      where: {\n        userId: userIdNumber,\n      },\n      relations: ['queue'],\n    });\n\n    // Extract queue IDs from the details\n    const queueIds = userDetails.map((detail) => detail.queue.id);\n\n    if (queueIds.length === 0) {\n      return [];\n    }\n\n    // Find ALL queues (including completed ones) but filter them in the frontend\n    // Change this to include completed queues temporarily so we can clear them\n    return await this.queueRepository.find({\n      where: {\n        id: In(queueIds),\n        // Remove status filter to get all queues including completed ones\n      },\n      relations: ['details'],\n      order: { createdAt: 'ASC' },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueuesController.html":{"url":"controllers/QueuesController.html","title":"controller - QueuesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueuesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queues.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getQueueById\n                            \n                            \n                                    \n                                    Async\n                                getUserQueues\n                            \n                            \n                                    \n                                    Async\n                                getWalkInQueues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getQueueById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserQueues(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getWalkInQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWalkInQueues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('walk-in')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { QueueStatus } from './entities/queue.entity';\n\ninterface QueueDetails {\n  firstName?: string;\n  lastName?: string;\n  middleInitial?: string;\n  reasonOfVisit?: string;\n  address?: string;\n  phoneNumber?: string;\n}\n\n@Controller('queues')\nexport class QueuesController {\n  constructor(private readonly queueService: QueueService) {}\n  // This endpoint is for supporting the legacy API path that the frontend is using\n  @Get('walk-in')\n  async getWalkInQueues() {\n    console.log('GET /queues/walk-in endpoint called');\n    try {\n      // Get both pending and serving queues with details using the service methods\n      const [pendingQueuesWithDetails, servingQueuesWithDetails] =\n        await Promise.all([\n          this.queueService.findByStatusWithDetails(QueueStatus.PENDING),\n          this.queueService.findByStatusWithDetails(QueueStatus.SERVING),\n        ]);\n\n      console.log('Found pending queues:', pendingQueuesWithDetails.length);\n      console.log('Found serving queues:', servingQueuesWithDetails.length);\n\n      // Combine all queues\n      const allQueues = [\n        ...pendingQueuesWithDetails,\n        ...servingQueuesWithDetails,\n      ];\n\n      // Extract details from the nested structure and flatten them for the frontend\n      const result = allQueues.map((queue) => {\n        // For debugging\n        console.log('Processing queue:', queue.id, 'status:', queue.status);\n\n        // Handle potential null/undefined details\n        const details: QueueDetails | null = Array.isArray(queue.details)\n          ? (queue.details[0] as QueueDetails)\n          : (queue.details as QueueDetails);\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          estimatedWaitTime: queue.estimatedWaitTime,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          middleInitial: details?.middleInitial || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n          address: details?.address || null,\n          phoneNumber: details?.phoneNumber || null,\n        };\n      });\n\n      console.log(`Returning ${result.length} walk-in queues`);\n      return result;\n    } catch (err: unknown) {\n      console.error('Error fetching walk-in queues:', err);\n      throw err;\n    }\n  }\n\n  @Get('user/:userId')\n  async getUserQueues(@Param('userId') userId: string) {\n    console.log('GET /queues/user/' + userId + ' endpoint called');\n    try {\n      // Find queues for the specific user that are not completed\n      const userQueues =\n        await this.queueService.findByUserIdWithDetails(userId);\n\n      console.log('Found user queues:', userQueues.length);\n\n      const result = userQueues.map((queue) => {\n        const details = Array.isArray(queue.details)\n          ? queue.details[0]\n          : queue.details;\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n        };\n      });\n\n      return result;\n    } catch (err) {\n      console.error('Error fetching user queues:', err);\n      throw err;\n    }\n  }\n\n  @Get(':id')\n  async getQueueById(@Param('id') id: string) {\n    console.log('GET /queues/' + id + ' endpoint called');\n    try {\n      const queueId = parseInt(id, 10);\n      if (isNaN(queueId)) {\n        throw new Error('Invalid queue ID');\n      }\n\n      const queue = await this.queueService.findOne(queueId);\n\n      if (!queue) {\n        throw new Error('Queue not found');\n      }\n\n      const details = Array.isArray(queue.details)\n        ? queue.details[0]\n        : queue.details;\n\n      return {\n        id: queue.id,\n        queueNumber: queue.queueNumber,\n        status: queue.status,\n        counterNumber: queue.counterNumber,\n        createdAt: queue.createdAt,\n        completedAt: queue.completedAt,\n        firstName: details?.firstName || null,\n        lastName: details?.lastName || null,\n        reasonOfVisit: details?.reasonOfVisit || null,\n      };\n    } catch (err) {\n      console.error('Error fetching queue:', err);\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User middle name (optional)', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Full name (auto-generated)', example: 'John Robert Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for login', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\n\nexport class RegisterDto {\n  @ApiProperty({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Username for login',\n    example: 'john_doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    description: 'User middle name (optional)',\n    example: 'Robert',\n  })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    description: 'Full name (auto-generated)',\n    example: 'John Robert Doe',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  contactNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport { AuthenticatedUser } from './jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\n\ninterface RequestWithUser extends Request {\n  user: AuthenticatedUser;\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.id));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.id),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.id),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/decorators/user.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { AuthenticatedUser } from '../jwt.strategy';\n\ninterface RequestWithUser {\n  user: AuthenticatedUser;\n}\n\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-2.html":{"url":"interfaces/RequestWithUser-2.html","title":"interface - RequestWithUser-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles using In operator (replaces deprecated findByIds)\n    const roles = await this.rolesRepository.findBy({\n      id: In(roleIds),\n    });\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnnouncementDto.html":{"url":"classes/UpdateAnnouncementDto.html","title":"class - UpdateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/update-announcement.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAnnouncementDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnnouncementDto } from './create-announcement.dto';\n\nexport class UpdateAnnouncementDto extends PartialType(CreateAnnouncementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAppointmentDto.html":{"url":"classes/UpdateAppointmentDto.html","title":"class - UpdateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/update-appointment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAppointmentDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/update-appointment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsOptional, IsEnum } from 'class-validator';\nimport { CreateAppointmentDto } from './create-appointment.dto';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class UpdateAppointmentDto extends PartialType(CreateAppointmentDto) {\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDocumentApplicationDto.html":{"url":"classes/UpdateDocumentApplicationDto.html","title":"class - UpdateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/update-document-application.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  CreateDocumentApplicationDto,\n)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationStatus, description: 'Application status', example: undefined, required: false})@IsOptional()@IsEnum(ApplicationStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status message', example: 'Application approved and ready for pickup', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateDocumentApplicationDto } from './create-document-application.dto';\nimport { IsEnum, IsOptional, IsString } from 'class-validator';\nimport { ApplicationStatus } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateDocumentApplicationDto extends PartialType(\n  CreateDocumentApplicationDto,\n) {\n  @ApiProperty({\n    enum: ApplicationStatus,\n    description: 'Application status',\n    example: ApplicationStatus.APPROVED,\n    required: false,\n  })\n  @IsOptional()\n  @IsEnum(ApplicationStatus)\n  status?: ApplicationStatus;\n\n  @ApiProperty({\n    description: 'Status message',\n    example: 'Application approved and ready for pickup',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating user information (citizen)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserStatusDto.html":{"url":"classes/UpdateUserStatusDto.html","title":"class - UpdateUserStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-status.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                isActive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-status.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean } from 'class-validator';\n\nexport class UpdateUserStatusDto {\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  @IsBoolean()\n  isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_active', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @Column({ name: 'is_active', default: true })\n  isActive: boolean;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDto.html":{"url":"classes/UserQueryDto.html","title":"class - UserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 10, description: 'Number of items per page', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 1, description: 'Page number', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'citizen', description: 'Filter by role'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'john', description: 'Search term for name, email, or username'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsNumber, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class UserQueryDto {\n  @ApiPropertyOptional({\n    example: 1,\n    description: 'Page number',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number = 1;\n\n  @ApiPropertyOptional({\n    example: 10,\n    description: 'Number of items per page',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    example: 'john',\n    description: 'Search term for name, email, or username',\n  })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @ApiPropertyOptional({\n    example: 'citizen',\n    description: 'Filter by role',\n  })\n  @IsOptional()\n  @IsString()\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponseDto.html":{"url":"classes/UserResponseDto.html","title":"class - UserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+639123456789', description: 'Contact number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User creation date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Default role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'User ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Miguel Doe', description: 'Full name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'User roles', type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User last update date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class UserResponseDto {\n  @ApiProperty({\n    example: 1,\n    description: 'User ID',\n  })\n  id: number;\n\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username',\n  })\n  username?: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name',\n  })\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  lastName: string;\n\n  @ApiProperty({\n    example: 'John Miguel Doe',\n    description: 'Full name',\n  })\n  name: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension',\n  })\n  nameExtension?: string;\n\n  @ApiProperty({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  contactNumber: string;\n\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  isActive: boolean;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User creation date',\n  })\n  createdAt: Date;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User last update date',\n  })\n  updatedAt: Date;\n\n  @ApiProperty({\n    example: ['citizen', 'staff'],\n    description: 'User roles',\n    type: [String],\n  })\n  roles: string[];\n\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Default role name',\n  })\n  defaultRole: string;\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID',\n  })\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserStats.html":{"url":"interfaces/UserStats.html","title":"interface - UserStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            activeUsers\n                                        \n                                \n                                \n                                        \n                                            inactiveUsers\n                                        \n                                \n                                \n                                        \n                                            recentUsers\n                                        \n                                \n                                \n                                        \n                                            totalUsers\n                                        \n                                \n                                \n                                        \n                                            usersByRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        activeUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inactiveUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recentUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        recentUsers:         Omit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Omit[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usersByRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        usersByRole:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserStatsResponseDto.html":{"url":"classes/UserStatsResponseDto.html","title":"class - UserStatsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserStatsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activeUsers\n                            \n                            \n                                    \n                                inactiveUsers\n                            \n                            \n                                    \n                                recentUsers\n                            \n                            \n                                    \n                                totalUsers\n                            \n                            \n                                    \n                                usersByRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 85, description: 'Number of active users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        inactiveUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 15, description: 'Number of inactive users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recentUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Recently created users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usersByRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersByRoleDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'User count by role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersByRoleDto.html":{"url":"classes/UsersByRoleDto.html","title":"class - UsersByRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersByRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                            \n                                    \n                                roleName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 25, description: 'Number of users with this role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminCreateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminCreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminCreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('admin-create')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Admin creates user with role assignment'})@ApiResponse({status: 201, description: 'User created successfully', type: UserResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: UserQueryDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all users (Admin only)'})@ApiResponse({status: 200, description: 'Users retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user by ID (Admin only)'})@ApiResponse({status: 200, description: 'User found'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiOperation({summary: 'Get current user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user statistics (Admin only)'})@ApiResponse({status: 200, description: 'Statistics retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Delete user (Admin only)'})@ApiResponse({status: 200, description: 'User deleted successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: AdminUpdateUserDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user (Admin only)'})@ApiResponse({status: 200, description: 'User updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, updateStatusDto: UpdateUserStatusDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user status (Admin only)'})@ApiResponse({status: 200, description: 'User status updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateStatusDto\n                                            \n                                                            UpdateUserStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { UpdateUserStatusDto } from './dto/update-user-status.dto';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { AuthenticatedUser } from '../auth/jwt.strategy';\nimport * as bcrypt from 'bcrypt';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserResponseDto } from './dto/user-response.dto';\n\n@ApiTags('users')\n@Controller('users')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all users (Admin only)' })\n  @ApiResponse({ status: 200, description: 'Users retrieved successfully' })\n  async findAll(\n    @Query() query: UserQueryDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    const { page = 1, limit = 10, search, role } = query;\n    return this.usersService.findAll({ page, limit, search, role });\n  }\n\n  @Get('profile')\n  @ApiOperation({ summary: 'Get current user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  async getProfile(@Request() req: { user: AuthenticatedUser }) {\n    return this.usersService.findOne(req.user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user statistics (Admin only)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Statistics retrieved successfully',\n  })\n  async getStats() {\n    return this.usersService.getStats();\n  }\n\n  @Get(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user by ID (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User found' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async findOne(\n    @Param('id') id: string,\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    // Allow users to view their own profile\n    const userId = +id;\n    const currentUser = req.user;\n\n    if (\n      userId === currentUser.id ||\n      currentUser.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      )\n    ) {\n      return this.usersService.findOne(userId);\n    }\n\n    throw new Error('Unauthorized');\n  }\n\n  @Patch(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.adminUpdate(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Delete user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async remove(\n    @Param('id') id: string,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.remove(+id);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user status (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User status updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() updateStatusDto: UpdateUserStatusDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.updateStatus(+id, updateStatusDto.isActive);\n  }\n\n  @Post('admin-create')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Admin creates user with role assignment' })\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully',\n    type: UserResponseDto,\n  })\n  async adminCreateUser(\n    @Body() createUserDto: CreateUserDto,\n  ): Promise {\n    try {\n      // Hash password\n      const salt = await bcrypt.genSalt();\n      const hashedPassword = await bcrypt.hash(createUserDto.password, salt);\n\n      // Create user with hashed password\n      const userWithHashedPassword = {\n        ...createUserDto,\n        password: hashedPassword,\n      };\n\n      const user = await this.usersService.create(userWithHashedPassword);\n\n      // Return user without password\n\n      const { password, ...userWithoutPassword } = user;\n\n      // Get user with roles for response\n\n      const userWithRoles = await this.usersService.findOne(user.id);\n\n      return userWithRoles;\n    } catch (error) {\n      console.error('Error in admin create user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User } from './entities/user.entity';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), RolesModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService, TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdate(id: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:287\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options: FindAllOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            FindAllOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:273\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:280\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:230\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:210\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:220\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            AuthenticatedUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            testMinIOConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.controller.ts\n            \n            controller\n            AnnouncementController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.service.ts\n            \n            injectable\n            AnnouncementService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/create-announcement.dto.ts\n            \n            class\n            CreateAnnouncementDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/update-announcement.dto.ts\n            \n            class\n            UpdateAnnouncementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/entities/announcement.entity.ts\n            \n            entity\n            Announcement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.controller.ts\n            \n            controller\n            AppointmentController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.service.ts\n            \n            injectable\n            AppointmentService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/create-appointment.dto.ts\n            \n            class\n            CreateAppointmentDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/update-appointment.dto.ts\n            \n            class\n            UpdateAppointmentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/appointment/entities/appointment.entity.ts\n            \n            entity\n            Appointment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.controller.ts\n            \n            controller\n            DocumentApplicationsController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.service.ts\n            \n            injectable\n            DocumentApplicationsService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/create-document-application.dto.ts\n            \n            class\n            CreateDocumentApplicationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/update-document-application.dto.ts\n            \n            class\n            UpdateDocumentApplicationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            entity\n            ApplicationStatusHistory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            class\n            ApplicationStatusHistory\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            entity\n            DocumentApplication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            class\n            DocumentApplication\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            entity\n            DocumentFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            class\n            DocumentFile\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/document-applications/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue-scheduler.service.ts\n            \n            injectable\n            QueueSchedulerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            controller\n            QueuesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            interface\n            QueueDetails\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/dto/paginated-users-response.dto.ts\n            \n            class\n            PaginatedUsersResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-status.dto.ts\n            \n            class\n            UpdateUserStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/user-query.dto.ts\n            \n            class\n            UserQueryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/user-response.dto.ts\n            \n            class\n            UserResponseDto\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UsersByRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UserStatsResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            FindAllOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            UserStats\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            date-fns : ^4.1.0\n        \n            dotenv : ^16.5.0\n        \n            minio : ^8.0.5\n        \n            multer : ^2.0.0\n        \n            mysql2 : ^3.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApplicationStatus   (src/.../document-application.entity.ts)\n                        \n                        \n                            ApplicationType   (src/.../document-application.entity.ts)\n                        \n                        \n                            AppointmentStatus   (src/.../appointment.entity.ts)\n                        \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/document-applications/entities/document-application.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ApplicationStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : Pending\n                            \n                        \n                        \n                            \n                                 PROCESSING\n                            \n                        \n                        \n                            \n                                Value : Processing\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : Approved\n                            \n                        \n                        \n                            \n                                 REJECTED\n                            \n                        \n                        \n                            \n                                Value : Rejected\n                            \n                        \n                        \n                            \n                                 DECLINE\n                            \n                        \n                        \n                            \n                                Value : Decline\n                            \n                        \n                        \n                            \n                                 READY_FOR_PICKUP\n                            \n                        \n                        \n                            \n                                Value : Ready for Pickup\n                            \n                        \n                        \n                            \n                                 REQUIRES_ADDITIONAL_INFO\n                            \n                        \n                        \n                            \n                                Value : Requires Additional Info\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ApplicationType\n                    \n                \n                        \n                            \n                                 BIRTH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Birth Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Marriage Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_LICENSE\n                            \n                        \n                        \n                            \n                                Value : Marriage License\n                            \n                        \n                        \n                            \n                                 DEATH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Death Certificate\n                            \n                        \n                        \n                            \n                                 BUSINESS_PERMIT\n                            \n                        \n                        \n                            \n                                Value : Business Permit\n                            \n                        \n            \n        \n\n    src/modules/appointment/entities/appointment.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        AppointmentStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                        \n                            testMinIOConnection   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testMinIOConnection\n                        \n                    \n                \n            \n            \n                \ntestMinIOConnection()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnnouncementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppointmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentApplicationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\n\n\nMinioService \n\nMinioService \n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    23 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
