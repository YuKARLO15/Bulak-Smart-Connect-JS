var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUpdateUserDto.html",[0,0.125,1,1.946]],["body/classes/AdminUpdateUserDto.html",[0,0.209,1,2.825,2,1.149,3,0.105,4,0.105,5,0.105,6,4.593,7,2.558,8,2.331,9,3.46,10,2.134,11,1.823,12,1.399,13,2.226,14,3.766,15,0.202,16,0.76,17,1.431,18,3.109,19,3.46,20,3.469,21,2.96,22,2.53,23,2.201,24,2.201,25,2.96,26,2.96,27,2.973,28,2.63,29,0.511,30,0.014,31,1.218,32,1.298,33,6.012,34,1.464,35,1.787,36,1.026,37,3.447,38,3.548,39,0.745,40,3.548,41,2.431,42,3.374,43,2.817,44,1.069,45,3.548,46,3.548,47,0.819,48,4.381,49,4.381,50,4.381,51,4.381,52,4.381,53,4.381,54,3.088,55,7.468,56,3.548,57,3.374,58,3.088,59,3.548,60,3.088,61,3.548,62,2.977,63,1.022,64,3.088,65,3.548,66,2.817,67,2.785,68,3.548,69,3.374,70,2.785,71,3.548,72,3.374,73,3.63,74,3.921,75,3.63,76,2.785,77,3.548,78,3.63,79,3.673,80,3.63,81,3.374,82,4.219,83,3.088,84,3.548,85,3.088,86,3.548,87,0.168,88,3.63,89,3.571,90,3.447,91,3.63,92,3.951,93,1.444,94,4.855,95,1.237,96,2.098,97,2.227,98,1.795,99,0.168,100,2.558,101,2.785,102,2.785,103,2.227,104,2.785,105,2.378,106,2.785,107,3.088,108,3.63,109,1.444,110,0.008,111,0.008]],["title/entities/Announcement.html",[112,1.306,113,2.701]],["body/entities/Announcement.html",[0,0.152,3,0.145,4,0.145,5,0.145,8,2.077,10,2.651,15,0.279,16,0.943,29,0.535,30,0.014,31,1.06,32,1.339,34,2.112,36,1.405,39,0.768,47,0.807,87,0.164,99,0.164,110,0.01,111,0.01,112,1.584,113,4.19,114,2.162,115,4.256,116,3.047,117,5.998,118,5.998,119,3.662,120,5.998,121,4.618,122,2.956,123,4.075,124,4.891,125,5.03,126,7.677,127,5.536,128,3.924,129,4.891,130,4.907,131,4.891,132,3.662,133,4.891,134,5.441,135,3.163,136,1.899,137,4.891,138,2.732,139,4.891,140,5.441,141,4.891,142,4.969,143,4.891,144,3.884,145,1.643,146,4.891]],["title/controllers/AnnouncementController.html",[147,1.354,148,2.906]],["body/controllers/AnnouncementController.html",[0,0.143,3,0.137,4,0.137,5,0.137,11,2.424,15,0.263,17,1.296,29,0.482,30,0.014,31,1.368,32,1.28,34,1.338,36,1.54,39,0.734,63,1.025,87,0.237,99,0.154,110,0.01,111,0.01,147,1.546,148,4.334,149,1.666,150,4.005,151,2.445,152,4.602,153,1.878,154,2.446,155,3.427,156,2.902,157,5.231,158,2.902,159,4.005,160,4.741,161,3.746,162,4.602,163,2.385,164,2.359,165,4.602,166,2.034,167,3.554,168,4.602,169,4.005,170,6.011,171,4.602,172,2.328,173,3.194,174,5.231,175,2.445,176,4.334,177,4.602,178,2.575,179,5.229,180,4.028,181,4.602,182,3.554,183,3.083,184,2.445,185,2.721,186,7.364,187,2.888,188,0.78,189,4.202,190,4.005,191,2.222,192,4.718,193,2.222,194,4.602,195,1.951,196,2.124,197,4.005,198,1.714,199,4.602,200,4.602,201,4.602,202,4.602,203,3.083,204,4.602,205,3.083,206,4.602,207,3.612,208,4.602]],["title/modules/AnnouncementModule.html",[209,1.306,210,2.701]],["body/modules/AnnouncementModule.html",[0,0.176,3,0.169,4,0.169,5,0.169,30,0.014,87,0.262,99,0.19,110,0.011,111,0.011,113,3.807,148,5.317,149,2.485,188,0.963,189,5.21,190,4.944,209,2.388,210,5.401,211,2.743,212,2.743,213,3.018,214,3.018,215,2.743,216,3.918,217,3.918,218,4.944,219,4.944,220,4.944,221,3.646,222,2.622,223,2.874,224,5.681,225,3.179,226,2.057,227,5.681,228,4.944,229,3.179,230,5.681]],["title/injectables/AnnouncementService.html",[189,2.53,231,0.915]],["body/injectables/AnnouncementService.html",[0,0.127,3,0.122,4,0.122,5,0.122,11,2.291,15,0.235,17,1.287,29,0.479,30,0.014,31,1.344,34,1.195,36,1.525,39,0.727,63,1.018,87,0.245,99,0.137,110,0.009,111,0.009,113,5.012,116,2.465,119,3.362,136,1.654,145,1.381,153,1.742,154,2.575,155,3.276,156,2.692,157,4.852,158,2.692,159,3.577,160,4.695,163,2.369,164,2.285,166,2.465,169,4.852,172,2.079,173,2.962,174,4.852,175,2.962,178,2.3,179,5.1,185,2.43,188,0.697,189,3.499,191,1.984,192,4.376,193,1.984,198,1.61,226,1.488,228,3.577,231,1.265,232,1.817,233,3.577,234,2.743,235,2.181,236,4.11,237,3.432,238,4.11,239,5.575,240,4.11,241,3.363,242,4.11,243,4.11,244,4.11,245,4.11,246,4.11,247,2.43,248,2.184,249,4.11,250,1.673,251,1.838,252,4.11,253,2.557,254,6.327,255,5.575,256,3.499,257,3.736,258,4.11,259,1.331,260,1.239,261,4.11,262,1.742,263,3.499,264,4.11,265,4.11,266,1.546,267,4.11,268,2.754]],["title/controllers/AppController.html",[147,1.354,269,2.906]],["body/controllers/AppController.html",[0,0.179,3,0.172,4,0.172,5,0.172,15,0.33,30,0.014,32,1.175,39,0.674,47,0.759,87,0.232,99,0.193,110,0.011,111,0.011,147,2.33,149,2.093,153,2.166,164,2.166,188,0.98,195,2.451,196,2.669,198,1.574,269,5,270,5.031,271,6.705,272,7.704,273,5.781,274,6.935,275,5.781,276,1.946,277,4.663,278,5.031,279,5.781,280,5.781]],["title/modules/AppModule.html",[209,1.306,281,2.906]],["body/modules/AppModule.html",[0,0.125,3,0.12,4,0.12,5,0.12,27,1.779,28,1.574,29,0.263,30,0.014,47,0.561,87,0.268,99,0.135,110,0.009,111,0.009,114,1.779,136,1.758,149,1.99,187,3.449,188,0.682,209,2.027,210,4.87,211,1.943,212,1.943,213,2.138,214,2.138,215,1.943,216,3.325,217,2.138,221,2.92,222,1.858,223,2.036,225,2.252,226,1.457,229,3.502,234,1.847,241,2.851,251,1.09,253,2.103,266,2.067,269,4.513,277,4.562,278,3.502,281,5.907,282,3.502,283,3.502,284,3.502,285,4.87,286,4.87,287,4.87,288,4.87,289,4.298,290,4.87,291,4.024,292,5.496,293,3.977,294,2.252,295,3.502,296,2.901,297,3.158,298,4.024,299,4.024,300,4.024,301,4.024,302,3.158,303,4.024,304,4.024,305,4.024,306,4.024,307,2.901,308,4.024,309,4.024,310,4.024,311,4.024,312,2.901,313,3.502,314,3.502,315,3.502,316,4.024,317,2.901,318,4.024,319,4.024,320,4.024,321,2.901,322,4.024,323,3.502,324,3.502,325,4.783,326,4.024,327,3.25,328,4.513,329,5.447,330,3.158,331,4.024,332,2.526,333,4.024,334,4.024,335,3.502,336,2.036,337,4.024,338,5.853,339,4.024,340,3.502,341,4.024,342,4.024,343,4.024,344,4.024,345,6.725,346,5.496,347,4.313,348,4.024,349,5.496,350,3.158,351,4.024,352,3.502,353,4.024,354,4.024,355,4.024,356,2.526,357,2.901,358,4.024,359,2.696,360,4.024,361,4.024,362,4.024,363,4.024,364,4.024,365,4.024,366,4.024,367,3.502]],["title/injectables/AppService.html",[231,0.915,277,2.53]],["body/injectables/AppService.html",[0,0.191,3,0.183,4,0.183,5,0.183,15,0.351,30,0.014,39,0.598,47,0.735,87,0.206,99,0.206,110,0.012,111,0.012,153,2.247,164,1.921,188,1.043,198,1.396,231,1.633,232,2.719,271,6.842,277,4.516,368,5.353,369,6.151,370,6.151,371,6.151]],["title/entities/ApplicationStatusHistory.html",[112,1.306,372,2.701]],["body/entities/ApplicationStatusHistory.html",[0,0.137,3,0.131,4,0.131,5,0.131,15,0.334,16,0.884,29,0.518,30,0.014,31,1.185,32,1.312,36,1.339,39,0.753,47,0.79,63,1.061,87,0.196,99,0.148,110,0.01,111,0.01,112,1.434,114,1.957,122,2.385,123,3.465,127,5.388,130,4.599,132,3.49,135,3.915,136,1.954,144,3.78,145,1.488,266,1.665,276,2.198,372,3.927,373,3.962,374,6.816,375,3.853,376,3.884,377,5.717,378,6.569,379,6.569,380,6.569,381,6.569,382,4.402,383,4.388,384,2.779,385,4.599,386,5.86,387,4.599,388,4.225,389,4.427,390,6.085,391,4.427,392,4.3,393,5.865,394,4.427,395,2.967,396,5.86,397,4.427,398,5.86,399,4.427,400,4.427,401,5.86,402,4.427,403,5.86,404,4.427,405,5.1,406,4.427,407,3.678,408,3.465,409,2.477,410,2.779,411,4.427,412,3.853,413,4.427,414,2.352]],["title/entities/Appointment.html",[112,1.306,415,2.53]],["body/entities/Appointment.html",[0,0.127,3,0.121,4,0.121,5,0.121,12,1.364,15,0.233,16,0.837,20,3.043,23,2.371,24,2.371,29,0.534,30,0.014,31,1.146,32,1.372,34,1.833,36,1.285,39,0.787,44,1.229,47,0.833,63,0.568,87,0.185,99,0.185,110,0.009,111,0.009,112,1.321,114,1.803,116,2.786,121,4.223,122,2.97,123,3.727,125,3.717,132,3.349,135,3.422,136,1.952,138,2.087,142,4.545,144,4.139,145,1.371,266,2.087,276,1.769,384,2.56,407,3.482,408,3.28,415,3.482,416,3.202,417,4.947,418,4.947,419,4.947,420,3.956,421,3.956,422,3.956,423,3.956,424,2.377,425,4.079,426,4.079,427,3.202,428,4.079,429,4.079,430,4.079,431,4.079,432,4.079,433,4.079,434,4.079,435,4.079,436,4.354,437,4.079,438,4.079,439,4.079,440,4.44,441,4.183,442,4.079,443,4.079,444,2.733,445,4.354,446,5.547,447,4.079,448,4.079,449,2.167,450,2.947,451,4.354,452,3.104,453,3.482,454,4.079,455,2.941,456,3.55]],["title/controllers/AppointmentController.html",[147,1.354,457,2.906]],["body/controllers/AppointmentController.html",[0,0.08,3,0.077,4,0.077,5,0.077,8,1.2,10,2.314,11,2.349,12,1.43,15,0.148,17,1.235,29,0.459,30,0.014,31,0.438,32,1.228,36,1.54,39,0.705,47,0.814,63,0.977,87,0.239,95,0.902,96,1.529,99,0.086,110,0.007,111,0.007,122,2.949,147,0.869,149,0.936,151,1.374,153,1.244,154,2.399,155,2.635,156,1.923,158,1.923,161,2.229,163,2.312,164,2.263,166,1.143,167,2.355,175,1.374,176,1.864,178,1.447,180,1.733,182,2.873,183,1.733,184,1.374,185,3.227,187,1.623,188,0.438,191,1.248,193,1.248,195,1.096,196,1.839,198,1.62,203,1.733,205,2.669,207,2.029,234,2.733,250,1.052,251,1.079,253,1.632,259,2.017,260,2.07,276,1.879,332,2.5,356,1.623,415,4.913,418,3.813,424,0.869,440,3.425,457,2.872,458,2.25,459,5.979,460,3.466,461,3.983,462,3.466,463,3.983,464,4.858,465,3.054,466,3.049,467,2.25,468,3.907,469,3.387,470,2.25,471,2.586,472,2.669,473,2.116,474,2.015,475,2.586,476,3.026,477,2.25,478,5.224,479,2.25,480,3.983,481,2.586,482,2.25,483,5.457,484,3.983,485,2.586,486,2.586,487,2.586,488,2.586,489,2.586,490,2.25,491,3.983,492,4.228,493,2.586,494,2.586,495,2.586,496,4.283,497,4.062,498,2.586,499,2.586,500,5.418,501,3.983,502,2.586,503,2.586,504,5.129,505,2.586,506,2.586,507,2.586,508,2.586,509,4.487,510,2.25,511,2.586,512,1.447,513,2.586,514,2.586,515,1.529,516,3.485,517,2.586,518,2.586,519,3.049,520,2.25,521,3.126,522,1.308,523,1.733,524,1.529,525,2.982,526,1.864,527,0.869,528,1.864,529,1.733,530,2.029,531,2.029,532,1.733,533,4.172,534,2.669,535,1.733,536,2.586,537,2.586,538,3.485,539,1.864,540,1.447,541,2.586,542,3.949,543,2.25,544,2.586,545,4.626,546,2.586,547,2.586,548,2.029,549,3.699,550,3.983,551,2.586,552,2.586,553,2.586,554,6.225,555,2.586,556,2.029,557,1.864,558,2.586,559,2.586,560,3.983,561,3.983,562,3.049,563,2.586,564,2.25,565,2.586,566,2.586,567,2.029,568,2.029,569,2.586,570,2.586,571,2.25,572,2.586,573,4.858,574,2.586,575,2.586,576,2.015,577,3.983,578,3.983,579,3.466,580,3.126,581,3.466,582,3.466,583,3.983,584,3.983,585,2.586,586,2.586,587,1.864,588,2.586,589,2.586,590,1.864,591,2.029,592,2.586,593,2.25,594,2.586,595,2.586,596,2.586,597,2.586,598,2.586]],["title/modules/AppointmentModule.html",[209,1.306,285,2.701]],["body/modules/AppointmentModule.html",[0,0.176,3,0.169,4,0.169,5,0.169,30,0.014,87,0.262,99,0.19,110,0.011,111,0.011,149,2.485,188,0.963,209,2.388,211,2.743,212,2.743,213,3.018,214,3.018,215,2.743,216,3.918,217,3.918,221,3.646,222,2.622,223,2.874,225,3.179,226,2.057,229,3.179,285,5.401,415,3.566,457,5.317,519,5.21,520,4.944,529,3.807,599,4.944,600,4.944,601,4.944,602,5.681,603,5.681,604,5.681]],["title/injectables/AppointmentService.html",[231,0.915,519,2.53]],["body/injectables/AppointmentService.html",[0,0.068,3,0.065,4,0.065,5,0.065,11,1.808,15,0.125,17,1.225,29,0.456,30,0.014,31,1.228,36,1.506,39,0.704,47,0.788,63,0.969,79,1.38,87,0.204,96,2.074,99,0.073,109,0.895,110,0.006,111,0.006,122,3.168,145,0.739,153,1.095,154,1.781,155,2.112,156,1.693,158,1.693,163,2.254,164,2.237,166,1.55,175,1.863,178,1.23,188,0.373,191,1.061,193,1.061,198,1.551,226,0.796,231,0.796,232,0.972,234,2.702,235,1.372,237,2.526,241,3.257,247,1.3,248,1.168,250,2.483,251,2.07,253,2.25,256,3.134,257,1.473,259,2.371,260,2.017,262,1.855,263,2.201,276,1.983,357,4.827,385,1.725,415,4.674,417,4.972,418,3.919,419,4.563,424,1.178,440,3.134,450,1.168,451,1.725,452,1.23,453,1.38,456,3.807,459,4.747,460,3.807,462,3.052,466,2.746,467,1.913,468,3.649,476,0.932,482,1.913,490,3.052,492,4.345,500,4.747,504,3.807,509,4.245,512,1.23,516,1.3,519,2.201,521,2.752,529,1.473,564,1.913,571,3.052,576,2.76,605,1.913,606,4.375,607,3.507,608,4.993,609,3.507,610,4.375,611,4.993,612,2.198,613,2.198,614,3.507,615,2.198,616,2.198,617,2.198,618,2.198,619,3.507,620,2.198,621,2.198,622,2.198,623,2.198,624,3.507,625,2.198,626,2.198,627,2.198,628,2.198,629,2.198,630,2.198,631,2.198,632,2.198,633,1.725,634,2.746,635,2.198,636,2.198,637,1.913,638,1.913,639,2.198,640,2.768,641,2.198,642,2.198,643,2.198,644,3.807,645,2.198,646,4.375,647,2.198,648,3.894,649,1.913,650,2.198,651,2.198,652,2.198,653,2.198,654,3.434,655,3.507,656,5.455,657,5.06,658,4.375,659,4.375,660,1.913,661,3.507,662,3.507,663,3.507,664,3.507,665,3.507,666,4.375,667,3.507,668,2.198,669,1.774,670,2.198,671,3.507,672,2.198,673,2.686,674,3.441,675,4.281,676,1.23,677,2.198,678,2.198,679,2.198,680,1.913,681,2.198,682,2.198,683,2.198,684,3.507,685,3.507,686,3.507,687,2.198,688,2.198,689,4.375,690,1.913,691,2.198,692,2.198,693,2.198,694,1.38,695,2.198,696,2.198,697,1.913,698,2.198,699,2.198,700,2.198,701,2.198,702,2.198,703,2.198,704,3.6,705,2.198,706,3.507,707,2.198,708,2.198,709,2.198,710,2.198,711,2.198,712,2.198,713,2.752,714,3.507,715,3.052,716,2.752,717,3.052,718,1.585,719,5.814,720,2.198,721,2.198,722,2.198,723,3.507,724,2.198,725,2.198,726,2.198,727,2.198,728,1.168,729,1.168,730,1.585,731,4.375,732,1.774,733,3.507,734,3.507,735,2.198,736,1.913,737,3.507,738,2.198]],["title/controllers/AuthController.html",[147,1.354,739,2.701]],["body/controllers/AuthController.html",[0,0.074,1,2.741,3,0.071,4,0.071,5,0.071,8,2.45,10,1.957,11,2.532,12,1.426,13,1.055,14,3.479,15,0.136,16,0.789,17,0.999,22,2.453,28,2.55,29,0.513,30,0.014,31,0.962,32,0.962,35,1.466,36,1.284,39,0.552,41,1.806,44,1.391,47,0.736,63,0.839,87,0.229,95,0.832,97,2.897,99,0.08,110,0.006,111,0.006,147,0.802,149,0.864,151,1.268,153,1.169,161,1.335,163,1.839,164,1.773,182,2.729,184,1.268,188,0.404,193,1.152,195,1.011,198,1.288,234,2.388,251,0.646,253,1.551,259,1.951,260,1.815,262,1.957,276,2.105,336,2.644,424,1.257,469,1.727,472,2.507,474,2.644,476,2.216,496,1.872,497,1.411,515,1.411,522,1.207,524,1.411,525,1.893,527,1.551,532,1.599,533,4.036,534,5.065,535,1.599,538,2.729,539,3.328,540,2.924,542,3.804,549,1.497,576,2.335,590,5.041,640,1.957,669,2.335,673,1.957,674,2.964,676,2.094,732,3.047,739,2.507,740,1.872,741,3.623,742,2.936,743,3.804,744,3.256,745,4.017,746,2.386,747,3.644,748,3.623,749,5.677,750,4.548,751,3.256,752,2.936,753,2.936,754,2.386,755,2.386,756,2.386,757,4.701,758,2.386,759,5.242,760,5.242,761,3.715,762,3.256,763,4.616,764,5.674,765,5.242,766,2.386,767,3.256,768,3.256,769,3.256,770,2.386,771,2.698,772,2.076,773,5.242,774,5.242,775,3.741,776,2.386,777,2.386,778,3.256,779,2.386,780,4.343,781,2.076,782,2.076,783,5.124,784,2.507,785,2.936,786,2.386,787,2.386,788,2.386,789,2.076,790,4.092,791,2.386,792,4.548,793,4.548,794,3.741,795,2.386,796,2.386,797,2.386,798,2.076,799,4.092,800,2.386,801,3.328,802,2.386,803,2.386,804,2.386,805,2.386,806,2.386,807,2.386,808,2.386,809,2.386,810,2.386,811,3.09,812,2.729,813,1.872,814,1.872,815,1.872,816,2.076,817,1.411,818,1.72,819,2.076,820,1.72,821,3.256,822,4.94,823,0.802,824,2.076,825,2.076,826,2.936,827,2.212,828,2.698,829,2.094,830,3.623,831,2.076,832,2.076,833,1.872,834,1.872,835,2.076,836,3.328,837,3.328,838,2.452,839,2.076,840,2.076,841,2.076,842,1.497,843,2.076,844,1.72,845,2.076,846,2.076,847,1.872,848,1.872,849,3.093,850,3.37,851,3.328,852,4.017,853,3.623,854,5.242,855,2.897,856,2.076,857,2.076,858,2.076,859,3.256,860,2.698,861,2.076,862,1.872,863,2.076,864,2.076,865,2.076,866,2.076]],["title/modules/AuthModule.html",[209,1.306,286,2.701]],["body/modules/AuthModule.html",[0,0.155,3,0.149,4,0.149,5,0.149,12,0.914,30,0.014,87,0.27,99,0.167,110,0.01,111,0.01,149,2.297,188,0.848,198,1.135,209,2.256,211,2.415,212,2.415,213,2.658,214,2.658,215,2.415,216,3.701,217,3.701,221,3.37,222,2.309,223,2.531,225,2.799,226,1.811,229,3.549,286,5.472,289,4.567,293,4.119,294,2.799,302,3.927,312,3.607,313,4.354,449,2.658,739,4.667,812,4.829,813,3.927,820,3.607,867,4.354,868,4.354,869,4.354,870,5.003,871,4.829,872,5.003,873,5.003,874,3.927,875,6.343,876,3.14,877,5.003,878,5.003,879,5.003,880,2.958,881,5.003,882,5.003,883,5.003,884,5.003,885,5.003,886,5.003,887,5.003,888,4.354]],["title/injectables/AuthService.html",[231,0.915,812,2.383]],["body/injectables/AuthService.html",[0,0.045,1,1.863,3,0.043,4,0.043,5,0.043,9,0.857,10,2.146,11,2.314,12,1.425,14,3.024,15,0.083,17,0.982,18,0.77,21,1.256,22,2.521,23,1.452,24,1.225,25,2.196,26,1.952,27,3.252,28,2.262,29,0.379,30,0.014,31,1.062,34,1.552,35,1.946,36,1.137,39,0.542,43,1.822,44,1.163,47,0.517,62,1.468,63,0.92,87,0.193,96,0.857,97,1.558,98,2.822,99,0.048,110,0.004,111,0.004,136,0.649,138,1.225,145,0.487,153,0.775,154,0.59,158,2.095,163,1.807,164,1.668,185,1.468,188,0.245,193,0.699,198,1.476,226,0.524,231,0.563,232,0.64,234,2.28,235,0.971,237,1.952,241,1.052,248,0.77,250,2.27,251,2.122,253,2.539,259,2.465,260,2.239,262,2.146,266,1.781,321,1.79,340,1.261,350,3.973,356,1.558,414,2.05,424,1.874,449,0.77,476,2.007,497,1.468,516,3.42,527,2.28,545,1.948,562,0.909,576,2.561,591,3.028,634,2.422,637,4.405,640,2.656,644,2.16,648,0.81,669,2.822,673,2.709,674,3.424,676,2.649,694,2.044,729,2.306,732,2.561,741,2.556,742,1.948,743,1.663,744,2.16,748,4.377,783,1.79,784,0.971,789,2.16,790,3.63,798,2.16,799,2.971,801,1.044,811,1.926,812,1.468,814,1.137,815,1.137,817,0.857,826,1.948,827,0.857,829,2.832,833,1.137,836,3.85,837,1.79,838,2.837,849,0.971,850,1.389,851,1.044,855,2.044,860,3.413,862,1.948,874,1.137,880,0.857,889,1.261,890,2.482,891,2.482,892,2.482,893,2.482,894,1.261,895,5.062,896,2.561,897,1.448,898,1.663,899,1.448,900,1.448,901,3.358,902,2.482,903,1.448,904,2.482,905,1.448,906,1.448,907,1.448,908,2.482,909,1.448,910,2.482,911,1.448,912,0.909,913,2.482,914,1.448,915,2.782,916,1.558,917,1.044,918,0.971,919,3.996,920,3.859,921,1.448,922,3.257,923,3.973,924,3.973,925,5.062,926,3.973,927,4.405,928,4.405,929,4.405,930,4.34,931,1.448,932,1.448,933,1.044,934,1.044,935,1.448,936,2.834,937,1.448,938,2.482,939,3.257,940,1.448,941,1.448,942,1.448,943,1.448,944,3.973,945,3.257,946,2.782,947,1.79,948,1.79,949,2.182,950,3.129,951,2.482,952,1.448,953,1.137,954,2.586,955,2.586,956,1.79,957,1.448,958,1.389,959,1.044,960,3.028,961,1.448,962,2.782,963,2.348,964,3.257,965,2.782,966,1.79,967,2.482,968,2.482,969,1.448,970,2.482,971,2.482,972,3.358,973,2.16,974,3.358,975,1.448,976,1.79,977,1.044,978,1.663,979,1.448,980,1.448,981,1.044,982,2.482,983,1.448,984,3.257,985,1.448,986,1.448,987,1.448,988,1.448,989,1.448,990,1.448,991,1.448,992,1.448,993,1.448,994,1.448,995,1.448,996,0.971,997,1.448,998,2.482,999,2.482,1000,0.971,1001,2.182,1002,3.257,1003,1.448,1004,1.448,1005,3.257,1006,0.971,1007,1.448,1008,1.822,1009,1.261,1010,2.282,1011,3.257,1012,1.448,1013,1.448,1014,1.448,1015,1.79,1016,3.257,1017,1.448,1018,2.482,1019,1.044,1020,3.257,1021,1.044,1022,2.482,1023,1.044,1024,3.257,1025,1.044,1026,1.448,1027,1.79,1028,1.448,1029,2.482,1030,1.448,1031,2.482,1032,1.448,1033,1.448,1034,4.34,1035,2.482,1036,1.448,1037,1.448,1038,2.482,1039,0.971,1040,1.448,1041,1.448,1042,3.257,1043,1.663,1044,3.257,1045,2.482,1046,2.348,1047,1.448,1048,3.859,1049,1.261,1050,1.261,1051,1.448,1052,1.448,1053,1.448,1054,1.448,1055,2.482,1056,1.448,1057,1.448,1058,1.448,1059,2.482,1060,1.448,1061,1.261,1062,2.482,1063,1.448,1064,1.261,1065,1.448,1066,1.448,1067,2.834,1068,1.137,1069,1.448,1070,1.448,1071,1.137,1072,3.859,1073,1.448,1074,1.261,1075,2.482,1076,1.448,1077,2.482,1078,1.448,1079,1.448,1080,3.257,1081,1.448,1082,4.34,1083,1.448,1084,1.137,1085,1.448,1086,2.482,1087,1.448,1088,1.448,1089,2.482,1090,1.448,1091,1.448,1092,1.448,1093,1.448,1094,1.448,1095,1.448,1096,1.448,1097,1.261,1098,2.395,1099,1.448,1100,1.448,1101,1.448,1102,3.358,1103,1.448,1104,2.482,1105,1.448,1106,1.448,1107,1.448,1108,1.448,1109,1.261,1110,1.448]],["title/interfaces/AuthenticatedUser.html",[469,1.861,823,1.354]],["body/interfaces/AuthenticatedUser.html",[0,0.153,3,0.147,4,0.147,5,0.147,13,2.182,15,0.282,16,0.949,22,2.942,29,0.453,30,0.014,31,1.235,35,1.385,36,1.534,39,0.48,41,3.341,44,1.487,47,0.769,63,0.687,87,0.244,99,0.21,110,0.01,111,0.01,188,0.836,195,2.092,198,1.12,231,1.427,251,1.974,259,2.037,260,1.895,266,1.857,293,4.093,294,2.761,328,3.558,424,2.113,469,3.195,527,2.628,811,2.918,823,2.113,855,3.098,871,2.918,876,3.098,880,3.718,947,4.99,948,3.558,950,3.558,996,3.307,1111,2.761,1112,3.558,1113,3.873,1114,3.873,1115,4.935,1116,3.558,1117,4.214,1118,3.873,1119,3.873,1120,3.558,1121,3.873,1122,4.638,1123,3.873,1124,3.873,1125,3.307,1126,3.873,1127,3.873,1128,3.873,1129,3.873,1130,3.873,1131,3.873,1132,3.873,1133,3.873,1134,3.873,1135,3.873,1136,3.873,1137,3.873]],["title/entities/Counter.html",[112,1.306,1138,2.383]],["body/entities/Counter.html",[0,0.155,3,0.149,4,0.149,5,0.149,15,0.286,16,0.958,29,0.506,30,0.014,31,1.242,32,1.282,34,1.846,36,1.421,39,0.735,44,1.51,47,0.648,63,1.053,87,0.212,99,0.212,110,0.011,111,0.011,112,1.623,114,2.215,125,3.358,132,3.703,135,3.707,136,1.822,144,3.825,145,1.684,276,1.956,392,2.963,408,3.755,441,4.471,444,3.358,445,4.983,850,4.101,1138,3.755,1139,3.933,1140,6.066,1141,6.97,1142,3.73,1143,4.361,1144,6.349,1145,7.328,1146,6.349,1147,5.01,1148,5.01,1149,5.01,1150,5.01,1151,5.935,1152,5.01,1153,5.526,1154,5.01,1155,3.985,1156,4.578,1157,5.01,1158,5.01]],["title/classes/CreateAnnouncementDto.html",[0,0.125,160,2.53]],["body/classes/CreateAnnouncementDto.html",[0,0.207,2,1.761,3,0.161,4,0.161,5,0.161,8,2.179,15,0.31,16,1.008,17,1.388,29,0.507,30,0.014,32,1.313,39,0.753,47,0.824,87,0.182,89,3.483,90,3.575,93,2.212,99,0.182,110,0.011,111,0.011,117,6.294,118,6.294,119,3.843,120,6.294,138,2.513,160,4.193,1159,6.861,1160,4.266,1161,5.814,1162,5.435,1163,5.814,1164,5.435,1165,5.435,1166,5.435,1167,5.435,1168,5.435,1169,4.539,1170,5.243]],["title/classes/CreateAppointmentDto.html",[0,0.125,468,2.53]],["body/classes/CreateAppointmentDto.html",[0,0.189,2,1.523,3,0.14,4,0.14,5,0.14,15,0.268,16,0.92,17,1.337,20,3.265,23,2.544,24,2.544,29,0.527,30,0.014,31,1.033,32,1.364,39,0.783,47,0.841,87,0.204,89,3.57,90,3.618,93,1.913,99,0.157,110,0.01,111,0.01,138,2.293,276,1.898,417,5.308,419,5.308,420,4.245,421,4.245,422,4.245,423,4.245,424,2.273,440,4.245,468,3.826,529,3.15,1161,4.091,1169,4.92,1171,7.045,1172,3.689,1173,7.597,1174,4.701,1175,4.701,1176,4.701,1177,4.701,1178,4.701,1179,4.701,1180,4.701,1181,4.701,1182,4.701,1183,4.701,1184,4.091,1185,4.701,1186,4.701,1187,3.15,1188,6.095,1189,4.091]],["title/classes/CreateDocumentApplicationDto.html",[0,0.125,1190,2.701]],["body/classes/CreateDocumentApplicationDto.html",[0,0.19,2,1.532,3,0.14,4,0.14,5,0.14,8,2.238,15,0.27,16,0.923,17,1.381,23,1.779,24,1.779,29,0.498,30,0.014,32,1.216,37,3.327,39,0.697,47,0.732,87,0.227,89,3.131,90,3.131,93,1.924,95,1.649,99,0.158,110,0.01,111,0.01,266,2.301,276,1.717,336,3.095,373,3.758,376,4.641,382,4.545,409,4.333,410,2.968,441,2.796,562,4.501,1098,3.095,1187,3.168,1190,4.099,1191,6.464,1192,3.711,1193,5.902,1194,6.159,1195,5.902,1196,4.89,1197,6.118,1198,6.118,1199,4.801,1200,4.801,1201,5.324,1202,4.728,1203,4.115,1204,4.728,1205,4.728,1206,5.324,1207,6.118,1208,6.118,1209,4.099,1210,4.728,1211,4.728,1212,6.118,1213,6.118,1214,4.728,1215,6.118,1216,3.409,1217,3.758,1218,4.728,1219,4.728,1220,4.728,1221,4.728,1222,4.728,1223,4.728,1224,4.728,1225,5.324,1226,4.728,1227,4.728]],["title/classes/CreateQueueDto.html",[0,0.125,1228,2.701]],["body/classes/CreateQueueDto.html",[0,0.194,2,1.584,3,0.145,4,0.145,5,0.145,15,0.279,16,0.943,17,1.416,20,3.327,23,2.593,24,2.593,29,0.522,30,0.014,31,1.06,32,1.353,39,0.776,47,0.844,87,0.164,89,3.603,90,3.648,93,1.991,99,0.164,110,0.01,111,0.01,138,2.352,420,4.326,421,4.326,422,4.326,423,4.326,424,2.316,1163,6.321,1169,4.711,1170,4.907,1228,4.19,1229,7,1230,3.838,1231,4.969,1232,5.998,1233,4.891,1234,4.891,1235,4.891,1236,4.891,1237,4.891,1238,4.891,1239,4.891,1240,4.891,1241,4.891,1242,4.891]],["title/classes/CreateUserDto.html",[0,0.125,1243,2.383]],["body/classes/CreateUserDto.html",[0,0.159,2,1.18,3,0.108,4,0.108,5,0.108,7,2.627,8,2.457,12,1.431,15,0.208,16,0.774,17,1.411,18,3.154,19,3.511,20,1.759,21,3.003,22,2.723,23,2.233,24,2.233,25,3.003,26,3.003,27,3.003,28,2.657,29,0.513,30,0.014,31,1.194,32,1.305,34,1.491,35,1.808,36,1.046,37,3.264,39,0.749,41,2.476,42,3.437,43,2.87,44,1.098,47,0.822,57,3.437,62,3.033,63,1.072,66,2.87,69,3.437,72,3.437,73,3.698,74,4.721,75,2.627,80,3.698,81,3.437,82,4.281,87,0.171,88,3.698,89,3.412,90,3.469,91,4.281,92,4.026,93,1.483,94,4.639,95,1.27,99,0.122,103,4.045,105,4.318,108,2.627,110,0.008,111,0.008,136,1.341,327,3.033,649,5.167,958,2.87,1010,3.033,1169,4.045,1217,3.436,1243,3.033,1244,6.764,1245,5.682,1246,4.464,1247,3.643,1248,3.643,1249,3.437,1250,3.643,1251,3.643,1252,4.045,1253,4.464,1254,3.643,1255,3.643,1256,5.129,1257,3.643,1258,3.17,1259,5.608,1260,3.643,1261,3.17,1262,4.026,1263,4.464,1264,3.643,1265,3.17,1266,5.129,1267,3.643,1268,3.17,1269,4.464,1270,3.643,1271,3.643,1272,3.643,1273,4.464,1274,3.643,1275,4.464,1276,3.643,1277,3.17,1278,3.643,1279,3.17]],["title/entities/DocumentApplication.html",[112,1.306,383,2.53]],["body/entities/DocumentApplication.html",[0,0.109,3,0.149,4,0.105,5,0.173,12,1.31,15,0.286,16,0.756,29,0.527,30,0.014,31,1.076,32,1.32,34,1.456,36,1.188,39,0.757,44,1.061,47,0.712,63,1.053,87,0.212,99,0.195,110,0.008,111,0.008,112,1.141,114,1.557,116,2.576,121,3.905,122,2.583,123,2.961,125,3.356,127,4.202,128,3.143,130,3.93,135,3.825,136,2,142,3.611,144,3.707,145,1.183,266,2.388,276,1.781,372,4.253,373,3.969,376,2.082,382,3.905,383,3.143,384,2.21,388,4.576,392,3.965,393,3.93,395,2.36,405,4.358,407,3.143,408,2.961,409,1.97,414,1.871,424,1.958,441,4.471,444,2.36,449,1.871,450,2.661,1193,5.071,1194,5.75,1195,5.071,1199,2.764,1200,4.574,1206,4.358,1280,5.657,1281,2.764,1282,4.574,1283,5.827,1284,5.827,1285,5.008,1286,3.521,1287,5.008,1288,3.521,1289,3.93,1290,3.521,1291,4.253,1292,4.358,1293,5.008,1294,3.521,1295,5.008,1296,5.008,1297,3.521,1298,3.521,1299,3.521,1300,5.008,1301,3.521,1302,4.835,1303,3.521,1304,5.008,1305,5.008,1306,5.008,1307,3.521,1308,3.521,1309,3.065,1310,4.358,1311,3.521,1312,4.981,1313,3.521,1314,3.521,1315,5.008,1316,5.071,1317,3.065,1318,3.065,1319,3.065,1320,3.065,1321,4.358,1322,3.065,1323,2.539,1324,3.065,1325,3.065,1326,3.065,1327,3.065,1328,3.065,1329,4.358,1330,3.93,1331,4.358,1332,4.358,1333,3.065,1334,2.539,1335,2.764,1336,3.065,1337,3.065,1338,3.065,1339,3.521,1340,3.521,1341,3.521,1342,3.521,1343,3.521,1344,3.521]],["title/controllers/DocumentApplicationsController.html",[147,1.354,1345,2.906]],["body/controllers/DocumentApplicationsController.html",[0,0.067,3,0.064,4,0.064,5,0.198,8,2.005,10,2.881,11,2.191,12,1.481,15,0.123,17,1.171,29,0.453,30,0.014,32,1.173,36,1.534,39,0.673,44,1.895,47,0.808,63,0.926,87,0.231,95,0.751,99,0.072,110,0.006,111,0.006,136,0.563,147,0.724,149,0.78,151,1.144,153,1.078,154,2.198,155,2.083,156,1.665,158,1.665,161,1.93,163,2.155,164,2.162,166,0.952,167,1.273,173,1.144,175,1.144,176,1.553,178,1.205,180,1.443,182,2.918,183,1.443,184,1.144,185,2.552,187,1.352,188,0.365,191,1.04,193,1.04,196,0.994,198,1.595,203,1.443,205,3.618,207,1.69,234,2.686,235,0.842,241,1.462,250,0.876,251,1.757,253,1.658,259,0.698,260,1.487,262,2.092,266,0.81,276,1.867,307,5.068,327,1.273,336,1.089,373,3.556,376,4.528,382,1.443,409,3.629,410,1.352,424,2.394,465,2.761,466,2.708,469,3.644,470,1.874,472,2.311,473,1.833,474,2.731,476,2.881,478,3.558,497,4.019,510,1.874,512,1.205,515,1.273,516,2.04,522,1.089,523,1.443,524,1.273,525,1.089,526,1.553,527,0.724,528,1.553,530,1.69,531,1.69,532,1.443,533,4.71,534,3.86,535,1.443,538,1.273,539,1.553,540,1.205,542,4.637,545,5.221,548,3.387,549,2.708,557,2.487,562,1.352,581,5.266,587,1.553,704,1.553,757,3.558,761,1.833,771,3.558,780,1.553,784,3.306,785,2.707,827,1.273,901,3.002,912,2.165,933,2.487,934,1.553,949,1.443,1043,2.311,1046,1.553,1098,1.089,1190,3.306,1216,1.553,1282,5.221,1302,2.487,1345,2.487,1346,1.874,1347,5.266,1348,4.315,1349,4.934,1350,4.315,1351,4.315,1352,4.315,1353,2.153,1354,2.153,1355,2.153,1356,3.449,1357,2.153,1358,2.153,1359,2.153,1360,2.153,1361,2.153,1362,2.153,1363,2.153,1364,5.761,1365,2.781,1366,1.874,1367,2.153,1368,2.153,1369,4.315,1370,2.153,1371,2.153,1372,2.153,1373,3.449,1374,2.487,1375,2.153,1376,2.153,1377,2.153,1378,2.153,1379,3.449,1380,3.873,1381,2.153,1382,4.315,1383,2.153,1384,3.449,1385,2.153,1386,2.153,1387,2.153,1388,4.934,1389,3.558,1390,2.153,1391,4.315,1392,2.153,1393,2.153,1394,2.153,1395,3.387,1396,5.014,1397,2.153,1398,2.153,1399,3.002,1400,2.153,1401,3.449,1402,3.449,1403,1.553,1404,1.553,1405,2.153,1406,1.874,1407,1.874,1408,3.111,1409,1.874,1410,3.002,1411,2.153,1412,2.153,1413,2.153,1414,2.153,1415,2.153,1416,2.153,1417,2.153,1418,1.874,1419,1.04,1420,3.449,1421,2.153,1422,2.153,1423,3.449,1424,2.153,1425,2.153,1426,2.153,1427,2.153,1428,2.153,1429,2.153,1430,2.153,1431,2.153,1432,1.874,1433,4.315,1434,1.69,1435,2.153,1436,2.153,1437,2.153,1438,2.153,1439,6.288,1440,1.874,1441,2.153,1442,2.153,1443,2.153,1444,2.153,1445,2.153,1446,2.153,1447,2.153,1448,2.153,1449,2.153,1450,2.153,1451,2.153,1452,2.153,1453,2.153,1454,2.153,1455,2.153,1456,1.273,1457,2.153,1458,2.153,1459,2.153,1460,2.153,1461,2.153]],["title/modules/DocumentApplicationsModule.html",[209,1.306,287,2.701]],["body/modules/DocumentApplicationsModule.html",[0,0.163,3,0.156,4,0.156,5,0.156,30,0.014,87,0.268,99,0.176,110,0.011,111,0.011,149,2.373,188,0.893,209,2.31,211,2.544,212,2.544,213,2.799,214,2.799,215,2.544,216,3.789,217,3.789,221,3.482,222,2.432,223,2.666,225,2.948,226,1.908,229,2.948,276,1.478,287,5.454,307,3.799,372,4.391,373,2.666,383,4.113,409,3.667,410,3.307,1216,4.725,1291,4.391,1317,4.585,1318,4.585,1345,5.143,1408,5.929,1409,4.585,1462,4.585,1463,4.585,1464,4.585,1465,4.862,1466,5.269,1467,5.269,1468,5.269,1469,5.269,1470,5.269]],["title/entities/DocumentFile.html",[112,1.306,1291,2.701]],["body/entities/DocumentFile.html",[0,0.136,3,0.13,4,0.13,5,0.13,15,0.333,16,0.88,29,0.521,30,0.014,31,1.181,32,1.325,36,1.334,39,0.76,47,0.806,63,1.075,87,0.195,99,0.147,110,0.01,111,0.01,112,1.423,114,1.941,122,2.372,123,3.447,127,5.693,128,3.659,132,3.476,134,5.073,135,2.949,136,1.524,140,5.073,144,3.848,145,1.476,373,3.995,376,3.869,377,5.694,383,4.374,384,2.756,385,4.575,387,4.575,388,3.166,390,6.065,392,4.409,393,4.575,395,2.943,407,3.659,408,3.447,409,2.457,410,2.756,412,3.822,414,2.333,1280,5.693,1291,3.906,1396,5.694,1418,5.694,1471,3.822,1472,6.542,1473,6.542,1474,6.542,1475,6.542,1476,5.829,1477,3.822,1478,4.391,1479,4.391,1480,5.829,1481,5.829,1482,4.391,1483,5.829,1484,4.391,1485,5.829,1486,5.829,1487,4.391,1488,5.829,1489,4.391,1490,4.391,1491,5.829,1492,4.391,1493,5.829,1494,4.391,1495,4.391,1496,4.391]],["title/interfaces/FindAllOptions.html",[823,1.354,1497,2.701]],["body/interfaces/FindAllOptions.html",[0,0.072,1,1.766,3,0.069,4,0.069,5,0.069,10,0.983,11,1.863,12,1.383,14,1.766,15,0.132,16,0.552,17,0.985,18,3.161,19,3.518,21,2.832,22,2.61,23,2.428,24,2.343,25,3.441,26,3.361,27,2.63,28,2.759,29,0.337,30,0.014,31,1.228,34,0.674,35,1.98,36,1.494,43,2.047,44,1.945,47,0.679,63,0.828,66,1.297,87,0.222,98,2.292,99,0.122,109,0.944,110,0.006,111,0.006,116,1.025,119,2.407,136,0.606,138,0.872,145,0.779,154,0.944,158,2.187,166,1.025,173,3.43,175,1.232,188,0.393,191,1.119,198,1.575,209,0.751,226,0.839,231,0.83,234,2.232,235,0.907,237,1.85,241,2.641,247,1.371,248,1.232,250,1.489,251,2.162,253,2.561,256,1.455,257,1.553,259,2.152,260,2.002,262,2.181,263,2.296,268,1.553,414,2.975,465,1.297,512,1.297,516,1.371,527,2.371,540,1.297,576,2.292,634,1.455,640,0.983,648,2.047,669,1.85,673,0.983,674,2.003,694,1.455,728,1.943,729,1.232,732,2.832,817,2.163,823,1.229,829,3.485,838,2.975,896,2.292,898,1.553,915,1.671,916,2.296,917,1.671,918,1.553,919,4.558,946,2.637,949,2.451,954,2.451,955,3.987,956,2.637,958,1.297,959,1.671,962,2.637,963,2.637,965,2.637,966,2.637,976,2.637,977,1.671,978,1.553,981,1.671,1000,1.553,1001,2.451,1006,2.451,1008,1.297,1010,2.679,1015,1.671,1019,2.637,1021,1.671,1023,2.637,1025,1.671,1027,2.637,1098,1.173,1111,1.297,1243,2.679,1249,1.553,1365,2.187,1419,1.766,1456,1.371,1497,3.036,1498,1.671,1499,3.909,1500,4.796,1501,1.671,1502,1.671,1503,1.553,1504,3.447,1505,3.447,1506,3.036,1507,3.036,1508,3.036,1509,2.878,1510,3.036,1511,2.871,1512,1.297,1513,1.819,1514,1.819,1515,1.819,1516,1.819,1517,3.556,1518,2.871,1519,1.819,1520,1.819,1521,2.871,1522,2.451,1523,1.819,1524,1.819,1525,1.819,1526,1.819,1527,1.819,1528,1.819,1529,2.871,1530,1.819,1531,2.871,1532,1.671,1533,1.819,1534,4.037,1535,1.819,1536,1.819,1537,2.871,1538,4.037,1539,2.871,1540,1.819,1541,1.819,1542,1.819,1543,1.819,1544,1.819,1545,1.819,1546,1.819,1547,1.819,1548,1.819,1549,2.871,1550,3.556,1551,1.819,1552,2.871,1553,1.819,1554,1.819,1555,2.871,1556,1.671,1557,1.819,1558,1.819,1559,1.819,1560,1.819,1561,2.871,1562,1.819,1563,1.819,1564,2.871,1565,1.819,1566,1.819,1567,1.819,1568,1.819,1569,1.819,1570,1.819,1571,1.819,1572,1.819,1573,1.819,1574,1.819,1575,1.819,1576,2.871,1577,1.819,1578,1.819,1579,1.819,1580,1.819,1581,1.671,1582,1.819,1583,1.671]],["title/injectables/JwtAuthGuard.html",[231,0.915,522,2.039]],["body/injectables/JwtAuthGuard.html",[0,0.194,3,0.186,4,0.186,5,0.186,13,3.212,30,0.014,87,0.243,99,0.209,110,0.012,111,0.012,188,1.06,231,1.649,232,2.766,522,3.676,876,3.927,1584,5.445,1585,5.445,1586,7.266,1587,6.257]],["title/interfaces/JwtPayload.html",[823,1.354,1117,2.701]],["body/interfaces/JwtPayload.html",[0,0.153,3,0.146,4,0.146,5,0.146,13,2.175,15,0.281,16,0.947,17,1.105,22,2.94,29,0.452,30,0.014,31,1.234,35,1.381,36,1.279,39,0.478,41,2.375,44,1.483,47,0.798,63,0.685,87,0.243,99,0.21,110,0.01,111,0.01,188,0.834,195,2.086,198,1.117,231,1.424,251,1.972,259,2.033,260,1.891,266,1.851,293,4.087,294,2.753,328,3.548,424,2.109,469,2.897,527,2.626,811,2.909,823,2.109,855,3.088,871,2.909,876,3.088,880,3.711,947,4.983,948,5.249,950,3.548,996,3.297,1111,2.753,1112,3.548,1113,3.862,1114,3.862,1115,4.926,1116,3.548,1117,4.631,1118,3.862,1119,3.862,1120,3.548,1121,3.862,1122,4.631,1123,3.862,1124,3.862,1125,3.297,1126,3.862,1127,3.862,1128,3.862,1129,3.862,1130,3.862,1131,3.862,1132,3.862,1133,3.862,1134,3.862,1135,3.862,1136,3.862,1137,3.862]],["title/injectables/JwtStrategy.html",[231,0.915,871,2.383]],["body/injectables/JwtStrategy.html",[0,0.151,3,0.145,4,0.145,5,0.145,13,2.756,15,0.278,17,1.097,22,2.728,29,0.408,30,0.014,31,1.057,35,1.366,36,1.271,39,0.669,41,2.351,44,1.467,47,0.702,63,0.957,87,0.242,99,0.208,110,0.01,111,0.01,153,1.948,163,2.019,164,1.521,188,0.825,195,2.064,198,1.105,231,1.415,232,2.152,235,1.904,251,1.964,259,2.019,260,1.879,266,1.832,293,4.534,294,2.724,328,3.511,424,2.095,469,3.175,527,2.437,811,2.879,823,2.095,855,3.056,871,3.687,876,3.056,880,3.687,947,5.228,948,3.511,950,3.511,960,4.893,996,3.263,1112,3.511,1113,3.821,1114,3.821,1115,4.893,1116,3.511,1117,4.859,1118,3.821,1119,3.821,1120,3.511,1121,4.893,1122,4.608,1123,3.821,1124,3.821,1125,3.263,1126,3.821,1127,3.821,1128,3.821,1129,3.821,1130,3.821,1131,4.893,1132,3.821,1133,3.821,1134,3.821,1135,3.821,1136,3.821,1137,3.821,1588,4.237,1589,4.869,1590,4.869]],["title/classes/LoginDto.html",[0,0.125,790,2.53]],["body/classes/LoginDto.html",[0,0.227,2,1.8,3,0.165,4,0.165,5,0.165,8,2.2,9,4.003,12,1.389,15,0.317,16,1.022,22,2.547,27,3.445,28,2.648,29,0.443,30,0.014,32,1.147,37,3.222,39,0.658,47,0.776,81,3.723,87,0.226,90,3.125,93,2.261,95,1.937,99,0.186,100,4.006,110,0.011,111,0.011,743,5.093,790,4.583,1169,4.583,1196,4.881,1217,3.694,1591,4.835,1592,7.302,1593,5.555,1594,5.555,1595,5.892,1596,5.555,1597,5.555]],["title/injectables/MinioService.html",[231,0.915,1465,2.383]],["body/injectables/MinioService.html",[0,0.134,3,0.129,4,0.129,5,0.193,15,0.247,16,0.871,17,1.143,29,0.486,30,0.014,34,1.258,39,0.737,47,0.811,63,0.965,87,0.193,99,0.145,110,0.01,111,0.01,136,1.131,153,1.803,163,2.104,164,2.029,172,2.189,188,0.733,196,2.998,198,1.31,231,1.31,232,1.913,234,2.62,235,2.54,241,3.148,250,3.173,253,2.182,259,2.104,260,1.957,317,3.12,332,4.349,640,2.753,673,2.753,674,3.447,842,2.716,860,4.683,1122,2.9,1380,3.396,1395,5.097,1456,2.559,1465,3.413,1598,3.766,1599,5.652,1600,5.652,1601,5.023,1602,5.772,1603,5.652,1604,5.772,1605,5.023,1606,4.328,1607,6.911,1608,5.772,1609,4.328,1610,3.766,1611,4.328,1612,5.023,1613,4.328,1614,5.652,1615,4.328,1616,4.53,1617,3.766,1618,4.328,1619,3.396,1620,4.328,1621,3.766,1622,3.766,1623,4.328,1624,3.766,1625,4.328,1626,3.766,1627,4.328,1628,3.766,1629,5.652,1630,4.328,1631,3.766,1632,3.766,1633,3.766,1634,3.766,1635,3.766,1636,3.766,1637,3.396,1638,3.766,1639,3.766,1640,3.766,1641,5.023,1642,3.766,1643,4.328,1644,3.766,1645,3.766,1646,4.328,1647,3.766,1648,4.328]],["title/injectables/MinioService-1.html",[109,1.37,231,0.764,1465,1.99]],["body/injectables/MinioService-1.html",[0,0.1,3,0.14,4,0.096,5,0.208,15,0.184,16,0.71,17,1.191,29,0.478,30,0.014,31,0.941,34,1.369,39,0.731,47,0.805,63,0.973,87,0.186,99,0.108,109,1.916,110,0.008,111,0.008,122,1.316,136,1.231,151,2.502,153,1.471,163,2.193,164,2.183,172,2.382,188,0.548,195,1.37,196,2.564,198,1.385,231,1.069,232,1.429,234,2.696,235,1.264,241,3.222,250,2.972,251,2.009,253,2.348,259,2.101,260,1.954,266,1.216,293,4.003,294,1.809,317,4.004,332,3.83,373,3.845,473,1.717,474,2.81,640,2.749,673,2.749,674,3.445,680,2.813,704,2.331,732,1.635,838,3.242,842,3.83,933,3.395,1122,3.721,1282,2.537,1380,2.537,1395,4.359,1399,2.813,1456,1.911,1465,2.784,1588,2.813,1599,4.833,1600,4.833,1601,4.098,1603,4.833,1605,4.098,1607,6.732,1610,2.813,1612,4.098,1614,4.833,1616,3.695,1617,2.813,1619,2.537,1621,2.813,1622,4.833,1624,4.833,1626,2.813,1628,2.813,1629,5.891,1631,2.813,1632,2.813,1633,2.813,1634,2.813,1635,2.813,1636,2.813,1637,2.537,1638,2.813,1639,2.813,1640,2.813,1641,4.098,1642,2.813,1644,2.813,1645,4.098,1647,2.813,1649,2.813,1650,6.101,1651,4.708,1652,5.554,1653,4.708,1654,6.769,1655,4.708,1656,3.232,1657,3.232,1658,4.708,1659,3.232,1660,3.232,1661,6.101,1662,3.232,1663,4.708,1664,3.232,1665,3.232,1666,3.232,1667,3.232,1668,3.232,1669,2.331,1670,6.101,1671,3.232,1672,3.232,1673,3.232,1674,3.232,1675,3.232,1676,3.232,1677,3.232,1678,3.232,1679,3.232,1680,3.232,1681,3.232,1682,2.813,1683,3.232,1684,3.232,1685,3.232,1686,3.232,1687,3.232,1688,4.708,1689,5.644,1690,3.232,1691,3.232,1692,4.098,1693,3.232,1694,3.232,1695,3.232,1696,3.232,1697,3.232,1698,3.232,1699,3.232,1700,3.232,1701,4.708,1702,3.232,1703,3.232,1704,3.232,1705,3.232,1706,3.232,1707,3.232,1708,3.232,1709,3.232]],["title/classes/PaginatedUsersResponseDto.html",[0,0.125,1710,3.163]],["body/classes/PaginatedUsersResponseDto.html",[0,0.154,2,1.608,3,0.147,4,0.147,5,0.147,8,2.43,12,0.907,15,0.283,16,0.953,29,0.505,30,0.014,31,1.403,32,1.278,37,3.096,39,0.733,41,3.048,44,1.496,87,0.211,95,1.731,99,0.166,109,2.569,110,0.01,111,0.01,128,3.962,173,3.688,728,4.161,828,4.552,1217,3.899,1252,4.584,1365,3.956,1374,4.552,1419,3.526,1499,4.915,1532,5.004,1710,4.954,1711,6.708,1712,3.327,1713,4.965,1714,4.954,1715,4.965,1716,4.321,1717,6.313,1718,4.965,1719,4.319,1720,4.321,1721,4.321,1722,3.58]],["title/entities/Queue.html",[112,1.306,1142,1.946]],["body/entities/Queue.html",[0,0.138,3,0.132,4,0.132,5,0.132,15,0.253,16,0.886,29,0.518,30,0.014,31,1.186,32,1.328,34,1.707,36,1.341,39,0.762,44,1.338,47,0.715,63,1.013,87,0.22,99,0.196,110,0.01,111,0.01,112,1.438,114,1.963,116,2.908,122,2.849,123,3.471,125,2.975,132,3.495,135,3.917,136,2.068,144,3.783,145,1.492,276,1.846,392,4.139,395,2.975,441,4.304,450,3.119,452,3.285,453,3.685,455,4.233,1138,4.634,1142,3.176,1143,3.863,1153,5.109,1209,4.877,1289,4.608,1292,3.863,1316,5.109,1723,3.484,1724,4.743,1725,5.162,1726,5.162,1727,4.743,1728,5.871,1729,4.439,1730,5.109,1731,4.439,1732,5.871,1733,4.439,1734,4.439,1735,4.139,1736,5.871,1737,4.439,1738,5.871,1739,4.439,1740,4.439,1741,5.871,1742,4.439,1743,4.304,1744,4.439,1745,3.484,1746,3.484,1747,3.685,1748,4.439,1749,3.484]],["title/controllers/QueueController.html",[147,1.354,1750,2.906]],["body/controllers/QueueController.html",[0,0.067,3,0.064,4,0.064,5,0.064,9,2.552,10,1.462,11,1.562,12,1.355,15,0.123,17,1.254,29,0.496,30,0.014,31,0.365,32,1.298,34,1.003,36,1.486,39,0.745,42,1.443,44,1.3,47,0.789,63,1.004,87,0.217,96,2.04,99,0.072,110,0.006,111,0.006,122,1.404,136,1.412,138,0.81,147,0.724,149,0.78,151,1.144,153,1.078,154,1.404,155,2.382,156,1.665,161,1.93,163,2.308,164,2.392,166,0.952,167,2.04,172,2.496,178,1.205,180,2.311,182,4.019,183,1.443,184,1.144,185,2.04,188,0.365,191,1.04,193,1.04,196,1.592,197,1.874,198,1.754,203,1.443,205,1.443,222,2.659,234,2.423,235,0.842,250,1.404,251,1.56,253,1.814,259,1.598,260,1.487,266,1.623,276,1.907,327,1.273,336,2.183,356,2.165,420,3.616,424,1.936,441,1.273,449,1.144,450,1.144,452,1.205,465,2.761,466,2.708,473,1.144,474,2.183,476,2.289,512,1.205,515,1.273,522,1.089,523,1.443,524,1.273,530,1.69,538,2.918,543,3.002,556,2.707,562,1.352,579,3.002,580,1.69,587,2.487,590,1.553,640,2.092,669,1.089,673,2.092,674,3.005,675,2.707,676,2.761,713,1.69,729,1.833,736,1.874,761,1.833,811,1.273,827,1.273,834,1.69,838,2.622,842,3.097,850,1.205,880,1.273,912,3.616,924,2.707,933,3.111,934,1.553,953,2.707,960,1.69,1006,1.443,1010,1.273,1039,1.443,1046,3.111,1050,1.874,1061,1.874,1068,1.69,1098,1.745,1142,3.44,1209,3.86,1228,4.832,1231,1.553,1365,1.04,1403,2.487,1432,1.874,1440,3.002,1509,2.415,1583,1.553,1727,2.487,1743,3.193,1747,1.352,1750,2.487,1751,1.874,1752,3.002,1753,3.002,1754,3.449,1755,4.315,1756,3.002,1757,3.002,1758,4.934,1759,4.934,1760,4.934,1761,4.934,1762,4.934,1763,4.294,1764,3.002,1765,3.002,1766,3.002,1767,4.294,1768,3.002,1769,2.153,1770,3.449,1771,2.153,1772,1.874,1773,3.449,1774,2.153,1775,2.707,1776,2.153,1777,3.449,1778,2.153,1779,1.874,1780,6.653,1781,2.153,1782,2.153,1783,2.153,1784,2.153,1785,2.153,1786,2.153,1787,1.874,1788,3.449,1789,2.153,1790,1.874,1791,3.449,1792,2.153,1793,3.449,1794,2.153,1795,2.153,1796,3.449,1797,2.153,1798,3.449,1799,2.153,1800,3.449,1801,2.153,1802,3.449,1803,2.153,1804,3.449,1805,2.153,1806,2.153,1807,3.449,1808,2.153,1809,2.153,1810,3.449,1811,2.153,1812,2.153,1813,3.449,1814,2.153,1815,2.153,1816,3.449,1817,2.153,1818,2.153,1819,2.153,1820,3.449,1821,2.153,1822,2.153,1823,4.213,1824,2.153,1825,2.153,1826,3.449,1827,2.153,1828,2.153,1829,2.153,1830,2.415,1831,1.553,1832,3.002,1833,1.352,1834,2.708,1835,1.874,1836,2.153,1837,1.69,1838,3.755,1839,1.874,1840,1.874,1841,2.153,1842,3.449,1843,5.014,1844,2.153,1845,2.707,1846,3.755,1847,2.153,1848,3.002,1849,2.153,1850,2.153,1851,2.153,1852,2.153,1853,3.893,1854,3.002,1855,5.014,1856,1.874,1857,2.153,1858,1.874,1859,2.153,1860,2.153,1861,2.153,1862,2.153,1863,2.153,1864,2.153,1865,2.153,1866,2.153,1867,2.153,1868,2.153,1869,1.874,1870,1.874,1871,2.153,1872,1.69,1873,2.153,1874,1.874,1875,2.153,1876,2.153,1877,2.153,1878,2.153,1879,2.153,1880,4.315,1881,2.153,1882,2.153,1883,3.449,1884,1.874,1885,2.153,1886,2.153,1887,2.153,1888,2.153,1889,2.153,1890,2.153,1891,2.153,1892,2.153,1893,2.153,1894,2.153,1895,2.153,1896,2.153,1897,2.153,1898,2.153,1899,2.153,1900,2.153,1901,2.153,1902,2.153,1903,1.874,1904,4.238,1905,2.153,1906,2.153,1907,2.153,1908,2.153,1909,1.874,1910,2.153,1911,1.874,1912,2.153,1913,2.153,1914,2.153]],["title/entities/QueueDetails.html",[112,1.306,1735,2.383]],["body/entities/QueueDetails.html",[0,0.124,3,0.119,4,0.119,5,0.119,12,1.358,15,0.229,16,0.827,20,3.016,23,2.35,24,2.35,29,0.521,30,0.014,31,1.23,32,1.348,34,1.594,36,1.273,39,0.773,47,0.817,63,1.091,87,0.209,99,0.134,110,0.009,111,0.009,112,1.299,114,1.772,132,3.319,135,3.882,136,2.006,138,2.062,144,3.965,145,1.347,266,2.062,356,3.441,384,3.441,387,5.27,388,2.891,392,4.538,407,3.921,408,3.694,420,3.921,421,3.921,422,3.921,423,3.921,424,2.099,436,3.147,444,2.687,445,5.27,449,2.13,850,3.067,1142,3.705,1231,4.504,1312,5.27,1477,3.489,1735,3.242,1915,6.963,1916,3.489,1917,4.504,1918,4.009,1919,5.482,1920,4.009,1921,4.771,1922,4.009,1923,4.009,1924,5.482,1925,4.009,1926,4.771,1927,4.009,1928,5.482,1929,4.009,1930,5.482,1931,4.009,1932,4.771,1933,6.715,1934,5.482,1935,4.009,1936,4.009,1937,5.482,1938,4.009,1939,5.482,1940,4.009,1941,4.009,1942,4.009,1943,4.009]],["title/classes/QueueGateway.html",[0,0.125,1944,2.383]],["body/classes/QueueGateway.html",[0,0.11,2,1.146,3,0.105,4,0.105,5,0.105,11,1.819,15,0.202,16,0.758,17,1.313,29,0.501,30,0.014,31,1.339,32,1.138,34,1.028,39,0.744,63,1.039,87,0.225,99,0.118,110,0.008,111,0.008,136,1.313,153,1.825,161,1.979,163,2.417,164,2.291,172,1.789,188,0.599,196,3.101,198,1.443,234,2.598,235,1.965,250,2.734,251,1.36,253,2.257,260,1.514,293,4.244,294,1.979,312,2.55,332,3.992,336,3.775,474,1.789,476,2.696,830,2.776,849,2.37,953,2.776,1043,2.37,1071,4.585,1138,2.091,1142,2.82,1637,2.776,1669,3.622,1682,3.078,1775,4.991,1830,4.016,1831,2.55,1854,4.371,1917,5.175,1944,2.97,1945,3.078,1946,5.841,1947,5.841,1948,6.073,1949,5.023,1950,5.023,1951,5.023,1952,5.023,1953,5.023,1954,5.023,1955,5.023,1956,5.023,1957,3.537,1958,5.023,1959,5.023,1960,3.537,1961,5.841,1962,5.023,1963,8.05,1964,3.537,1965,7.178,1966,7.335,1967,5.023,1968,3.537,1969,5.023,1970,5.023,1971,3.537,1972,5.023,1973,5.023,1974,3.537,1975,5.023,1976,5.023,1977,3.537,1978,5.023,1979,5.023,1980,3.537,1981,5.023,1982,3.537,1983,5.023,1984,3.537,1985,5.023,1986,3.537,1987,3.078,1988,4.371,1989,2.776,1990,3.537,1991,5.023,1992,3.537,1993,3.537,1994,3.537,1995,3.537,1996,3.537,1997,3.537,1998,3.537,1999,3.078,2000,5.023,2001,3.537,2002,5.841,2003,3.537,2004,3.537,2005,3.537,2006,3.537,2007,3.537,2008,4.371,2009,3.537,2010,3.537,2011,3.537,2012,5.841,2013,3.537,2014,3.537,2015,3.078,2016,2.776,2017,3.537,2018,3.537,2019,3.537,2020,5.023,2021,3.537,2022,3.537]],["title/modules/QueueModule.html",[209,1.306,288,2.701]],["body/modules/QueueModule.html",[0,0.157,3,0.15,4,0.15,5,0.15,30,0.014,87,0.272,99,0.169,110,0.011,111,0.011,149,2.315,188,0.858,209,2.269,211,2.445,212,2.445,213,2.691,214,2.691,215,2.445,216,3.722,217,3.722,221,3.397,222,2.338,223,2.562,225,2.834,226,1.834,229,2.834,288,5.454,295,4.408,296,3.652,327,2.995,367,4.408,1138,3.78,1142,3.086,1403,3.652,1404,3.652,1735,3.78,1745,3.975,1746,3.975,1750,5.051,1830,4.577,1831,3.652,1833,3.179,1834,5.134,1835,4.408,1944,4.706,1989,5.017,2023,4.408,2024,4.408,2025,4.408,2026,5.065,2027,5.051,2028,5.065,2029,5.065,2030,3.975,2031,4.408,2032,5.065]],["title/injectables/QueueSchedulerService.html",[231,0.915,1834,2.53]],["body/injectables/QueueSchedulerService.html",[0,0.092,3,0.088,4,0.088,5,0.088,10,1.253,15,0.169,16,0.665,17,0.928,29,0.289,30,0.014,32,0.501,34,1.281,39,0.66,63,0.813,87,0.219,99,0.099,110,0.007,111,0.007,116,2.897,122,3,136,0.773,145,0.993,153,1.377,163,1.428,164,1.825,172,2.229,188,0.501,196,2.433,198,1.326,222,3.293,226,1.07,231,1,232,1.306,234,2.508,235,1.724,237,2.956,241,1.868,248,1.57,250,3,251,2.021,253,2.345,259,0.957,260,2.221,262,1.253,266,1.983,276,1.905,296,2.131,327,1.747,330,2.319,332,3.667,335,2.572,450,3.482,452,3.667,453,4.38,473,1.57,474,1.495,476,1.253,557,3.8,568,2.319,593,6.495,633,3.459,640,1.868,648,4.176,654,4.585,673,1.868,674,3.002,676,1.653,697,2.572,716,2.319,718,2.131,728,3.32,732,1.495,1049,2.572,1068,2.319,1098,1.495,1142,3.642,1262,2.319,1434,2.319,1509,1.653,1689,2.572,1724,3.178,1743,1.747,1747,2.766,1749,3.459,1767,5.085,1768,5.085,1833,1.855,1834,2.766,1853,5.236,1855,3.835,1856,2.572,1903,2.572,1904,5.784,1909,2.572,1911,2.572,1944,4.015,2015,2.572,2016,2.319,2030,2.319,2033,6.074,2034,2.572,2035,5.27,2036,5.842,2037,4.407,2038,2.572,2039,4.407,2040,3.835,2041,2.955,2042,4.407,2043,5.085,2044,5.27,2045,4.407,2046,2.955,2047,4.407,2048,7.463,2049,2.955,2050,5.27,2051,2.955,2052,4.407,2053,2.955,2054,2.955,2055,2.572,2056,2.572,2057,3.835,2058,2.955,2059,2.955,2060,6.249,2061,2.955,2062,2.955,2063,5.27,2064,2.955,2065,2.955,2066,2.955,2067,2.955,2068,2.955,2069,2.572,2070,3.835,2071,5.842,2072,5.842,2073,5.842,2074,5.085,2075,3.835,2076,2.955,2077,2.955,2078,2.955,2079,2.955,2080,3.835,2081,6.554,2082,4.407,2083,4.407,2084,2.572,2085,4.407,2086,4.407,2087,2.955,2088,4.587,2089,4.407,2090,2.572,2091,2.955,2092,2.955,2093,2.572,2094,2.955,2095,2.955,2096,2.955,2097,2.955,2098,2.955,2099,2.955,2100,2.572,2101,2.955,2102,2.955,2103,2.955,2104,2.955,2105,2.955,2106,2.955,2107,2.955,2108,2.955,2109,2.955,2110,5.085,2111,2.572,2112,2.955,2113,2.572,2114,2.955,2115,2.955,2116,2.955,2117,2.955]],["title/injectables/QueueService.html",[231,0.915,1830,2.255]],["body/injectables/QueueService.html",[0,0.046,3,0.044,4,0.044,5,0.044,9,0.875,11,1.591,12,0.604,15,0.084,17,1.132,20,0.714,23,0.556,24,0.556,29,0.421,30,0.014,31,1.245,36,1.257,39,0.655,42,2.217,44,0.446,47,0.644,62,1.494,63,0.925,87,0.188,96,0.875,99,0.049,109,1.593,110,0.004,111,0.004,116,2.383,122,1.789,138,0.556,145,0.497,153,0.789,154,1.789,155,1.889,156,1.22,158,0.714,163,2.084,164,2.076,166,1.117,178,1.414,187,0.928,188,0.251,191,0.714,193,0.714,198,1.7,222,1.167,226,0.536,231,0.574,232,0.654,234,2.644,235,0.988,237,2.95,241,1.071,247,0.875,248,0.786,250,1.593,251,2.108,253,2.538,256,2.759,259,1.746,260,1.901,262,2.03,263,0.928,276,2.049,312,1.067,321,1.067,327,0.875,336,0.748,356,1.586,357,1.822,359,0.991,414,2.544,420,3.005,421,0.928,422,0.928,423,0.928,424,2.02,450,2.864,452,3.017,453,0.928,465,2.189,473,2.335,474,1.278,476,2.893,567,1.161,568,1.161,576,0.748,591,1.983,633,1.161,634,1.586,640,1.402,648,3.771,654,3.071,657,3.825,660,1.287,669,1.674,673,1.402,674,2.844,675,1.161,676,2.862,690,1.287,694,0.928,713,1.983,715,2.199,716,1.983,717,2.199,718,1.067,728,1.758,729,1.343,732,0.748,752,1.161,753,1.983,836,1.822,837,1.822,838,1.343,844,1.067,849,0.991,850,1.851,851,1.067,923,1.161,924,2.596,934,1.067,996,0.991,1000,0.991,1001,0.991,1008,0.828,1009,2.199,1010,0.875,1039,2.217,1043,0.991,1046,2.385,1074,1.287,1097,1.287,1098,1.674,1102,1.287,1109,1.287,1138,3.328,1140,2.199,1142,3.865,1151,1.983,1209,4.892,1228,2.945,1231,1.067,1273,1.287,1279,1.287,1374,1.067,1403,1.067,1404,1.067,1419,0.714,1434,1.983,1509,2.459,1522,1.693,1556,1.822,1714,1.161,1724,1.822,1726,1.161,1727,3.452,1730,2.879,1735,1.494,1743,3.025,1745,1.161,1746,1.161,1747,2.456,1749,3.449,1752,2.199,1753,2.199,1756,2.199,1757,2.199,1763,3.405,1764,2.199,1765,2.199,1766,2.199,1772,2.199,1775,3.071,1779,2.199,1787,2.199,1790,2.199,1823,3.613,1830,1.414,1832,2.199,1833,0.928,1837,1.161,1839,1.287,1840,3.825,1843,2.199,1845,1.161,1846,3.825,1848,1.287,1853,5.074,1872,1.161,1874,3.825,1884,1.287,1904,3.071,1917,4.205,1944,3.188,1989,1.161,1999,1.287,2008,5.865,2016,2.596,2030,1.161,2031,1.287,2038,1.287,2040,2.199,2055,1.287,2057,1.287,2069,1.287,2070,1.287,2074,2.199,2075,1.287,2080,3.825,2084,1.287,2088,1.287,2090,3.405,2093,3.405,2100,3.405,2110,4.692,2111,3.825,2113,1.287,2118,1.287,2119,2.527,2120,3.308,2121,2.527,2122,3.308,2123,3.308,2124,1.479,2125,2.527,2126,1.479,2127,1.479,2128,2.527,2129,1.479,2130,1.479,2131,1.479,2132,1.479,2133,1.479,2134,2.527,2135,1.479,2136,2.527,2137,1.479,2138,1.479,2139,1.479,2140,2.527,2141,1.479,2142,2.527,2143,1.479,2144,2.527,2145,1.479,2146,1.479,2147,1.479,2148,1.479,2149,1.479,2150,1.479,2151,1.479,2152,1.287,2153,2.527,2154,2.527,2155,1.479,2156,1.479,2157,1.479,2158,1.479,2159,1.479,2160,1.479,2161,2.527,2162,1.479,2163,2.527,2164,1.479,2165,3.308,2166,1.479,2167,1.479,2168,1.479,2169,1.479,2170,1.479,2171,1.479,2172,1.479,2173,1.479,2174,1.479,2175,2.527,2176,1.479,2177,1.983,2178,1.287,2179,1.479,2180,2.527,2181,1.479,2182,3.308,2183,2.527,2184,1.479,2185,1.479,2186,1.479,2187,1.287,2188,1.479,2189,1.479,2190,1.479,2191,1.479,2192,1.479,2193,1.479,2194,2.527,2195,1.479,2196,1.479,2197,1.479,2198,1.479,2199,1.479,2200,1.479,2201,1.479,2202,1.479,2203,1.479,2204,2.527,2205,1.479,2206,1.479,2207,1.479,2208,1.479,2209,1.479,2210,3.913,2211,2.527,2212,2.527,2213,2.527,2214,1.479,2215,1.479,2216,1.479,2217,3.071,2218,1.287,2219,3.913,2220,4.452,2221,1.287,2222,2.527,2223,1.287,2224,3.913,2225,1.479,2226,1.479,2227,2.527,2228,1.479,2229,1.479,2230,1.479,2231,3.913,2232,4.395,2233,1.479,2234,1.479,2235,1.479,2236,3.308,2237,1.479,2238,1.479,2239,1.479,2240,1.479,2241,3.308,2242,3.308,2243,2.527,2244,1.479,2245,1.479,2246,1.479,2247,2.527,2248,2.527,2249,1.479,2250,1.479,2251,1.479,2252,1.479,2253,1.479,2254,1.479,2255,1.479,2256,1.479,2257,1.479,2258,1.479,2259,1.479,2260,2.527,2261,2.527,2262,1.287,2263,1.479,2264,1.287,2265,1.479,2266,1.287,2267,1.287,2268,1.479,2269,1.287,2270,1.479,2271,3.913,2272,1.479,2273,2.527,2274,1.479,2275,1.479,2276,1.479,2277,1.479,2278,1.479,2279,1.479,2280,4.395,2281,2.527,2282,3.308,2283,1.287,2284,1.479,2285,1.479,2286,1.479,2287,2.527,2288,1.479,2289,2.527,2290,1.479,2291,2.199,2292,1.479,2293,1.479,2294,1.479,2295,1.479,2296,1.479,2297,1.479,2298,1.479,2299,1.479,2300,1.479,2301,1.479,2302,1.479,2303,1.479,2304,1.479,2305,3.308,2306,2.527,2307,2.527,2308,1.479,2309,1.479,2310,1.479,2311,1.479,2312,1.479,2313,2.527,2314,1.479,2315,1.479,2316,1.479,2317,1.479,2318,2.527,2319,1.479,2320,1.479,2321,1.479,2322,1.479,2323,1.479,2324,1.479,2325,1.479,2326,1.479,2327,1.479,2328,1.479]],["title/controllers/QueuesController.html",[147,1.354,2027,2.906]],["body/controllers/QueuesController.html",[0,0.108,3,0.104,4,0.104,5,0.104,12,1.06,15,0.199,17,0.877,20,2.405,23,2.38,24,2.38,29,0.326,30,0.014,32,0.984,36,1.458,39,0.564,47,0.788,63,0.693,87,0.194,99,0.117,110,0.008,111,0.008,116,2.566,147,1.174,149,1.265,151,1.857,153,1.813,163,1.613,164,1.813,167,2.945,184,1.857,188,0.592,195,1.482,196,1.613,198,1.517,234,2.5,251,2.044,253,1.95,259,2.166,260,1.501,262,1.482,276,1.775,359,3.338,421,3.126,422,3.126,423,3.97,424,1.95,450,2.646,452,1.956,476,2.682,640,2.46,673,2.46,676,3.539,718,2.52,729,3.083,823,1.174,842,3.97,844,2.52,850,4.353,1008,1.956,1043,2.342,1067,6.476,1142,3.228,1209,4.658,1419,1.687,1724,4.184,1725,4.555,1726,2.743,1727,4.184,1735,3.74,1743,2.067,1747,3.126,1830,3.247,1831,2.52,1833,2.194,1837,2.743,1845,3.909,1853,5.507,1869,3.042,1870,3.042,1872,4.555,1917,2.52,1932,5.05,2027,3.591,2187,3.042,2217,2.743,2218,5.05,2220,5.505,2221,5.05,2223,5.05,2262,5.505,2264,3.042,2266,3.042,2267,3.042,2291,5.05,2329,3.042,2330,4.981,2331,4.981,2332,6.325,2333,3.495,2334,3.495,2335,3.495,2336,4.335,2337,3.495,2338,4.981,2339,3.495,2340,3.495,2341,3.495,2342,3.495,2343,3.495,2344,3.495,2345,5.803,2346,3.495,2347,2.743,2348,4.981,2349,4.981,2350,3.495,2351,3.495,2352,3.495,2353,3.495,2354,3.495,2355,3.495,2356,3.495,2357,3.495,2358,3.495,2359,3.495,2360,5.803,2361,5.803,2362,5.803,2363,5.803,2364,3.495,2365,5.803,2366,5.803,2367,3.495,2368,5.803,2369,3.495,2370,3.495,2371,4.981,2372,3.495,2373,3.495,2374,3.495,2375,3.495,2376,3.495,2377,3.495,2378,3.495,2379,3.495,2380,3.495,2381,3.495,2382,3.495,2383,3.495]],["title/classes/RegisterDto.html",[0,0.125,799,2.53]],["body/classes/RegisterDto.html",[0,0.195,2,1.313,3,0.12,4,0.12,5,0.12,8,2.344,9,3.266,12,1.446,15,0.231,16,0.834,17,1.369,20,2.667,21,3.178,22,2.656,23,2.364,24,2.364,25,3.178,26,3.178,27,3.121,28,2.761,29,0.504,30,0.014,31,0.936,32,1.304,33,5.295,37,3.455,39,0.748,47,0.832,57,3.701,62,3.266,63,1.109,66,3.091,67,3.182,69,3.701,70,3.182,72,3.701,73,3.983,74,4.21,75,3.983,76,3.182,78,3.983,79,3.943,80,3.983,81,3.701,82,4.53,87,0.185,88,3.983,89,3.114,90,3.551,93,1.65,94,4.431,95,1.414,99,0.136,100,2.923,101,3.182,102,3.182,103,3.943,104,4.931,105,3.701,106,3.182,110,0.009,111,0.009,743,3.701,799,3.943,801,3.983,958,3.091,1169,4.572,1196,5.09,1217,3.685,1262,4.335,1263,4.807,2384,3.528,2385,4.054,2386,4.054,2387,4.054,2388,4.054,2389,4.054,2390,4.054,2391,4.054,2392,4.054,2393,4.054,2394,4.054,2395,4.054,2396,4.054,2397,4.054,2398,4.054,2399,4.054]],["title/interfaces/RequestWithUser.html",[747,2.141,823,1.354]],["body/interfaces/RequestWithUser.html",[0,0.09,1,2.517,3,0.086,4,0.086,5,0.086,8,2.375,10,1.843,11,2.444,12,1.426,13,1.922,14,3.259,15,0.166,16,0.982,22,2.333,28,2.426,29,0.518,30,0.014,31,1.051,35,1.22,36,1.327,41,2.099,44,1.571,47,0.75,63,0.404,87,0.242,95,1.012,97,2.729,99,0.097,110,0.007,111,0.007,147,0.975,161,1.624,182,3.083,184,1.542,188,0.492,193,1.401,195,1.231,198,1.408,234,1.946,251,0.786,253,1.752,259,2.109,260,1.962,262,1.843,276,2.177,336,2.929,424,0.975,469,2.673,472,1.945,474,2.638,497,1.716,515,1.716,522,1.468,524,1.716,525,2.2,527,1.752,532,1.945,533,4.363,534,5.229,535,1.945,538,3.083,539,3.76,540,2.918,542,4.156,549,1.822,576,2.638,590,4.694,640,2.211,669,2.2,673,2.211,674,3.138,676,2.433,732,2.638,739,1.945,740,2.278,741,2.278,743,2.914,745,2.526,747,3.295,748,2.278,750,3.784,751,2.526,752,2.278,753,2.278,757,4.175,759,4.538,760,4.538,761,3.772,762,2.526,764,5.039,765,5.039,767,2.526,768,2.526,769,2.526,771,2.093,773,4.538,774,4.538,778,2.526,780,3.76,783,4.867,784,1.945,790,3.893,792,3.784,793,3.784,799,3.893,801,3.135,811,3.424,812,3.083,813,2.278,814,2.278,815,2.278,816,2.526,817,1.716,818,2.093,819,2.526,820,2.093,821,3.784,822,5.398,823,0.975,824,2.526,825,2.526,826,3.413,827,2.571,828,3.135,829,2.433,830,4.092,831,2.526,832,2.526,833,2.278,834,2.278,835,2.526,836,3.76,837,3.76,838,2.77,839,2.526,840,2.526,841,2.526,842,1.822,843,2.526,844,2.093,845,2.526,846,2.526,847,2.278,848,2.278,849,3.494,850,3.643,851,3.76,852,4.538,853,4.092,854,5.666,855,3.273,856,2.526,857,2.526,858,2.526,859,3.784,860,3.135,861,2.526,862,2.278,863,2.526,864,2.526,865,2.526,866,2.526,1111,1.624]],["title/interfaces/RequestWithUser-1.html",[109,1.37,747,1.788,823,1.131]],["body/interfaces/RequestWithUser-1.html",[3,0.177,4,0.177,5,0.177,12,1.45,15,0.34,16,1.065,29,0.389,30,0.014,87,0.236,99,0.199,110,0.012,111,0.012,188,1.008,198,1.35,251,1.911,336,3.01,469,3.665,476,2.522,747,3.748,761,3.161,820,4.29,823,1.999,1111,3.329,2400,4.669,2401,6.14,2402,5.087,2403,5.178,2404,5.178,2405,5.178]],["title/interfaces/RequestWithUser-2.html",[108,2.427,747,1.788,823,1.131]],["body/interfaces/RequestWithUser-2.html",[0,0.161,3,0.154,4,0.154,5,0.154,12,1.396,13,2.871,15,0.296,16,0.98,17,1.143,29,0.464,30,0.014,35,1.988,41,3.421,47,0.796,63,0.987,87,0.237,99,0.174,110,0.011,111,0.011,136,1.358,138,1.954,188,0.88,195,2.202,198,1.474,231,1.474,251,2.011,525,2.627,527,1.745,747,3.451,761,3.945,818,3.745,823,2.182,827,3.071,912,4.076,944,4.076,1008,2.906,1039,3.48,1084,4.076,1111,2.906,1669,3.745,2347,4.076,2402,4.683,2406,4.076,2407,5.652,2408,6.167,2409,4.076,2410,4.683,2411,4.52,2412,4.52,2413,5.652,2414,4.52,2415,4.52,2416,4.52,2417,4.52,2418,4.52,2419,4.52,2420,4.52,2421,4.52,2422,4.52]],["title/entities/Role.html",[35,1.131,112,1.306]],["body/entities/Role.html",[0,0.17,3,0.163,4,0.163,5,0.163,8,2.187,12,1.443,15,0.313,16,1.013,29,0.495,30,0.014,31,1.138,32,1.282,35,1.884,36,1.48,39,0.736,47,0.773,63,1.011,87,0.224,99,0.183,110,0.011,111,0.011,112,1.775,114,2.423,132,3.857,135,3.672,136,1.978,144,3.672,145,1.842,266,2.526,427,4.302,436,4.302,449,2.912,455,3.952,1365,3.505,2423,4.77,2424,5.481,2425,5.481,2426,5.481,2427,5.481,2428,5.843,2429,5.481,2430,5.843,2431,5.481]],["title/controllers/RolesController.html",[147,1.354,2432,2.906]],["body/controllers/RolesController.html",[0,0.162,3,0.155,4,0.155,5,0.155,15,0.299,17,1.149,29,0.427,30,0.014,32,1.205,36,1.33,39,0.692,47,0.798,63,0.909,87,0.256,99,0.175,110,0.011,111,0.011,147,1.759,149,1.896,151,2.782,153,2.039,155,3.595,156,3.151,163,2.114,164,2.222,166,2.314,167,3.096,184,2.782,188,0.887,195,2.219,196,2.417,198,1.614,203,3.508,424,2.193,497,4.619,515,3.096,522,2.648,523,3.508,524,3.096,525,3.302,526,3.775,527,2.193,528,3.775,538,3.096,549,4.464,896,3.598,2336,4.556,2432,4.706,2433,4.556,2434,5.68,2435,5.235,2436,5.235,2437,5.235,2438,5.235,2439,4.556,2440,5.235,2441,5.235,2442,4.556,2443,5.235,2444,5.235,2445,5.235,2446,5.235,2447,5.235]],["title/guards/RolesGuard.html",[525,2.039,2448,3.163]],["body/guards/RolesGuard.html",[0,0.157,3,0.151,4,0.151,5,0.151,12,1.169,13,2.243,15,0.29,17,1.126,29,0.419,30,0.014,35,1.967,39,0.622,41,3.384,47,0.791,63,1.057,87,0.234,99,0.17,110,0.011,111,0.011,136,1.326,138,2.407,153,1.999,163,2.073,164,1.585,188,0.86,195,2.151,198,1.452,231,1.452,235,1.984,251,1.994,525,3.237,527,1.705,747,2.695,761,3.724,818,3.658,823,2.15,827,3,944,3.981,1008,2.838,1039,3.399,1084,3.981,1669,3.658,2347,3.981,2402,5.308,2406,3.981,2407,6.407,2408,6.745,2409,3.981,2410,4.614,2411,4.415,2412,5.569,2413,5.569,2414,4.415,2415,4.415,2416,4.415,2417,4.415,2418,4.415,2419,4.415,2420,4.415,2421,4.415,2422,4.415,2449,5.073,2450,5.073,2451,5.073,2452,5.073,2453,5.073]],["title/modules/RolesModule.html",[209,1.306,289,2.383]],["body/modules/RolesModule.html",[0,0.174,3,0.167,4,0.167,5,0.167,12,1.246,30,0.014,35,1.578,87,0.266,99,0.188,110,0.011,111,0.011,149,2.469,188,0.953,209,2.378,211,2.714,212,2.714,213,2.987,214,2.987,215,2.714,216,3.9,217,3.9,221,3.623,222,2.595,223,2.844,225,3.146,226,2.036,229,3.146,289,4.756,449,2.987,896,4.194,2432,5.293,2442,4.893,2454,4.893,2455,4.893,2456,4.893,2457,5.622,2458,4.893,2459,5.622,2460,5.622]],["title/injectables/RolesService.html",[231,0.915,896,2.039]],["body/injectables/RolesService.html",[0,0.129,3,0.123,4,0.123,5,0.123,12,1.37,15,0.237,17,1.252,19,3.759,29,0.466,30,0.014,31,1.346,35,2.104,36,1.528,39,0.713,43,2.32,47,0.649,63,1.076,87,0.238,99,0.139,110,0.009,111,0.009,145,1.393,153,1.752,155,3.288,156,2.708,163,2.304,164,2.222,166,2.48,188,0.703,198,1.545,226,1.501,231,1.273,232,1.833,234,2.714,235,2.194,237,3.793,241,3.312,247,2.452,248,2.203,250,2.283,251,1.927,253,2.464,259,2.059,260,1.915,262,2.695,359,2.779,414,2.98,424,2.288,449,2.203,527,2.464,896,2.837,898,4.259,918,2.779,919,3.758,978,2.779,2217,4.402,2428,4.881,2434,4.881,2439,4.881,2458,3.609,2461,3.609,2462,5.609,2463,5.609,2464,4.146,2465,4.146,2466,5.609,2467,5.609,2468,4.146,2469,4.146,2470,5.609,2471,4.146,2472,4.146,2473,4.146,2474,4.146,2475,4.146,2476,5.609,2477,5.609,2478,4.146,2479,4.146,2480,4.146,2481,4.146,2482,4.146,2483,4.146,2484,4.146]],["title/classes/UpdateAnnouncementDto.html",[0,0.125,179,2.701]],["body/classes/UpdateAnnouncementDto.html",[0,0.194,2,2.023,3,0.185,4,0.185,5,0.185,13,3.209,30,0.014,87,0.243,99,0.209,110,0.012,111,0.012,154,2.542,160,3.92,179,4.864,192,4.901,1160,4.901,2485,5.435,2486,7.258,2487,4.901,2488,4.901,2489,4.901]],["title/classes/UpdateAppointmentDto.html",[0,0.125,509,2.701]],["body/classes/UpdateAppointmentDto.html",[0,0.217,2,1.903,3,0.174,4,0.174,5,0.174,13,3.095,15,0.335,16,1.057,17,1.232,29,0.385,30,0.014,32,0.996,39,0.571,87,0.259,89,3.232,93,2.391,99,0.196,110,0.012,111,0.012,154,2.391,276,2.099,440,4.695,468,3.687,509,4.692,521,4.611,529,3.937,1172,4.611,1184,5.113,1187,3.937,1189,5.113,2487,4.611,2488,4.611,2489,4.611,2490,6.094,2491,7.002,2492,5.875]],["title/classes/UpdateDocumentApplicationDto.html",[0,0.125,1389,2.906]],["body/classes/UpdateDocumentApplicationDto.html",[0,0.201,2,1.677,3,0.154,4,0.154,5,0.154,8,2.132,13,2.865,15,0.295,16,0.978,17,1.305,29,0.424,30,0.014,32,1.099,37,3.144,39,0.63,44,1.56,47,0.662,87,0.255,89,3.266,90,2.992,93,2.107,95,1.805,99,0.173,110,0.011,111,0.011,154,2.107,266,2.438,276,2.218,373,3.58,376,4.385,382,4.741,409,4.149,410,3.25,441,3.061,562,4.655,1098,3.279,1187,3.469,1190,4.741,1192,4.063,1196,3.733,1201,4.506,1203,4.506,1216,3.733,1217,3.58,1302,5.506,1330,5.087,1334,4.673,1335,5.087,1389,4.673,1410,4.506,2487,5.553,2488,4.063,2489,4.063,2493,6.158,2494,5.177,2495,5.177,2496,5.177,2497,5.177,2498,5.177]],["title/classes/UpdateQueueDto.html",[0,0.125,1823,2.701]],["body/classes/UpdateQueueDto.html",[0,0.217,2,1.896,3,0.174,4,0.174,5,0.174,15,0.334,16,1.054,17,1.361,29,0.457,30,0.014,32,1.184,39,0.679,47,0.714,87,0.234,89,3.448,90,3.225,93,2.383,99,0.196,110,0.012,111,0.012,276,2.096,1187,3.922,1230,4.594,1232,5.094,1725,5.862,1743,4.417,1823,4.682,1833,3.674,2499,6.5,2500,5.854,2501,5.854,2502,5.854,2503,5.854]],["title/classes/UpdateUserDto.html",[0,0.125,14,1.946]],["body/classes/UpdateUserDto.html",[0,0.213,1,2.53,2,1.217,3,0.112,4,0.112,5,0.112,6,6.014,7,2.708,8,2.355,9,3.569,10,1.592,11,1.36,12,1.382,13,1.66,14,3.153,15,0.214,16,0.791,17,1.422,18,1.996,19,2.221,20,3.525,21,3.053,22,2.584,23,2.27,24,2.27,25,3.053,26,3.053,27,3.037,28,2.687,29,0.502,30,0.014,31,1.164,32,1.282,33,5.938,34,1.092,35,1.47,36,0.766,37,3.448,39,0.736,41,1.813,42,2.517,43,2.102,47,0.825,48,4.561,49,4.561,50,4.561,51,4.561,52,4.561,53,4.561,54,3.269,57,3.511,58,3.269,60,3.269,62,3.099,63,1.037,64,3.269,66,2.932,67,2.948,69,3.511,70,2.948,72,3.511,73,3.778,74,4.044,75,3.778,76,2.948,78,3.778,79,3.788,80,3.778,81,3.511,82,4.352,83,3.269,85,3.269,87,0.175,88,3.778,89,3.607,90,3.493,91,3.778,92,4.113,93,1.529,94,4.904,95,1.31,96,3.099,97,3.289,98,2.651,99,0.175,100,2.708,101,2.948,102,2.948,103,2.357,104,2.948,105,2.517,106,2.948,107,3.269,108,3.778,109,1.529,110,0.009,111,0.009,1258,3.269,1261,3.269,1265,3.269,1268,3.269,1277,3.269,2504,3.756,2505,3.756,2506,3.756,2507,3.756]],["title/classes/UpdateUserStatusDto.html",[0,0.125,2508,2.906]],["body/classes/UpdateUserStatusDto.html",[0,0.218,2,1.92,3,0.176,4,0.176,5,0.176,8,2.121,12,1.419,15,0.338,16,1.062,29,0.388,30,0.014,32,1.005,37,2.513,39,0.576,87,0.235,93,2.413,95,2.067,99,0.198,110,0.012,111,0.012,119,3.99,136,1.84,138,2.648,276,1.663,1155,4.419,1170,5.525,1217,3.561,1252,3.721,2508,5.076,2509,6.126,2510,5.159,2511,5.928,2512,5.928]],["title/entities/User.html",[12,0.736,112,1.306]],["body/entities/User.html",[0,0.12,3,0.115,4,0.115,5,0.115,12,0.978,15,0.221,16,0.808,18,3.261,21,3.105,22,2.309,23,2.309,24,2.309,25,3.105,26,3.105,27,2.713,28,2.401,29,0.527,30,0.014,31,1.122,32,1.363,34,1.557,35,2.067,36,1.416,39,0.782,44,1.614,47,0.828,63,1.12,87,0.179,99,0.13,110,0.009,111,0.009,112,1.256,114,1.714,116,2.713,119,3.261,121,4.113,122,2.694,123,3.167,132,3.261,135,3.901,136,2.093,138,2.015,142,3.862,144,4.028,145,1.302,384,2.433,392,4.355,395,2.597,407,3.362,408,3.915,427,4.204,444,2.597,455,3.862,527,2.062,829,3.434,1289,4.204,1309,3.373,1310,4.661,1312,3.042,1921,4.661,1926,4.661,2430,4.661,2513,3.373,2514,5.356,2515,3.876,2516,3.876,2517,6.62,2518,3.876,2519,3.876,2520,3.876,2521,3.876,2522,3.876,2523,5.356,2524,3.876,2525,3.876,2526,5.356,2527,3.876,2528,3.876,2529,5.356,2530,3.876,2531,3.876,2532,3.876,2533,5.356,2534,5.356,2535,3.876,2536,3.876,2537,3.876,2538,5.356,2539,3.876,2540,3.876,2541,3.876,2542,3.876,2543,3.876,2544,5.356,2545,3.876]],["title/classes/UserQueryDto.html",[0,0.125,2546,2.906]],["body/classes/UserQueryDto.html",[0,0.212,2,1.554,3,0.142,4,0.142,5,0.142,8,2.372,15,0.274,16,0.932,17,1.385,22,2.323,28,1.876,29,0.509,30,0.014,31,1.359,32,1.222,34,1.796,35,2.024,37,3.057,39,0.701,47,0.736,63,0.86,78,3.459,87,0.228,89,3.444,90,3.153,91,4.924,93,1.953,94,4.683,95,1.673,98,3.124,99,0.16,103,3.876,109,3.109,110,0.01,111,0.01,172,3.124,173,3.629,828,4.453,1245,5.66,1269,6.276,1374,4.453,1419,3.482,1499,4.877,1500,5,1522,4.138,2546,4.453,2547,5,2548,4.175,2549,6.175,2550,4.797,2551,4.797,2552,4.797,2553,4.797,2554,6.175,2555,4.797,2556,4.797,2557,4.175,2558,6.175]],["title/classes/UserResponseDto.html",[0,0.125,1719,2.383]],["body/classes/UserResponseDto.html",[0,0.11,2,1.151,3,0.105,4,0.105,5,0.105,8,2.491,11,1.824,12,1.466,15,0.203,16,0.76,17,1.292,18,3.111,20,2.433,21,2.962,22,2.531,23,2.203,24,2.203,25,2.962,26,2.962,28,2.631,29,0.523,30,0.014,31,1.184,32,1.34,34,1.853,35,1.788,36,1.465,37,3.352,39,0.769,44,1.518,47,0.828,57,3.376,62,2.979,63,1.101,66,3.565,69,3.376,72,3.376,74,3.376,87,0.119,94,4.223,95,1.239,98,2.962,99,0.119,103,3.999,105,4.27,109,2.051,110,0.008,111,0.008,116,2.589,119,3.111,121,3.924,122,2.989,136,1.317,138,1.895,276,1.414,478,2.561,527,2.261,829,3.276,958,2.819,1155,3.162,1217,3.914,1225,5.545,1245,5.001,1246,4.385,1249,3.376,1252,4.809,1253,4.385,1259,5.545,1275,4.385,1712,2.38,1719,2.979,1838,4.385,2547,5.327,2559,3.552,2560,6.372,2561,6.372,2562,3.552,2563,3.552,2564,3.552,2565,3.552,2566,3.552,2567,3.552,2568,3.552,2569,3.552,2570,3.552,2571,3.552,2572,3.552,2573,3.552,2574,3.552,2575,3.552]],["title/interfaces/UserStats.html",[823,1.354,1503,2.701]],["body/interfaces/UserStats.html",[0,0.072,1,1.761,3,0.069,4,0.069,5,0.069,10,0.979,11,1.859,12,1.383,14,1.761,15,0.132,16,0.55,17,0.407,18,3.156,19,3.513,21,2.828,22,2.607,23,2.425,24,2.34,25,3.438,26,3.357,27,2.626,28,2.757,29,0.407,30,0.014,31,1.253,34,0.672,35,1.862,36,1.493,43,2.041,44,1.943,47,0.571,63,0.827,66,1.293,87,0.222,98,2.287,99,0.122,109,0.94,110,0.006,111,0.006,116,1.021,119,2.401,136,0.604,138,0.869,145,0.776,154,0.94,158,2.182,166,1.021,173,2.97,175,1.227,188,0.392,191,1.115,198,1.573,209,0.748,226,0.836,231,0.828,234,2.23,235,0.904,237,1.845,241,2.637,247,1.366,248,1.227,250,1.485,251,2.161,253,2.559,256,1.45,257,1.548,259,2.15,260,2,262,2.176,263,2.289,268,1.548,414,2.97,465,1.293,512,1.293,516,1.366,527,2.368,540,1.293,576,2.287,634,1.45,640,0.979,648,2.041,669,1.845,673,0.979,674,1.998,694,1.45,728,1.938,729,1.227,732,2.828,817,2.157,823,1.226,829,3.48,838,2.97,896,2.287,898,1.548,912,2.289,915,1.666,916,2.289,917,1.666,918,1.548,919,4.553,946,2.63,949,2.444,954,2.444,955,3.981,956,2.63,958,1.293,959,1.666,962,2.63,963,2.63,965,2.63,966,2.63,976,2.63,977,1.666,978,1.548,981,1.666,1000,1.548,1001,2.444,1006,2.444,1008,1.293,1010,2.673,1015,1.666,1019,2.63,1021,1.666,1023,2.63,1025,1.666,1027,2.63,1098,1.169,1111,1.293,1243,2.673,1249,1.548,1365,2.182,1419,1.761,1456,1.366,1497,2.444,1498,1.666,1499,3.222,1500,4.553,1501,1.666,1502,1.666,1503,2.444,1504,4.168,1505,4.168,1506,3.981,1507,3.981,1508,3.029,1509,2.873,1510,3.981,1511,4.029,1512,1.293,1513,1.813,1514,1.813,1515,1.813,1516,1.813,1517,3.547,1518,2.863,1519,1.813,1520,1.813,1521,2.863,1522,2.444,1523,1.813,1524,1.813,1525,1.813,1526,1.813,1527,1.813,1528,1.813,1529,2.863,1530,1.813,1531,2.863,1532,1.666,1533,1.813,1534,4.029,1535,1.813,1536,1.813,1537,2.863,1538,4.029,1539,2.863,1540,1.813,1541,1.813,1542,1.813,1543,1.813,1544,1.813,1545,1.813,1546,1.813,1547,1.813,1548,1.813,1549,2.863,1550,3.547,1551,1.813,1552,2.863,1553,1.813,1554,1.813,1555,2.863,1556,1.666,1557,1.813,1558,1.813,1559,1.813,1560,1.813,1561,2.863,1562,1.813,1563,1.813,1564,2.863,1565,1.813,1566,1.813,1567,1.813,1568,1.813,1569,1.813,1570,1.813,1571,1.813,1572,1.813,1573,1.813,1574,1.813,1575,1.813,1576,2.863,1577,1.813,1578,1.813,1579,1.813,1580,1.813,1581,1.666,1582,1.813,1583,1.666]],["title/classes/UserStatsResponseDto.html",[0,0.125,2576,2.906]],["body/classes/UserStatsResponseDto.html",[0,0.192,2,1.554,3,0.142,4,0.142,5,0.142,8,2.447,12,1.248,15,0.274,16,0.932,29,0.509,30,0.014,31,1.389,32,1.265,35,2.024,37,3.163,39,0.726,44,1.861,47,0.49,63,0.668,87,0.206,95,1.673,98,2.427,99,0.16,110,0.01,111,0.01,128,3.876,473,3.281,728,3.281,730,5.507,1155,3.876,1156,4.453,1217,3.982,1252,4.287,1365,3.839,1504,4.576,1505,4.576,1506,4.576,1507,4.576,1508,3.215,1509,3.821,1510,4.576,1712,3.215,1719,4.264,1720,5.374,1722,3.459,2177,4.847,2547,5.118,2576,4.453,2577,5.374,2578,4.797,2579,4.797,2580,5.374,2581,4.797,2582,4.797,2583,5.2,2584,4.797,2585,4.175]],["title/classes/UsersByRoleDto.html",[0,0.125,2583,2.906]],["body/classes/UsersByRoleDto.html",[0,0.201,2,1.682,3,0.154,4,0.154,5,0.154,8,2.43,12,1.186,15,0.296,16,0.98,29,0.486,30,0.014,31,1.377,32,1.101,35,2.145,37,3.24,39,0.632,47,0.663,63,0.904,87,0.217,95,1.811,98,3.286,99,0.174,110,0.011,111,0.011,128,3.26,473,2.759,728,2.759,730,5.109,1155,3.26,1156,3.745,1217,4.045,1252,4.076,1365,3.764,1504,3.48,1505,3.48,1506,3.48,1507,3.48,1508,4.748,1509,4.154,1510,3.48,1712,3.48,1716,4.52,1719,4.19,1721,4.52,1722,3.745,2177,4.076,2547,4.748,2576,3.745,2577,4.52,2580,4.52,2583,5.353,2585,5.652]],["title/controllers/UsersController.html",[147,1.354,2586,2.906]],["body/controllers/UsersController.html",[0,0.076,1,2.553,3,0.072,4,0.072,5,0.072,8,2.36,10,3.167,11,2.298,12,1.498,14,2.553,15,0.139,17,1.117,27,2.535,29,0.506,30,0.014,32,1.113,35,1.484,36,1.433,39,0.639,47,0.73,63,0.884,87,0.245,95,0.85,99,0.081,109,0.992,110,0.006,111,0.006,147,0.819,149,0.883,151,1.295,153,1.188,154,1.905,155,2.259,156,2.259,158,2.259,161,1.364,163,2.056,164,2.051,166,1.078,167,1.441,173,2.021,175,1.295,176,1.757,178,1.364,180,1.633,182,3.127,183,1.633,184,1.295,185,2.767,187,3.599,188,0.413,191,1.177,193,1.177,195,1.033,196,1.125,198,1.566,205,3.543,209,0.79,234,2.631,241,1.613,251,1.828,253,1.777,259,1.232,260,0.734,262,2.861,276,2.097,350,3.673,424,1.278,465,2.959,466,2.937,469,2.93,472,2.549,473,2.021,474,3.557,476,2.691,477,2.121,478,4.577,479,5.524,496,1.913,497,3.754,512,1.364,515,1.441,522,1.233,523,1.633,524,1.441,525,1.925,526,1.757,527,1.278,528,1.757,531,1.913,532,1.633,533,4.522,534,4.852,535,2.549,538,2.25,540,1.364,542,4.401,548,4.769,549,3.984,556,1.913,557,3.812,580,1.913,582,2.121,587,1.757,640,1.033,669,2.675,673,1.033,674,2.069,729,1.295,742,2.986,757,5.283,761,3.229,771,4.735,772,2.121,780,5.431,781,2.121,782,2.121,783,3.812,784,4.072,785,3.673,817,2.25,847,1.913,848,1.913,853,1.913,912,4.484,916,2.388,923,3.673,926,3.673,927,4.072,928,2.121,929,2.121,936,2.121,954,1.633,955,1.633,972,3.311,973,2.121,974,3.311,1243,3.754,1365,2.934,1366,5.289,1419,1.177,1456,2.25,1499,2.388,1500,2.549,1502,1.757,1512,2.618,1581,1.757,1714,2.986,1719,2.767,1722,1.757,2269,2.121,2508,3.812,2546,3.812,2586,2.743,2587,2.121,2588,4.679,2589,2.437,2590,3.804,2591,2.437,2592,3.804,2593,2.437,2594,2.437,2595,2.437,2596,2.437,2597,2.437,2598,2.437,2599,2.437,2600,2.437,2601,2.437,2602,2.437,2603,2.437,2604,2.437,2605,2.437,2606,2.437,2607,4.679,2608,2.437,2609,2.437,2610,3.804,2611,3.804,2612,2.121,2613,2.437,2614,3.804,2615,2.437,2616,2.437,2617,2.437,2618,2.437,2619,2.437,2620,2.437,2621,2.437,2622,2.437,2623,2.437,2624,2.437,2625,2.437,2626,2.437,2627,2.437,2628,2.437,2629,2.437,2630,2.437,2631,2.437,2632,2.437,2633,2.437,2634,3.804,2635,2.437]],["title/modules/UsersModule.html",[209,1.306,290,2.701]],["body/modules/UsersModule.html",[0,0.171,3,0.164,4,0.164,5,0.164,12,1.01,30,0.014,87,0.265,99,0.185,110,0.011,111,0.011,149,2.444,188,0.937,209,2.36,211,2.669,212,2.669,213,2.937,214,2.937,215,2.669,216,3.871,217,3.871,221,3.586,222,2.552,223,2.796,225,3.776,226,2.001,229,3.776,289,4.681,290,5.461,302,4.338,888,4.81,1501,3.985,1512,4.629,2586,5.253,2612,4.81,2636,4.81,2637,4.81,2638,5.527,2639,4.81,2640,5.527,2641,5.527]],["title/injectables/UsersService.html",[231,0.915,1512,2.255]],["body/injectables/UsersService.html",[0,0.065,1,2.349,3,0.062,4,0.062,5,0.062,10,0.891,11,1.761,12,1.359,14,2.349,15,0.12,17,1.162,18,3.027,19,3.369,21,2.698,22,2.586,23,2.344,24,2.254,25,3.34,26,3.254,27,2.519,28,2.732,29,0.421,30,0.014,31,1.251,34,0.611,35,1.805,36,1.517,39,0.642,43,1.892,44,1.878,47,0.657,63,0.998,66,1.175,87,0.215,98,2.147,99,0.113,109,0.855,110,0.006,111,0.006,116,0.929,119,2.833,136,0.549,138,1.597,145,0.706,153,1.056,154,1.727,155,1.633,156,1.633,158,2.574,163,2.083,164,2.009,166,1.495,173,2.833,175,1.797,188,0.356,191,1.014,198,1.531,209,0.68,226,0.761,231,0.767,232,0.929,234,2.609,235,1.323,237,2.461,241,3.003,247,1.242,248,1.116,250,1.376,251,2.138,253,2.518,256,1.319,257,1.408,259,2.083,260,1.938,262,2.062,263,2.123,268,1.408,414,2.833,465,2.722,466,2.123,476,1.434,512,1.892,516,1.242,527,2.31,540,1.175,576,2.147,634,1.319,640,0.891,648,1.892,669,1.711,673,0.891,674,1.876,694,1.319,728,1.797,729,1.116,732,2.698,817,2,823,1.136,829,3.352,838,2.833,894,1.828,896,3.031,898,2.266,915,1.515,916,2.123,917,1.515,918,1.408,919,4.424,946,2.438,949,2.266,954,2.266,955,3.818,956,2.438,958,1.175,959,1.515,962,2.438,963,2.438,965,2.438,966,2.438,976,2.438,977,1.515,978,1.408,981,1.515,1000,1.408,1001,2.266,1006,2.266,1008,1.175,1010,2.51,1015,1.515,1019,2.438,1021,1.515,1023,2.438,1025,1.515,1027,2.438,1098,1.063,1243,3.369,1249,1.408,1365,2.049,1419,1.633,1456,1.242,1497,3.26,1498,1.515,1499,3.053,1500,4.424,1501,1.515,1502,1.515,1503,1.408,1504,3.26,1505,3.26,1506,2.844,1507,2.844,1508,2.844,1509,2.722,1510,2.844,1511,2.654,1512,1.892,1513,2.654,1514,2.654,1515,1.649,1516,1.649,1517,3.331,1518,2.654,1519,1.649,1520,1.649,1521,2.654,1522,2.266,1523,1.649,1524,1.649,1525,1.649,1526,1.649,1527,1.649,1528,1.649,1529,2.654,1530,1.649,1531,2.654,1532,1.515,1533,1.649,1534,3.818,1535,1.649,1536,3.331,1537,2.654,1538,3.818,1539,2.654,1540,1.649,1541,1.649,1542,1.649,1543,1.649,1544,1.649,1545,1.649,1546,1.649,1547,1.649,1548,1.649,1549,2.654,1550,3.331,1551,1.649,1552,2.654,1553,1.649,1554,1.649,1555,2.654,1556,1.515,1557,1.649,1558,1.649,1559,1.649,1560,1.649,1561,2.654,1562,1.649,1563,1.649,1564,2.654,1565,1.649,1566,1.649,1567,1.649,1568,1.649,1569,1.649,1570,1.649,1571,1.649,1572,1.649,1573,1.649,1574,1.649,1575,1.649,1576,2.654,1577,1.649,1578,2.654,1579,2.654,1580,2.654,1581,1.515,1582,1.649,1583,1.515,2642,3.382,2643,3.382,2644,2.101,2645,2.101,2646,2.101,2647,2.101,2648,2.101,2649,2.101,2650,2.101,2651,2.101,2652,2.101,2653,2.101,2654,2.101]],["title/coverage.html",[2655,4.318]],["body/coverage.html",[0,0.251,1,1.613,5,0.099,6,3.785,7,4.081,12,1.034,14,1.613,29,0.219,30,0.014,35,0.938,79,2.097,110,0.008,111,0.008,112,2.421,113,2.239,115,2.908,147,2.474,148,2.409,150,2.908,160,2.097,179,2.239,189,2.097,215,1.613,231,1.752,233,2.908,260,1.007,269,2.409,270,2.908,276,1.353,277,2.097,297,2.623,307,3.478,329,5.393,368,2.908,372,3.232,373,3.829,374,4.197,375,4.197,383,3.027,409,2.699,415,2.097,416,2.623,457,2.409,458,2.908,468,2.097,469,1.543,509,2.239,519,2.097,522,1.69,525,1.69,527,1.123,605,2.908,648,4.736,730,3.478,739,2.239,740,3.785,747,3.007,790,2.097,799,2.097,812,1.976,823,2.428,871,1.976,889,2.908,896,1.69,1112,4.081,1117,2.239,1138,1.976,1139,2.623,1142,1.613,1159,2.908,1160,3.785,1171,2.908,1172,3.785,1190,2.239,1191,2.908,1192,3.785,1228,2.239,1229,2.908,1230,3.785,1243,1.976,1244,2.908,1280,4.468,1281,3.785,1291,3.232,1345,2.409,1346,2.908,1365,1.613,1389,2.409,1408,2.409,1419,2.329,1465,2.852,1471,4.197,1497,2.239,1498,4.081,1503,2.239,1512,1.87,1584,2.908,1585,2.908,1591,2.908,1598,2.908,1649,2.908,1710,2.623,1711,2.908,1712,4.152,1719,1.976,1723,2.623,1735,2.852,1750,2.409,1751,2.908,1823,2.239,1830,1.87,1834,2.097,1915,2.908,1916,2.908,1944,1.976,1945,2.908,2027,2.409,2033,2.908,2034,2.908,2118,2.908,2329,4.197,2384,2.908,2400,3.785,2406,3.785,2410,2.409,2423,2.908,2432,2.409,2433,2.908,2448,2.623,2461,2.908,2485,2.908,2490,2.908,2493,2.908,2499,2.908,2508,2.409,2509,2.908,2510,2.908,2513,2.908,2546,2.409,2547,4.152,2548,2.908,2576,2.409,2583,2.409,2586,2.409,2587,2.908,2655,2.623,2656,2.908,2657,3.341,2658,3.341,2659,6.847,2660,6.847,2661,6.571,2662,5.659,2663,4.197,2664,7.994,2665,3.341,2666,3.341,2667,4.823,2668,3.341,2669,6.197,2670,2.908,2671,4.925,2672,5.659,2673,2.908,2674,2.908,2675,5.659,2676,5.659,2677,4.823,2678,4.823,2679,6.197,2680,3.341,2681,3.341,2682,5.659,2683,4.823,2684,3.341,2685,3.341,2686,3.341,2687,3.341,2688,3.341,2689,3.341]],["title/dependencies.html",[212,2.341,2690,2.929]],["body/dependencies.html",[0,0.211,30,0.014,93,2.277,95,1.951,110,0.011,111,0.011,122,2.277,145,1.879,188,0.948,212,2.7,226,2.025,294,3.13,296,4.033,638,4.868,874,4.39,876,3.511,880,3.308,916,3.511,1116,4.902,1406,5.916,1407,5.916,1616,4.39,1692,4.868,1987,4.868,1988,5.916,2409,4.39,2557,4.868,2691,7.807,2692,5.593,2693,6.798,2694,5.593,2695,5.593,2696,5.593,2697,5.593,2698,5.593,2699,5.593,2700,5.593,2701,5.593,2702,5.593,2703,5.593,2704,5.593,2705,5.593,2706,5.593,2707,5.593,2708,5.593,2709,5.593,2710,5.593,2711,5.593,2712,5.593,2713,5.593,2714,5.593,2715,5.593,2716,5.593,2717,5.593,2718,5.593]],["title/miscellaneous/enumerations.html",[2719,2.112,2720,4.219]],["body/miscellaneous/enumerations.html",[3,0.157,15,0.302,30,0.014,110,0.011,111,0.011,172,4.26,373,2.674,416,4.149,440,4.121,450,4.16,451,5.153,452,4.18,453,4.689,1139,4.149,1151,5.153,1155,4.121,1156,4.734,1194,5.153,1199,4.149,1200,5.606,1280,3.811,1281,5.606,1302,4.734,1319,4.6,1320,4.6,1321,5.714,1322,4.6,1323,3.811,1324,4.6,1325,4.6,1326,4.6,1327,4.6,1328,4.6,1329,5.714,1330,5.153,1331,5.714,1332,5.714,1333,4.6,1334,3.811,1335,4.149,1336,4.6,1337,4.6,1338,4.6,1723,4.149,1743,3.883,1747,4.121,2719,3.318,2720,4.6,2721,6.566,2722,5.286,2723,5.286,2724,5.286]],["title/miscellaneous/functions.html",[2719,2.112,2725,4.219]],["body/miscellaneous/functions.html",[15,0.358,17,1.105,29,0.411,30,0.013,63,0.874,110,0.012,111,0.012,163,2.035,215,3.713,2671,5.466,2673,6.338,2674,6.694,2719,3.942,2725,5.466,2726,7.691,2727,6.281,2728,7.691]],["title/index.html",[15,0.192,704,2.427,2729,3.365]],["body/index.html",[4,0.132,8,1.338,30,0.014,37,2.967,97,2.786,110,0.01,111,0.01,223,3.783,237,2.246,268,2.975,338,3.863,347,4.608,352,3.863,357,4.743,359,2.975,376,4.422,567,3.484,576,3.783,926,3.484,958,2.484,1064,3.863,1071,3.484,1120,5.583,1323,3.201,1334,3.201,1347,5.109,1404,3.201,1595,5.109,1858,3.863,1948,3.863,2056,6.638,2152,3.863,2178,3.863,2283,6.091,2655,3.484,2656,5.109,2730,4.439,2731,4.439,2732,6.578,2733,5.871,2734,4.439,2735,4.439,2736,4.439,2737,6.578,2738,4.439,2739,6.999,2740,4.439,2741,7.743,2742,4.439,2743,4.439,2744,5.871,2745,4.439,2746,4.439,2747,6.578,2748,4.439,2749,4.439,2750,4.439,2751,4.439,2752,4.439,2753,6.999,2754,5.871,2755,4.439,2756,4.439,2757,4.439,2758,4.439,2759,5.871,2760,5.871,2761,4.439,2762,5.871,2763,7.478,2764,6.999,2765,4.439,2766,5.871,2767,4.439,2768,4.439,2769,4.439,2770,4.439,2771,6.999,2772,4.439,2773,4.439,2774,4.439,2775,5.871,2776,4.439,2777,4.439,2778,4.439,2779,4.439,2780,4.439,2781,5.871,2782,4.439,2783,4.439,2784,5.871,2785,4.439,2786,4.439,2787,6.091,2788,5.871,2789,4.439,2790,4.439,2791,4.439,2792,4.439,2793,4.439,2794,4.439,2795,4.439,2796,4.439,2797,5.871,2798,4.439,2799,4.439,2800,4.439,2801,4.439,2802,4.439,2803,4.439,2804,4.439,2805,5.871,2806,4.439,2807,4.439,2808,4.439,2809,4.439,2810,5.871,2811,4.439,2812,4.439,2813,4.439,2814,5.871,2815,5.871,2816,4.439,2817,4.439,2818,4.439,2819,4.439,2820,4.439,2821,4.439,2822,4.439,2823,4.439,2824,4.439,2825,4.439,2826,3.863,2827,4.439,2828,4.439,2829,4.439,2830,4.439,2831,4.439,2832,4.439]],["title/modules.html",[211,2.656]],["body/modules.html",[30,0.012,110,0.012,111,0.012,210,4.076,211,2.937,281,4.386,285,4.076,286,4.076,287,4.076,288,4.076,289,3.597,290,4.076,2787,7.161,2833,8.228,2834,8.228,2835,8.228]],["title/overview.html",[2836,4.788]],["body/overview.html",[2,1.45,30,0.014,79,3.705,109,1.822,110,0.01,111,0.01,114,1.979,149,1.621,189,4.797,209,1.45,210,5.022,211,2.161,212,2.161,213,2.378,214,2.378,215,2.161,216,2.378,217,2.378,218,3.895,219,3.895,220,3.895,221,3.136,222,2.066,223,2.264,232,1.979,277,4.145,281,5.939,282,3.895,283,3.895,284,3.895,285,5.022,286,5.351,287,5.259,288,5.309,289,4.587,290,5.198,519,4.797,599,3.895,600,3.895,601,3.895,812,4.519,867,3.895,868,3.895,869,3.895,871,4.519,896,3.866,1111,2.504,1408,5.511,1419,2.161,1462,3.895,1463,3.895,1464,3.895,1465,4.519,1512,4.276,1830,4.276,1834,4.797,1944,4.152,2023,3.895,2024,3.895,2025,3.895,2043,3.895,2448,3.513,2454,3.895,2455,3.895,2456,3.895,2636,3.895,2637,3.895,2639,3.895,2836,3.895,2837,4.476,2838,4.476]],["title/properties.html",[16,0.732,2690,2.929]],["body/properties.html",[8,1.941,16,0.972,30,0.014,110,0.012,111,0.012,1323,4.645,2826,5.606,2839,6.442,2840,6.442,2841,6.442]],["title/miscellaneous/variables.html",[1125,3.248,2719,2.112]],["body/miscellaneous/variables.html",[12,1.234,15,0.316,27,2.448,28,2.166,29,0.477,30,0.014,34,2.208,47,0.69,110,0.011,111,0.011,114,2.448,172,3.841,198,1.257,251,1.499,297,5.302,314,4.818,315,4.818,317,3.992,321,3.992,323,4.818,324,4.818,325,4.818,330,4.345,336,2.801,347,5.302,469,2.556,476,2.347,527,2.616,761,2.942,1125,3.71,1619,4.345,2400,4.345,2401,4.818,2402,3.992,2403,4.818,2404,4.818,2405,4.818,2410,4.871,2663,4.818,2670,4.818,2719,3.475,2842,5.536,2843,6.756,2844,5.536,2845,5.536,2846,5.536,2847,5.536,2848,5.536,2849,5.536,2850,5.536,2851,5.536,2852,5.536,2853,5.536,2854,6.756,2855,5.536]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":648,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0')}${string(today.getdate()).padstart(2",{"_index":2157,"title":{},"body":{"injectables/QueueService.html":{}}}],["0.0.1",{"_index":2840,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2699,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2711,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":2718,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2698,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2708,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2664,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2662,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2687,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2679,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2677,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2684,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":2681,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2678,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":2686,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2660,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":2685,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2659,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2669,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2682,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2661,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2675,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2676,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2683,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1225,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UserResponseDto.html":{}}}],["01t00:00:00.000z",{"_index":2561,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["08:00",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["09123456789",{"_index":106,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["09123456789'})@isstring",{"_index":2385,"title":{},"body":{"classes/RegisterDto.html":{}}}],["09123456789'})@isstring()@isoptional",{"_index":58,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["1",{"_index":109,"title":{"injectables/MinioService-1.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":2156,"title":{},"body":{"injectables/QueueService.html":{}}}],["1).padstart(3",{"_index":2173,"title":{},"body":{"injectables/QueueService.html":{}}}],["1/10",{"_index":2667,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":2668,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2666,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1419,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["100",{"_index":128,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["100).tofixed(1",{"_index":2115,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["1024",{"_index":1420,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["10mb",{"_index":1421,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["11.0.0",{"_index":2693,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2694,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":2691,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":2696,"title":{},"body":{"dependencies.html":{}}}],["11:59",{"_index":2058,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["123",{"_index":49,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["13",{"_index":2838,"title":{},"body":{"overview.html":{}}}],["15",{"_index":2177,"title":{},"body":{"injectables/QueueService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["16.5.0",{"_index":2702,"title":{},"body":{"dependencies.html":{}}}],["1990",{"_index":1224,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["1d",{"_index":887,"title":{},"body":{"modules/AuthModule.html":{}}}],["1})@isoptional()@type(undefined)@isnumber()@min(1",{"_index":2549,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["2",{"_index":108,"title":{"interfaces/RequestWithUser-2.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["2.0.0",{"_index":2705,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":757,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":472,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":2560,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["23",{"_index":2043,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"overview.html":{}}}],["23:59",{"_index":2059,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["25",{"_index":2585,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["250",{"_index":1481,"title":{},"body":{"entities/DocumentFile.html":{}}}],["255",{"_index":140,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["2})@isnumber()@isoptional",{"_index":38,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["3",{"_index":1279,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueService.html":{}}}],["3.14.1",{"_index":2707,"title":{},"body":{"dependencies.html":{}}}],["30min",{"_index":698,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["33",{"_index":2665,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":2848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3600",{"_index":1645,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["4",{"_index":1249,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["4.0.1",{"_index":2709,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2692,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2700,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":2714,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":759,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["401",{"_index":764,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["403",{"_index":767,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["404",{"_index":771,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["409",{"_index":773,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["5",{"_index":174,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["5.0.1",{"_index":2717,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":2697,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":393,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{}}}],["500",{"_index":134,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["59",{"_index":2074,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["5:00",{"_index":696,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["6",{"_index":649,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateUserDto.html":{}}}],["6.0.0",{"_index":2695,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":2312,"title":{},"body":{"injectables/QueueService.html":{}}}],["639123456789",{"_index":1246,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["6})@isstring()@minlength(6",{"_index":1270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["7.8.2",{"_index":2713,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":79,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"overview.html":{}}}],["8.0.5",{"_index":2703,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":2577,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["8:00",{"_index":695,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["8})@isstring()@isnotempty()@minlength(8",{"_index":2396,"title":{},"body":{"classes/RegisterDto.html":{}}}],["8})@isstring()@isoptional()@minlength(8",{"_index":83,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["9",{"_index":2837,"title":{},"body":{"overview.html":{}}}],["9000",{"_index":1621,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["999",{"_index":2075,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["_",{"_index":1077,"title":{},"body":{"injectables/AuthService.html":{}}}],["__dirname",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":930,"title":{},"body":{"injectables/AuthService.html":{}}}],["access",{"_index":1907,"title":{},"body":{"controllers/QueueController.html":{}}}],["access_token",{"_index":826,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["accesskey",{"_index":1624,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["accurate",{"_index":2158,"title":{},"body":{"injectables/QueueService.html":{}}}],["action",{"_index":2093,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["active",{"_index":1155,"title":{},"body":{"entities/Counter.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["activeusers",{"_index":1505,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["add",{"_index":849,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["addcounter",{"_index":1752,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["addcounter(@body",{"_index":1896,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(data",{"_index":1769,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(name",{"_index":2125,"title":{},"body":{"injectables/QueueService.html":{}}}],["adddays",{"_index":635,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["adddays(today",{"_index":708,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["additional",{"_index":1338,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["address",{"_index":20,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["address'})@isemail()@isnotempty",{"_index":1254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["addselect('count(user.id",{"_index":1568,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["admin",{"_index":10,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admin/staff",{"_index":480,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["admin/super",{"_index":1384,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["admincreateuser",{"_index":2588,"title":{},"body":{"controllers/UsersController.html":{}}}],["admincreateuser(createuserdto",{"_index":2589,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminid",{"_index":901,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{}}}],["administrators",{"_index":751,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["adminrolenames",{"_index":1053,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminrolenames.some",{"_index":1056,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles",{"_index":1051,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles.map((role",{"_index":1054,"title":{},"body":{"injectables/AuthService.html":{}}}],["admins",{"_index":1902,"title":{},"body":{"controllers/QueueController.html":{}}}],["adminupdate",{"_index":1536,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["adminupdate(id",{"_index":2645,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminupdateuser",{"_index":741,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["adminupdateuser(adminid",{"_index":899,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminupdateuser(req",{"_index":746,"title":{},"body":{"controllers/AuthController.html":{}}}],["adminupdateuserdto",{"_index":1,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["adminupdateuserdto})@apiresponse({status",{"_index":756,"title":{},"body":{"controllers/AuthController.html":{}}}],["advanced",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["afterconnect",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["ahead",{"_index":2231,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails",{"_index":2246,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.foreach((detail",{"_index":2253,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.length",{"_index":2249,"title":{},"body":{"injectables/QueueService.html":{}}}],["allow",{"_index":580,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["allowed",{"_index":1428,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["allowedheaders",{"_index":1994,"title":{},"body":{"classes/QueueGateway.html":{}}}],["allowing",{"_index":2776,"title":{},"body":{"index.html":{}}}],["allows",{"_index":750,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["allqueues",{"_index":2352,"title":{},"body":{"controllers/QueuesController.html":{}}}],["allqueues.map((queue",{"_index":2356,"title":{},"body":{"controllers/QueuesController.html":{}}}],["alltimeslots",{"_index":700,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["alltimeslots.filter((slot",{"_index":702,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["already",{"_index":732,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["always",{"_index":1856,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["amazing",{"_index":2820,"title":{},"body":{"index.html":{}}}],["announcement",{"_index":113,"title":{"entities/Announcement.html":{}},"body":{"entities/Announcement.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["announcement.controller",{"_index":227,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["announcement.dto",{"_index":192,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{}}}],["announcement.dto.ts",{"_index":1160,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["announcement.dto.ts:10",{"_index":1164,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:14",{"_index":1165,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:18",{"_index":1162,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:22",{"_index":1167,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:6",{"_index":1168,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.isactive",{"_index":265,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcement.service",{"_index":190,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{}}}],["announcementcontroller",{"_index":148,"title":{"controllers/AnnouncementController.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"coverage.html":{}}}],["announcementmodule",{"_index":210,"title":{"modules/AnnouncementModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["announcementrepository",{"_index":239,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcements",{"_index":152,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["announcementservice",{"_index":189,"title":{"injectables/AnnouncementService.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{},"overview.html":{}}}],["api",{"_index":2343,"title":{},"body":{"controllers/QueuesController.html":{}}}],["apibearerauth",{"_index":535,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apibearerauth('jwt",{"_index":539,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{}}}],["apibody",{"_index":822,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apiconsumes",{"_index":1411,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apiconsumes('multipart/form",{"_index":1430,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apioperation",{"_index":533,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":749,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiparam",{"_index":821,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apiproperty",{"_index":1217,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["apiproperty({description",{"_index":1196,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["apiproperty({enum",{"_index":1203,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["apiproperty({example",{"_index":1252,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["apiproperty({type",{"_index":1720,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{}}}],["apipropertyoptional",{"_index":94,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["apipropertyoptional({description",{"_index":33,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional({example",{"_index":1245,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["apiresponse",{"_index":534,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":532,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags('appointments",{"_index":536,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["apitags('authentication",{"_index":824,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apitags('document",{"_index":1412,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apitags('users",{"_index":2616,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":385,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"injectables/AppointmentService.html":{},"entities/DocumentFile.html":{}}}],["app.appointmenttime",{"_index":693,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["app.controller",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["app.files",{"_index":1476,"title":{},"body":{"entities/DocumentFile.html":{}}}],["app.service",{"_index":278,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.statushistory",{"_index":386,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["appcontroller",{"_index":269,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":376,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1354,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["application.dto",{"_index":1410,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts",{"_index":1192,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["application.dto.ts:12",{"_index":1205,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:18",{"_index":2495,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:21",{"_index":1202,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:27",{"_index":2496,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:33",{"_index":1211,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:42",{"_index":1214,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.entity",{"_index":410,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.entity.ts",{"_index":1281,"title":{},"body":{"entities/DocumentApplication.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["application.entity.ts:41",{"_index":1299,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:44",{"_index":1314,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:51",{"_index":1288,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:54",{"_index":1286,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:61",{"_index":1303,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:64",{"_index":1308,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:67",{"_index":1297,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:70",{"_index":1290,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:73",{"_index":1311,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:76",{"_index":1301,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:81",{"_index":1313,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:84",{"_index":1294,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:90",{"_index":1307,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_id",{"_index":390,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["application_subtype",{"_index":1285,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_type",{"_index":1287,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationid",{"_index":377,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["applications",{"_index":1347,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"index.html":{}}}],["applications.controller",{"_index":1467,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.controller.ts",{"_index":1346,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"coverage.html":{}}}],["applications.controller.ts:112",{"_index":1376,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:136",{"_index":1367,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:154",{"_index":1361,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:165",{"_index":1381,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:183",{"_index":1390,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:211",{"_index":1393,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:226",{"_index":1387,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:241",{"_index":1370,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:249",{"_index":1385,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:46",{"_index":1355,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:74",{"_index":1400,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:96",{"_index":1359,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.module",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["applications.module.ts",{"_index":1466,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.service",{"_index":1409,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{}}}],["applications.service.ts",{"_index":2680,"title":{},"body":{"coverage.html":{}}}],["applications/document",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applications/dto/create",{"_index":1191,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/dto/update",{"_index":2493,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/entities/application",{"_index":374,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["applications/entities/document",{"_index":1280,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["applications/services/minio.service.ts",{"_index":1649,"title":{},"body":{"injectables/MinioService-1.html":{},"coverage.html":{}}}],["applications/services/minio.service.ts:109",{"_index":1656,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:119",{"_index":1659,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:128",{"_index":1664,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:46",{"_index":1665,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:50",{"_index":1657,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:65",{"_index":1666,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:7",{"_index":1667,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:8",{"_index":1668,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:9",{"_index":1655,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:93",{"_index":1662,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applicationstatus",{"_index":1302,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["applicationstatus.approved",{"_index":2497,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["applicationstatus.pending",{"_index":1344,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationstatushistory",{"_index":372,"title":{"entities/ApplicationStatusHistory.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applicationsubtype",{"_index":1193,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["applicationtype",{"_index":1194,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["applicationtype.birth_certificate",{"_index":1218,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["apply",{"_index":1521,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["appmodule",{"_index":281,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":415,"title":{"entities/Appointment.html":{}},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{}}}],["appointment'})@apiresponse({status",{"_index":471,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment.appointmentdate",{"_index":665,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.appointmenttime",{"_index":667,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.controller",{"_index":603,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["appointment.dto",{"_index":521,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts",{"_index":1172,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["appointment.dto.ts:13",{"_index":1178,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:17",{"_index":1180,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:21",{"_index":1181,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:25",{"_index":1174,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:29",{"_index":1182,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:33",{"_index":1183,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:37",{"_index":1176,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:41",{"_index":1177,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:45",{"_index":1185,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:48",{"_index":1186,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:51",{"_index":1179,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:9",{"_index":2492,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.service",{"_index":520,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{}}}],["appointment.status",{"_index":681,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.userid",{"_index":583,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment_type",{"_index":1919,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmentcontroller",{"_index":457,"title":{"controllers/AppointmentController.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"coverage.html":{}}}],["appointmentdate",{"_index":417,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmentmodule",{"_index":285,"title":{"modules/AppointmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules.html":{},"overview.html":{}}}],["appointmentnumber",{"_index":418,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentrepository",{"_index":614,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointments",{"_index":459,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentservice",{"_index":519,"title":{"injectables/AppointmentService.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{},"overview.html":{}}}],["appointmentstatus",{"_index":440,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"miscellaneous/enumerations.html":{}}}],["appointmentstatus.cancelled",{"_index":721,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.completed",{"_index":720,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.confirmed",{"_index":689,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.pending",{"_index":456,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{}}}],["appointmenttime",{"_index":419,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmenttype",{"_index":1231,"title":{},"body":{"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["appropriately",{"_index":1065,"title":{},"body":{"injectables/AuthService.html":{}}}],["approved",{"_index":1330,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["appservice",{"_index":277,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":41,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{}}}],["array.isarray(payload.roles",{"_index":1136,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["array.isarray(queue.details",{"_index":2360,"title":{},"body":{"controllers/QueuesController.html":{}}}],["asc",{"_index":657,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["asia/manila",{"_index":2045,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["assign",{"_index":43,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["assigned",{"_index":1080,"title":{},"body":{"injectables/AuthService.html":{}}}],["assigning",{"_index":984,"title":{},"body":{"injectables/AuthService.html":{}}}],["assignment",{"_index":2611,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignment'})@apiresponse({status",{"_index":2593,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignments",{"_index":861,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["assignments'})@apiparam({name",{"_index":754,"title":{},"body":{"controllers/AuthController.html":{}}}],["assignrolestouser",{"_index":2462,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":2467,"title":{},"body":{"injectables/RolesService.html":{}}}],["associated",{"_index":2290,"title":{},"body":{"injectables/QueueService.html":{}}}],["async",{"_index":234,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attempt",{"_index":931,"title":{},"body":{"injectables/AuthService.html":{}}}],["attempting",{"_index":1047,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":540,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth')@apibody({type",{"_index":808,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard",{"_index":776,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard)@get('profile",{"_index":787,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":877,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":524,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1585,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":813,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":528,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/decorators/user.decorator",{"_index":530,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{}}}],["auth/dto/update",{"_index":1502,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/guards/jwt",{"_index":523,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/roles.guard",{"_index":526,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/jwt.strategy",{"_index":531,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":739,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authenticated",{"_index":543,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{}}}],["authenticateduser",{"_index":469,"title":{"interfaces/AuthenticatedUser.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":1587,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1586,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":286,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2826,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":1995,"title":{},"body":{"classes/QueueGateway.html":{}}}],["authservice",{"_index":812,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1262,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{}}}],["availability",{"_index":661,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["available",{"_index":571,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["average",{"_index":2301,"title":{},"body":{"injectables/QueueService.html":{}}}],["averagewaittime",{"_index":2305,"title":{},"body":{"injectables/QueueService.html":{}}}],["await",{"_index":253,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":2766,"title":{},"body":{"index.html":{}}}],["back",{"_index":991,"title":{},"body":{"injectables/AuthService.html":{}}}],["backend",{"_index":1839,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["backers",{"_index":2821,"title":{},"body":{"index.html":{}}}],["backward",{"_index":2542,"title":{},"body":{"entities/User.html":{}}}],["bad",{"_index":760,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception",{"_index":516,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('cannot",{"_index":650,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('date",{"_index":560,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["badrequestexception('document",{"_index":1435,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["badrequestexception('failed",{"_index":1035,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":644,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{}}}],["badrequestexception('this",{"_index":735,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception(`role",{"_index":1078,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`user",{"_index":1060,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(passwordvalidation.message",{"_index":971,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":2152,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["basic",{"_index":1062,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":916,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":940,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":921,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":973,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":2631,"title":{},"body":{"controllers/UsersController.html":{}}}],["bcrypt.hash(password",{"_index":975,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(updateuserdto.password",{"_index":1013,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":851,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":344,"title":{},"body":{"modules/AppModule.html":{}}}],["being",{"_index":1001,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["belongs",{"_index":577,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["below",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["better",{"_index":2069,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["between",{"_index":633,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["between(startdate",{"_index":705,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["between(startofday",{"_index":2081,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["between(todaystart",{"_index":2166,"title":{},"body":{"injectables/QueueService.html":{}}}],["bigint",{"_index":1486,"title":{},"body":{"entities/DocumentFile.html":{}}}],["birth",{"_index":1199,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["birth_certificate",{"_index":1319,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["birthdate",{"_index":1223,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["birthplace",{"_index":1226,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["board",{"_index":2813,"title":{},"body":{"index.html":{}}}],["body",{"_index":182,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["body('documentcategory",{"_index":1431,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["body('status",{"_index":588,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["body.status",{"_index":1880,"title":{},"body":{"controllers/QueueController.html":{}}}],["book",{"_index":651,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["booked",{"_index":733,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots",{"_index":691,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots.includes(slot",{"_index":703,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["boolean",{"_index":138,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":215,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":2347,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["browse",{"_index":2835,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2833,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1691,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["bucketname",{"_index":1599,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["building",{"_index":2733,"title":{},"body":{"index.html":{}}}],["bulacan",{"_index":107,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulacan'})@isstring()@isoptional",{"_index":54,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulak",{"_index":1631,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["bulak_smart_connect",{"_index":2853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bulk",{"_index":1871,"title":{},"body":{"controllers/QueueController.html":{}}}],["business",{"_index":1327,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["business_permit",{"_index":1326,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["calculate",{"_index":2300,"title":{},"body":{"injectables/QueueService.html":{}}}],["callback",{"_index":1423,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["callback(null",{"_index":1429,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["called",{"_index":2291,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["caller",{"_index":1582,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["callnext",{"_index":1753,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["callnext(@param('counterid",{"_index":1894,"title":{},"body":{"controllers/QueueController.html":{}}}],["callnext(counterid",{"_index":1772,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["canactivate",{"_index":2407,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":2412,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["cancel",{"_index":2083,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancellation",{"_index":2095,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancellations",{"_index":2091,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelled",{"_index":453,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":716,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["cancelledqueues",{"_index":2085,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledqueues.length",{"_index":2089,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues",{"_index":2102,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues.length",{"_index":2104,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cascade",{"_index":388,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":1477,"title":{},"body":{"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["catch",{"_index":673,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["category",{"_index":1433,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["category)'})@apiresponse({status",{"_index":1375,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["caught",{"_index":1069,"title":{},"body":{"injectables/AuthService.html":{}}}],["certificate",{"_index":1200,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["change",{"_index":1009,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["changed",{"_index":1015,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["changed_at",{"_index":396,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changed_by",{"_index":398,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedat",{"_index":378,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedby",{"_index":379,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changing",{"_index":660,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["channel",{"_index":2790,"title":{},"body":{"index.html":{}}}],["character",{"_index":1110,"title":{},"body":{"injectables/AuthService.html":{}}}],["characters",{"_index":80,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["check",{"_index":576,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checkexists",{"_index":2119,"title":{},"body":{"injectables/QueueService.html":{}}}],["checkexists(id",{"_index":2128,"title":{},"body":{"injectables/QueueService.html":{}}}],["checking",{"_index":736,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/QueueController.html":{}}}],["checkqueueexists",{"_index":1754,"title":{},"body":{"controllers/QueueController.html":{}}}],["checkqueueexists(@param('id",{"_index":1899,"title":{},"body":{"controllers/QueueController.html":{}}}],["checkqueueexists(id",{"_index":1776,"title":{},"body":{"controllers/QueueController.html":{}}}],["checks",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["checktimeslotavailability",{"_index":606,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["checktimeslotavailability(date",{"_index":615,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["citizen",{"_index":98,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["citizenrole",{"_index":979,"title":{},"body":{"injectables/AuthService.html":{}}}],["citizenrole.id",{"_index":982,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"overview.html":{}}}],["clear",{"_index":2328,"title":{},"body":{"injectables/QueueService.html":{}}}],["clicks",{"_index":2775,"title":{},"body":{"index.html":{}}}],["client",{"_index":1965,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":2002,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join('queue_updates",{"_index":2013,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":2010,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":2006,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":2016,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["cloud",{"_index":2761,"title":{},"body":{"index.html":{}}}],["cluster_announcementmodule",{"_index":218,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_exports",{"_index":219,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_providers",{"_index":220,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule",{"_index":599,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_exports",{"_index":600,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_providers",{"_index":601,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":867,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":869,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":870,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":868,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule",{"_index":1462,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_exports",{"_index":1464,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_providers",{"_index":1463,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":2023,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":2024,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":2025,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":2454,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":2455,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":2456,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2636,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2639,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2638,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2637,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["column",{"_index":144,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({default",{"_index":433,"title":{},"body":{"entities/Appointment.html":{}}}],["column({name",{"_index":392,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":436,"title":{},"body":{"entities/Appointment.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":125,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":427,"title":{},"body":{"entities/Appointment.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["combine",{"_index":2264,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["come",{"_index":1858,"title":{},"body":{"controllers/QueueController.html":{},"index.html":{}}}],["compatibility",{"_index":2543,"title":{},"body":{"entities/User.html":{}}}],["complete",{"_index":48,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["completed",{"_index":452,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":1728,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":1724,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["completedcount",{"_index":715,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["completedqueues",{"_index":2303,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.length",{"_index":2306,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.reduce((total",{"_index":2308,"title":{},"body":{"injectables/QueueService.html":{}}}],["completion",{"_index":2113,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["component",{"_index":1026,"title":{},"body":{"injectables/AuthService.html":{}}}],["components",{"_index":1548,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["concurrent",{"_index":2061,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["config",{"_index":882,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":884,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/database.config",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["configservice.get('db_host",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_logging",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_synchronize",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_timezone",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":1123,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":346,"title":{},"body":{"modules/AppModule.html":{}}}],["configured",{"_index":1682,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["confirmed",{"_index":451,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"miscellaneous/enumerations.html":{}}}],["confirmedcount",{"_index":714,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["conflict",{"_index":774,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["conflictexception",{"_index":915,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('email",{"_index":963,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('username",{"_index":966,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conn",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query(`set",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":1633,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["connected",{"_index":2001,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":987,"title":{},"body":{"injectables/AuthService.html":{}}}],["console",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":706,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.error('admin",{"_index":1095,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('error",{"_index":729,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["console.error('invalid",{"_index":2321,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.error('login",{"_index":957,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('registration",{"_index":992,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('user",{"_index":1038,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(`error",{"_index":675,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["console.error(`invalid",{"_index":1879,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log",{"_index":1046,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["console.log('comparing",{"_index":937,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('creating",{"_index":2188,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('dto",{"_index":1842,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log('final",{"_index":1847,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log('found",{"_index":2218,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log('generated",{"_index":952,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('get",{"_index":2345,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('getting",{"_index":2240,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('login",{"_index":833,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('manual",{"_index":1851,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log('original",{"_index":1841,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log('password",{"_index":941,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('processed",{"_index":1859,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log('processing",{"_index":2357,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('queue",{"_index":1840,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["console.log('received",{"_index":1432,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{}}}],["console.log('register",{"_index":841,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('stored",{"_index":935,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":932,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`calculated",{"_index":2239,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`creating",{"_index":2174,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`deleted",{"_index":679,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.log(`finding",{"_index":2259,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`found",{"_index":2227,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`getting",{"_index":2226,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`manual",{"_index":1908,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log(`patch",{"_index":1876,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log(`pending",{"_index":2238,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`queue",{"_index":1884,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["console.log(`returning",{"_index":2266,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log(`serving",{"_index":2233,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`updated",{"_index":671,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.log(`updating",{"_index":2216,"title":{},"body":{"injectables/QueueService.html":{}}}],["const",{"_index":251,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":235,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["constructor(announcementrepository",{"_index":236,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["constructor(appointmentrepository",{"_index":612,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["constructor(configservice",{"_index":1588,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{}}}],["constructor(private",{"_index":195,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(queuerepository",{"_index":2038,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["constructor(queueservice",{"_index":1957,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":2450,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":2464,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":894,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["contact",{"_index":57,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["contact_number",{"_index":2514,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":21,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["contain",{"_index":1102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["containing",{"_index":1208,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["content",{"_index":1637,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["context",{"_index":2453,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":2416,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2415,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":2417,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":147,"title":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('announcements",{"_index":194,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["controller('appointments",{"_index":537,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["controller('auth",{"_index":825,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["controller('document",{"_index":1413,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["controller('queue",{"_index":1836,"title":{},"body":{"controllers/QueueController.html":{}}}],["controller('queues",{"_index":2340,"title":{},"body":{"controllers/QueuesController.html":{}}}],["controller('roles",{"_index":2443,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('users",{"_index":2617,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":149,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":2313,"title":{},"body":{"injectables/QueueService.html":{}}}],["converting",{"_index":852,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["copy",{"_index":1198,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["cors",{"_index":1990,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":1509,"title":{},"body":{"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["count')@useguards(jwtauthguard",{"_index":1817,"title":{},"body":{"controllers/QueueController.html":{}}}],["counter",{"_index":1138,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":1730,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["counter.currentqueue.completedat",{"_index":2278,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueue.status",{"_index":2277,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueueid",{"_index":2281,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.id",{"_index":2297,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.name",{"_index":2287,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter/entities/counter.entity",{"_index":1746,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["counter_number",{"_index":1732,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":1775,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["countername",{"_index":2296,"title":{},"body":{"injectables/QueueService.html":{}}}],["counternumber",{"_index":1725,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["counterrepository",{"_index":2123,"title":{},"body":{"injectables/QueueService.html":{}}}],["counters",{"_index":2315,"title":{},"body":{"injectables/QueueService.html":{}}}],["counterstatus",{"_index":1151,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":1158,"title":{},"body":{"entities/Counter.html":{}}}],["counting",{"_index":2159,"title":{},"body":{"injectables/QueueService.html":{}}}],["counts",{"_index":710,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["courses",{"_index":2796,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2655,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":154,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create')@useguards(jwtauthguard",{"_index":2591,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@body",{"_index":197,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/QueueController.html":{}}}],["create(createannouncementdto",{"_index":159,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["create(createappointmentdto",{"_index":467,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["create(createdto",{"_index":1353,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["create(createqueuedto",{"_index":1779,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["create(createuserdto",{"_index":1580,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createannouncementdto",{"_index":160,"title":{"classes/CreateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["createappointmentdto",{"_index":468,"title":{"classes/CreateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["createappointmentdto.userid",{"_index":544,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["created",{"_index":473,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["created_at",{"_index":1289,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":116,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":123,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":395,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdby",{"_index":117,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["createdocumentapplicationdto",{"_index":1190,"title":{"classes/CreateDocumentApplicationDto.html":{}},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["createdto",{"_index":1356,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["createmanualqueue",{"_index":1755,"title":{},"body":{"controllers/QueueController.html":{}}}],["createmanualqueue(createqueuedto",{"_index":1783,"title":{},"body":{"controllers/QueueController.html":{}}}],["createparamdecorator",{"_index":2401,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":1557,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createquerybuilder('user",{"_index":1518,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createqueuedto",{"_index":1228,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["createqueuedto.address",{"_index":2198,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.appointmenttype",{"_index":2201,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.firstname",{"_index":2195,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.isguest",{"_index":1843,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["createqueuedto.lastname",{"_index":2196,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.middleinitial",{"_index":2197,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.phonenumber",{"_index":2199,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.reasonofvisit",{"_index":2200,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.userid",{"_index":1846,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["creates",{"_index":2592,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":1243,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":1583,"title":{},"body":{"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":1838,"title":{},"body":{"controllers/QueueController.html":{},"classes/UserResponseDto.html":{}}}],["credentials",{"_index":830,"title":{},"body":{"controllers/AuthController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["credentials'})@apibody({type",{"_index":795,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials'})@apiresponse({status",{"_index":766,"title":{},"body":{"controllers/AuthController.html":{}}}],["cron",{"_index":2054,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cron('59",{"_index":2042,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cruz",{"_index":1222,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["ctx",{"_index":2403,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2404,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1714,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["current_queue_id",{"_index":1145,"title":{},"body":{"entities/Counter.html":{}}}],["currently",{"_index":2229,"title":{},"body":{"injectables/QueueService.html":{}}}],["currentqueue",{"_index":1140,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{}}}],["currentqueueid",{"_index":1141,"title":{},"body":{"entities/Counter.html":{}}}],["currentuser",{"_index":2622,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.id",{"_index":2623,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.roles.some((role",{"_index":2624,"title":{},"body":{"controllers/UsersController.html":{}}}],["daily",{"_index":1904,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["data",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["data')@apioperation({summary",{"_index":1398,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["data'})@apiresponse({status",{"_index":763,"title":{},"body":{"controllers/AuthController.html":{}}}],["database",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":2728,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":122,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"dependencies.html":{}}}],["date')@useguards(jwtauthguard",{"_index":495,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["date().todatestring",{"_index":1914,"title":{},"body":{"controllers/QueueController.html":{}}}],["date().toisostring",{"_index":1693,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["date(today",{"_index":2161,"title":{},"body":{"injectables/QueueService.html":{}}}],["date(today.getfullyear",{"_index":2071,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["date.getday",{"_index":647,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["datestr",{"_index":2154,"title":{},"body":{"injectables/QueueService.html":{}}}],["day",{"_index":2057,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["dayofweek",{"_index":646,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["dd",{"_index":727,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["death",{"_index":1325,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["death_certificate",{"_index":1324,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["debug",{"_index":934,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["debugging",{"_index":844,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["declarations",{"_index":214,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decline",{"_index":1332,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["decorators",{"_index":32,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["decorators/roles.decorator",{"_index":818,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["deeper",{"_index":2792,"title":{},"body":{"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":2517,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":829,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultroleid",{"_index":18,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultstrategy",{"_index":879,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":2411,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":39,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dela",{"_index":1221,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["delete",{"_index":185,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":176,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1386,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":507,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["delete(':id')@useguards(rolesguard)@roles('admin",{"_index":2603,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":1456,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletefile",{"_index":1601,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deletefile(objectname",{"_index":1605,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deleting",{"_index":680,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/MinioService-1.html":{}}}],["deletion",{"_index":596,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["dependencies",{"_index":212,"title":{"dependencies.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":2753,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":2765,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2759,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":2774,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":2481,"title":{},"body":{"injectables/RolesService.html":{}}}],["desc",{"_index":257,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["desc').skip(skip).take(limit",{"_index":1526,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["detail",{"_index":2255,"title":{},"body":{"injectables/QueueService.html":{}}}],["detail.queue.id",{"_index":2325,"title":{},"body":{"injectables/QueueService.html":{}}}],["details",{"_index":1209,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["details.entity",{"_index":1745,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["details.entity.ts",{"_index":1916,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":1923,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":1936,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":1935,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":1941,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":1940,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":1922,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":1927,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":1929,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":1918,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":1931,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":1938,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":1920,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:52",{"_index":1925,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":1736,"title":{},"body":{"entities/Queue.html":{}}}],["details?.address",{"_index":2369,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.firstname",{"_index":2365,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.lastname",{"_index":2366,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.middleinitial",{"_index":2367,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.phonenumber",{"_index":2370,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.reasonofvisit",{"_index":2368,"title":{},"body":{"controllers/QueuesController.html":{}}}],["detailsmap",{"_index":2242,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[detail.queueid",{"_index":2254,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[queue.id",{"_index":2265,"title":{},"body":{"injectables/QueueService.html":{}}}],["development",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":2802,"title":{},"body":{"index.html":{}}}],["different",{"_index":711,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["digits",{"_index":2169,"title":{},"body":{"injectables/QueueService.html":{}}}],["disable",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["disconnected",{"_index":2005,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":2789,"title":{},"body":{"index.html":{}}}],["dive",{"_index":2791,"title":{},"body":{"index.html":{}}}],["document",{"_index":409,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["document_category",{"_index":1480,"title":{},"body":{"entities/DocumentFile.html":{}}}],["documentapplication",{"_index":383,"title":{"entities/DocumentApplication.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["documentapplicationscontroller",{"_index":1345,"title":{"controllers/DocumentApplicationsController.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["documentapplicationsmodule",{"_index":287,"title":{"modules/DocumentApplicationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules.html":{},"overview.html":{}}}],["documentapplicationsservice",{"_index":1408,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{},"overview.html":{}}}],["documentation",{"_index":2656,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentcategory",{"_index":1396,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["documentfile",{"_index":1291,"title":{"entities/DocumentFile.html":{}},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["doe",{"_index":105,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":2391,"title":{},"body":{"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":67,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["doesn't",{"_index":2228,"title":{},"body":{"injectables/QueueService.html":{}}}],["don't",{"_index":579,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{}}}],["dotenv",{"_index":2701,"title":{},"body":{"dependencies.html":{}}}],["download",{"_index":1379,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["dropschema",{"_index":342,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":9,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/create",{"_index":191,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":814,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":815,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":193,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["dto/user",{"_index":2614,"title":{},"body":{"controllers/UsersController.html":{}}}],["during",{"_index":1068,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["e.g",{"_index":73,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["e2e",{"_index":2749,"title":{},"body":{"index.html":{}}}],["each",{"_index":1273,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueService.html":{}}}],["eager",{"_index":1306,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["earlier",{"_index":2235,"title":{},"body":{"injectables/QueueService.html":{}}}],["east",{"_index":1687,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["easy",{"_index":2251,"title":{},"body":{"injectables/QueueService.html":{}}}],["efficient",{"_index":2734,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":2757,"title":{},"body":{"index.html":{}}}],["email",{"_index":22,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["emailorusername",{"_index":1592,"title":{},"body":{"classes/LoginDto.html":{}}}],["emailregex",{"_index":993,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailregex.test(email",{"_index":995,"title":{},"body":{"injectables/AuthService.html":{}}}],["empty",{"_index":2257,"title":{},"body":{"injectables/QueueService.html":{}}}],["end",{"_index":568,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["enddate",{"_index":500,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["endofday",{"_index":2048,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endofday.toisostring",{"_index":2078,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endpoint",{"_index":842,"title":{},"body":{"controllers/AuthController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["endpoints",{"_index":1457,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["endpoint}:${port",{"_index":1683,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ensure",{"_index":2755,"title":{},"body":{"index.html":{}}}],["ensurebucketexists",{"_index":1650,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ensures",{"_index":2171,"title":{},"body":{"injectables/QueueService.html":{}}}],["ensuring",{"_index":1690,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["enterprise",{"_index":2804,"title":{},"body":{"index.html":{}}}],["entities",{"_index":114,"title":{},"body":{"entities/Announcement.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/announcement.entity",{"_index":228,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{}}}],["entities/application",{"_index":1468,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["entities/appointment.entity",{"_index":529,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["entities/document",{"_index":1216,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["entities/queue",{"_index":2031,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["entities/queue.entity",{"_index":1833,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":2458,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":1501,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":112,"title":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('announcements",{"_index":146,"title":{},"body":{"entities/Announcement.html":{}}}],["entity('application_status_history",{"_index":411,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["entity('appointments",{"_index":454,"title":{},"body":{"entities/Appointment.html":{}}}],["entity('counters",{"_index":1157,"title":{},"body":{"entities/Counter.html":{}}}],["entity('document_applications",{"_index":1339,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["entity('document_files",{"_index":1495,"title":{},"body":{"entities/DocumentFile.html":{}}}],["entity('queue_details",{"_index":1943,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":1748,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":2431,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":2540,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":441,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["enumerations",{"_index":2720,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["environments",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["er_dup_entry",{"_index":1041,"title":{},"body":{"injectables/AuthService.html":{}}}],["err",{"_index":1067,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueuesController.html":{}}}],["error",{"_index":674,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["error('failed",{"_index":2274,"title":{},"body":{"injectables/QueueService.html":{}}}],["error('invalid",{"_index":2381,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('jwt_secret",{"_index":1124,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('queue",{"_index":2383,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('unauthorized",{"_index":2626,"title":{},"body":{"controllers/UsersController.html":{}}}],["error('user",{"_index":2478,"title":{},"body":{"injectables/RolesService.html":{}}}],["error(`failed",{"_index":2273,"title":{},"body":{"injectables/QueueService.html":{}}}],["error.code",{"_index":1040,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.message",{"_index":837,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["errormessage",{"_index":2271,"title":{},"body":{"injectables/QueueService.html":{}}}],["errors",{"_index":1044,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint",{"_index":923,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["eslint/no",{"_index":927,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["estimated_wait_time",{"_index":1738,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedwaittime",{"_index":1726,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["estimation",{"_index":2179,"title":{},"body":{"injectables/QueueService.html":{}}}],["event",{"_index":2014,"title":{},"body":{"classes/QueueGateway.html":{}}}],["example",{"_index":37,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"index.html":{}}}],["exceptions",{"_index":1096,"title":{},"body":{"injectables/AuthService.html":{}}}],["execution",{"_index":2062,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["executioncontext",{"_index":2402,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1074,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["existing",{"_index":1000,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existingappointment",{"_index":734,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments",{"_index":688,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments.map",{"_index":692,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existinguser",{"_index":1538,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail",{"_index":962,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail.id",{"_index":1004,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername",{"_index":965,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyusername.id",{"_index":1007,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":838,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["exists'})@apibearerauth('jwt",{"_index":775,"title":{},"body":{"controllers/AuthController.html":{}}}],["exists'})@apibody({type",{"_index":802,"title":{},"body":{"controllers/AuthController.html":{}}}],["expectation",{"_index":1998,"title":{},"body":{"classes/QueueGateway.html":{}}}],["expects",{"_index":2317,"title":{},"body":{"injectables/QueueService.html":{}}}],["experience",{"_index":2794,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":886,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiry",{"_index":1661,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["export",{"_index":99,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":217,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1407,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1395,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["extends",{"_index":13,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":72,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["extract",{"_index":1837,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["extraction",{"_index":2268,"title":{},"body":{"injectables/QueueService.html":{}}}],["extractjwt",{"_index":1114,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1128,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["failed",{"_index":860,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MinioService.html":{},"interfaces/RequestWithUser.html":{}}}],["failing",{"_index":2258,"title":{},"body":{"injectables/QueueService.html":{}}}],["false",{"_index":266,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueSchedulerService.html":{},"entities/Role.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isenum(applicationstatus",{"_index":2494,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isstring",{"_index":1201,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@joincolumn({name",{"_index":389,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["fast",{"_index":2769,"title":{},"body":{"index.html":{}}}],["features",{"_index":2778,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":2243,"title":{},"body":{"injectables/QueueService.html":{}}}],["fetching",{"_index":1872,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["few",{"_index":2771,"title":{},"body":{"index.html":{}}}],["fields",{"_index":976,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.application",{"_index":1293,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["file.buffer",{"_index":1635,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.entity",{"_index":1317,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["file.entity.ts",{"_index":1471,"title":{},"body":{"entities/DocumentFile.html":{},"coverage.html":{}}}],["file.entity.ts:17",{"_index":1490,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:20",{"_index":1479,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:23",{"_index":1484,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:26",{"_index":1489,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:29",{"_index":1487,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:32",{"_index":1492,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:35",{"_index":1482,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:38",{"_index":1494,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:45",{"_index":1478,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.mimetype",{"_index":1638,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.mimetype.match(/\\/(jpg|jpeg|png|pdf",{"_index":1424,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["file.originalname",{"_index":1640,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size",{"_index":1636,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size.tostring",{"_index":1695,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["file_name",{"_index":1483,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_size",{"_index":1485,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_type",{"_index":1488,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filefilter",{"_index":1422,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileid",{"_index":1382,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor",{"_index":1405,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor('file",{"_index":1416,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["filename",{"_index":1472,"title":{},"body":{"entities/DocumentFile.html":{}}}],["files",{"_index":1282,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["files.push(obj",{"_index":1706,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["filesize",{"_index":1418,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["filetype",{"_index":1473,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filter",{"_index":1522,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["finalisguest",{"_index":2192,"title":{},"body":{"injectables/QueueService.html":{}}}],["finally",{"_index":2108,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["find",{"_index":2217,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":155,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(options",{"_index":1513,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findall(query",{"_index":2595,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(status",{"_index":1357,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["findallbyuser",{"_index":607,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findallbyuser(userid",{"_index":619,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findalloptions",{"_index":1497,"title":{"interfaces/FindAllOptions.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findbyappointmentnumber",{"_index":460,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyappointmentnumber(@param('number",{"_index":574,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyappointmentnumber(appointmentnumber",{"_index":482,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyemail",{"_index":2642,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":1578,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findbyids",{"_index":2482,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname",{"_index":2463,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":2470,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyqueuenumber",{"_index":1756,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbyqueuenumber(@param('queuenumber",{"_index":1887,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbyqueuenumber(queuenumber",{"_index":1787,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus",{"_index":1757,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus(@param('status",{"_index":1864,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbystatus(status",{"_index":1790,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatuswithdetails",{"_index":2120,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatuswithdetails(status",{"_index":2134,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyuseridwithdetails",{"_index":2121,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyuseridwithdetails(userid",{"_index":2136,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyusername",{"_index":2643,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":1579,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findcompleted",{"_index":1758,"title":{},"body":{"controllers/QueueController.html":{}}}],["findone",{"_index":156,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":203,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":166,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findpending",{"_index":1759,"title":{},"body":{"controllers/QueueController.html":{}}}],["findpendingwithdetails",{"_index":1760,"title":{},"body":{"controllers/QueueController.html":{}}}],["findserving",{"_index":1761,"title":{},"body":{"controllers/QueueController.html":{}}}],["findservingwithdetails",{"_index":1762,"title":{},"body":{"controllers/QueueController.html":{}}}],["finduserappointments",{"_index":461,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(@user",{"_index":553,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(user",{"_index":487,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["first",{"_index":62,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["first_name",{"_index":1921,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":23,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fixed",{"_index":2060,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["fk_appointment_user",{"_index":446,"title":{},"body":{"entities/Appointment.html":{}}}],["fk_current_queue",{"_index":1146,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":1934,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":1939,"title":{},"body":{"entities/QueueDetails.html":{}}}],["flag",{"_index":2109,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["flatten",{"_index":2355,"title":{},"body":{"controllers/QueuesController.html":{}}}],["fns",{"_index":638,"title":{},"body":{"injectables/AppointmentService.html":{},"dependencies.html":{}}}],["focus",{"_index":2777,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2807,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":768,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["foreign",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":445,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["form",{"_index":1207,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["form_data",{"_index":1295,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["format",{"_index":634,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["format(today",{"_index":724,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["formats",{"_index":2419,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["formdata",{"_index":1195,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["forwardref",{"_index":1989,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["found",{"_index":262,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apiresponse({status",{"_index":772,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":2732,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1845,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["full",{"_index":958,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["fullname",{"_index":1027,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fully",{"_index":1092,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":2672,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":1828,"title":{},"body":{"controllers/QueueController.html":{}}}],["functions",{"_index":2725,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":2773,"title":{},"body":{"index.html":{}}}],["general",{"_index":2096,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["generate",{"_index":694,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["generatealltimeslots",{"_index":608,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["generated",{"_index":1263,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["generating",{"_index":1697,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["get(':id",{"_index":167,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":1360,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id')@roles('admin",{"_index":2437,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id')@useguards(rolesguard)@roles('admin",{"_index":2597,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id/details",{"_index":1810,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/exists",{"_index":1777,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/files",{"_index":1442,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files')@apioperation({summary",{"_index":1372,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all",{"_index":1445,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all')@apioperation({summary",{"_index":1363,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/position",{"_index":1813,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('admin/all",{"_index":1458,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all')@roles('admin",{"_index":1368,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/pending",{"_index":1816,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('admin/stats",{"_index":1460,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats')@roles('admin",{"_index":1383,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('available",{"_index":491,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('by",{"_index":483,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('completed",{"_index":1793,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('counters",{"_index":1804,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('date",{"_index":501,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('files/:fileid/download",{"_index":1448,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('files/:fileid/download')@apioperation({summary",{"_index":1378,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('health",{"_index":274,"title":{},"body":{"controllers/AppController.html":{}}}],["get('mine",{"_index":552,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('mine')@apioperation({summary",{"_index":488,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('minio_use_ssl",{"_index":1675,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["get('number/:queuenumber",{"_index":1788,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending",{"_index":1796,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending/details",{"_index":1798,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('profile",{"_index":847,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["get('profile')@apioperation({summary",{"_index":2599,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('recent",{"_index":170,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["get('serving",{"_index":1800,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('serving/details",{"_index":1802,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('stats",{"_index":556,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["get('stats')@useguards(jwtauthguard",{"_index":505,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('stats')@useguards(rolesguard)@roles('admin",{"_index":2601,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('status/:status",{"_index":1791,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('user/:userid",{"_index":2336,"title":{},"body":{"controllers/QueuesController.html":{},"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":2440,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('walk",{"_index":2338,"title":{},"body":{"controllers/QueuesController.html":{}}}],["get()@apioperation({summary",{"_index":1358,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get()@roles('admin",{"_index":2435,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@useguards(rolesguard)@roles('admin",{"_index":477,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["getallapplicationfiles",{"_index":1348,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplicationfiles(id",{"_index":1362,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplications",{"_index":1349,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles",{"_index":1350,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles(id",{"_index":1371,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getappointmentsbydate",{"_index":609,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydate(date",{"_index":624,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange",{"_index":610,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange(startdate",{"_index":626,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsstats",{"_index":611,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getavailableslots",{"_index":462,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getavailableslots(@query('date",{"_index":570,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getavailableslots(date",{"_index":490,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getbydate",{"_index":463,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(@query('date",{"_index":559,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(date",{"_index":494,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange",{"_index":464,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange(startdate",{"_index":499,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getcounters",{"_index":1763,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues",{"_index":1764,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues(@body",{"_index":1873,"title":{},"body":{"controllers/QueueController.html":{}}}],["getdetailsformultiplequeues(body",{"_index":1806,"title":{},"body":{"controllers/QueueController.html":{}}}],["getdetailsformultiplequeues(queueids",{"_index":2140,"title":{},"body":{"injectables/QueueService.html":{}}}],["getdownloadurl",{"_index":1602,"title":{},"body":{"injectables/MinioService.html":{}}}],["getdownloadurl(objectname",{"_index":1608,"title":{},"body":{"injectables/MinioService.html":{}}}],["getfiledownloadurl",{"_index":1351,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfiledownloadurl(fileid",{"_index":1377,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfileinfo",{"_index":1651,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getfileinfo(objectname",{"_index":1658,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["gethello",{"_index":271,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpresignedurl",{"_index":1652,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getpresignedurl(objectname",{"_index":1660,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getprofile",{"_index":742,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":848,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":781,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["getprofile(userid",{"_index":902,"title":{},"body":{"injectables/AuthService.html":{}}}],["getqueuebyid",{"_index":2330,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(@param('id",{"_index":2378,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(id",{"_index":2333,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuedetails",{"_index":1765,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueuedetails(@param('id",{"_index":1889,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(id",{"_index":1809,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(queueid",{"_index":2142,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition",{"_index":1766,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueueposition(@param('id",{"_index":1891,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(id",{"_index":1812,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(queueid",{"_index":2144,"title":{},"body":{"injectables/QueueService.html":{}}}],["getrawmany",{"_index":1570,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["getrecentannouncements",{"_index":157,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getrecentannouncements(@query('limit",{"_index":201,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["getrecentannouncements(limit",{"_index":169,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getstats",{"_index":465,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":704,"title":{"index.html":{}},"body":{"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["gettodaypendingcount",{"_index":1767,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["getuserqueues",{"_index":2331,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(@param('userid",{"_index":2372,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(userid",{"_index":2335,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserroles",{"_index":2434,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":2446,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":2439,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getwalkinqueues",{"_index":2332,"title":{},"body":{"controllers/QueuesController.html":{}}}],["global",{"_index":2020,"title":{},"body":{"classes/QueueGateway.html":{}}}],["graph",{"_index":2799,"title":{},"body":{"index.html":{}}}],["groupby('role.name",{"_index":1569,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["grow",{"_index":2817,"title":{},"body":{"index.html":{}}}],["guard",{"_index":2448,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2449,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":816,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guards/roles.guard",{"_index":819,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guest",{"_index":2185,"title":{},"body":{"injectables/QueueService.html":{}}}],["handle",{"_index":1008,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["handleconnection",{"_index":1949,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":1962,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledailyqueuereset",{"_index":2036,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["handledisconnect",{"_index":1950,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":1967,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":1951,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":1969,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":1952,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":1972,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":1953,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":1975,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates",{"_index":1954,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates(client",{"_index":1978,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":2070,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["hands",{"_index":2793,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2782,"title":{},"body":{"index.html":{}}}],["hash",{"_index":936,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["hashed",{"_index":1581,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":974,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["haslowercase",{"_index":1105,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasnumbers",{"_index":1107,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasroleassigned",{"_index":1086,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasspecialchars",{"_index":1108,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasuppercase",{"_index":1101,"title":{},"body":{"injectables/AuthService.html":{}}}],["healthcheck",{"_index":272,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":370,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":2797,"title":{},"body":{"index.html":{}}}],["here",{"_index":1064,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["history",{"_index":1304,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.application",{"_index":1305,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.entity",{"_index":1318,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["history.entity.ts",{"_index":375,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["history.entity.ts:17",{"_index":400,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:20",{"_index":394,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:23",{"_index":404,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:26",{"_index":402,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:29",{"_index":406,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:32",{"_index":399,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:35",{"_index":397,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:43",{"_index":391,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["hit",{"_index":843,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["host",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["hour",{"_index":737,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["http://localhost:5173",{"_index":1993,"title":{},"body":{"classes/QueueGateway.html":{}}}],["httpcode",{"_index":517,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":595,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["https://nestjs.com",{"_index":2830,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":518,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["id",{"_index":36,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":2657,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":42,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["ignoreexpiration",{"_index":1129,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["iii",{"_index":75,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["iii)'})@isoptional()@isstring",{"_index":1267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ildefonso",{"_index":53,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["image",{"_index":118,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["implement",{"_index":1827,"title":{},"body":{"controllers/QueueController.html":{}}}],["implements",{"_index":1669,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":229,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["in(queueids",{"_index":2248,"title":{},"body":{"injectables/QueueService.html":{}}}],["in(roleids",{"_index":2484,"title":{},"body":{"injectables/RolesService.html":{}}}],["inactive",{"_index":1156,"title":{},"body":{"entities/Counter.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["inactiveusers",{"_index":1506,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["include",{"_index":2326,"title":{},"body":{"injectables/QueueService.html":{}}}],["including",{"_index":753,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index(['applicationid",{"_index":412,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["index(['applicationtype",{"_index":1341,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['changedat",{"_index":413,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["index(['createdat",{"_index":1343,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['documentcategory",{"_index":1496,"title":{},"body":{"entities/DocumentFile.html":{}}}],["index(['status",{"_index":1342,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['userid",{"_index":1340,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["information",{"_index":97,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["information'})@apiresponse({status",{"_index":806,"title":{},"body":{"controllers/AuthController.html":{}}}],["infrastructure",{"_index":2780,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":55,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["initial",{"_index":1212,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["inject",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["inject(forwardref",{"_index":1999,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["injectable",{"_index":231,"title":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":232,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":248,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(announcement",{"_index":249,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["injectrepository(appointment",{"_index":639,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["injectrepository(counter",{"_index":2151,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queue",{"_index":2055,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["injectrepository(queuedetails",{"_index":2150,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(role",{"_index":2474,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":918,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["input",{"_index":762,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["install",{"_index":2772,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":2742,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":836,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["insufficient",{"_index":769,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":2800,"title":{},"body":{"index.html":{}}}],["interface",{"_index":823,"title":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":1111,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":1829,"title":{},"body":{"controllers/QueueController.html":{}}}],["internalservererrorexception('failed",{"_index":1912,"title":{},"body":{"controllers/QueueController.html":{}}}],["intervals",{"_index":699,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["invalid",{"_index":590,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["inversejoincolumn",{"_index":2534,"title":{},"body":{"entities/User.html":{}}}],["is_active",{"_index":2523,"title":{},"body":{"entities/User.html":{}}}],["is_guest",{"_index":1924,"title":{},"body":{"entities/QueueDetails.html":{}}}],["isactive",{"_index":119,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["isarray",{"_index":92,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isauthorized",{"_index":1055,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":1170,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{}}}],["isboolean()@isoptional",{"_index":1236,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isdatestring",{"_index":1188,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isemail",{"_index":88,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":1187,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isenum(applicationstatus",{"_index":2498,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["isenum(applicationtype",{"_index":1219,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isenum(appointmentstatus",{"_index":1189,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isenum(queuestatus",{"_index":2503,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":2501,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["isguest",{"_index":420,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["isnan(number(payload.sub",{"_index":1133,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnan(queueid",{"_index":2380,"title":{},"body":{"controllers/QueuesController.html":{}}}],["isnan(userid",{"_index":997,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnan(useridnumber",{"_index":2320,"title":{},"body":{"injectables/QueueService.html":{}}}],["isnotempty",{"_index":1169,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isdatestring",{"_index":1175,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnotempty()@isstring",{"_index":1173,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnumber",{"_index":91,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isobject",{"_index":1215,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isoptional",{"_index":89,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isoptional()@isboolean",{"_index":1166,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["isoptional()@isenum(appointmentstatus",{"_index":1184,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isoptional()@isstring",{"_index":1161,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{}}}],["ispasswordvalid",{"_index":939,"title":{},"body":{"injectables/AuthService.html":{}}}],["isprivileged",{"_index":1443,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["isresetinprogress",{"_index":2035,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["isstring",{"_index":90,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isstring()@isnotempty",{"_index":1163,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{}}}],["isstring()@isoptional",{"_index":1232,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalid",{"_index":637,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{}}}],["isvalid(date",{"_index":643,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalid(parseddate",{"_index":686,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalidemail",{"_index":890,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":904,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":2293,"title":{},"body":{"injectables/QueueService.html":{}}}],["items",{"_index":828,"title":{},"body":{"controllers/AuthController.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{}}}],["job",{"_index":2810,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2812,"title":{},"body":{"index.html":{}}}],["john",{"_index":103,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":2389,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":64,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john.doe@example.com",{"_index":1253,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["john_doe",{"_index":101,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":2398,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":85,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["johndoe",{"_index":1275,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["join",{"_index":2823,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":408,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["joined",{"_index":2012,"title":{},"body":{"classes/QueueGateway.html":{}}}],["jointable",{"_index":2538,"title":{},"body":{"entities/User.html":{}}}],["jpeg",{"_index":1425,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["jr",{"_index":74,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["jr.'})@isstring()@isoptional",{"_index":76,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["json",{"_index":1296,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["juan",{"_index":1220,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["jwt",{"_index":880,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":820,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["jwtauthguard",{"_index":522,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1127,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":873,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":881,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":1117,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":895,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":871,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2827,"title":{},"body":{"index.html":{}}}],["keep",{"_index":2541,"title":{},"body":{"entities/User.html":{}}}],["keeps",{"_index":2170,"title":{},"body":{"injectables/QueueService.html":{}}}],["key",{"_index":352,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["last",{"_index":66,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["last_modified_by",{"_index":1300,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["last_name",{"_index":1926,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastmodifiedby",{"_index":1283,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["lastname",{"_index":24,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["lastname}${nameextension",{"_index":959,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["latest",{"_index":1373,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["learn",{"_index":2785,"title":{},"body":{"index.html":{}}}],["leftjoin('user.roles",{"_index":1566,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.defaultrole",{"_index":1519,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.roles",{"_index":1520,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["legacy",{"_index":2342,"title":{},"body":{"controllers/QueuesController.html":{}}}],["legend",{"_index":213,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":127,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{}}}],["lessthan",{"_index":2149,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthan(queue.createdat",{"_index":2237,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal",{"_index":2148,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(new",{"_index":2304,"title":{},"body":{"injectables/QueueService.html":{}}}],["let's",{"_index":2322,"title":{},"body":{"injectables/QueueService.html":{}}}],["letter",{"_index":1104,"title":{},"body":{"injectables/AuthService.html":{}}}],["license",{"_index":1323,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["licensed",{"_index":2815,"title":{},"body":{"index.html":{}}}],["limit",{"_index":173,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limits",{"_index":1417,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["line",{"_index":925,"title":{},"body":{"injectables/AuthService.html":{}}}],["linkedin",{"_index":2809,"title":{},"body":{"index.html":{}}}],["listfiles",{"_index":1653,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["listfiles(prefix",{"_index":1663,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["literal",{"_index":912,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{}}}],["localhost",{"_index":1619,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["log",{"_index":1434,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["logdailystatistics",{"_index":2037,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logdailystatistics(startofday",{"_index":2047,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logger",{"_index":332,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{}}}],["logger(appointmentcontroller.name",{"_index":541,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["logger(minioservice.name",{"_index":1612,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["logger(queuegateway.name",{"_index":1959,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queueschedulerservice.name",{"_index":2052,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logging",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":743,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["login'})@apiresponse({status",{"_index":791,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":832,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":789,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":790,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":920,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":938,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto})@post('login",{"_index":796,"title":{},"body":{"controllers/AuthController.html":{}}}],["looking",{"_index":2760,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":2252,"title":{},"body":{"injectables/QueueService.html":{}}}],["loop",{"_index":2806,"title":{},"body":{"index.html":{}}}],["loss",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["lowercase",{"_index":1106,"title":{},"body":{"injectables/AuthService.html":{}}}],["main",{"_index":50,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maintain",{"_index":986,"title":{},"body":{"injectables/AuthService.html":{}}}],["makes",{"_index":2767,"title":{},"body":{"index.html":{}}}],["managing",{"_index":2779,"title":{},"body":{"index.html":{}}}],["manila",{"_index":1227,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["manual",{"_index":1855,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["manual/guest",{"_index":1852,"title":{},"body":{"controllers/QueueController.html":{}}}],["manualdailyreset",{"_index":1768,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["manualdailyreset(@user",{"_index":1901,"title":{},"body":{"controllers/QueueController.html":{}}}],["manualdailyreset(user",{"_index":1819,"title":{},"body":{"controllers/QueueController.html":{}}}],["many",{"_index":2234,"title":{},"body":{"injectables/QueueService.html":{}}}],["manytomany",{"_index":2430,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":2427,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":2532,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":407,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":384,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["mark",{"_index":2084,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["marriage",{"_index":1321,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_certificate",{"_index":1320,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_license",{"_index":1322,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["match",{"_index":1997,"title":{},"body":{"classes/QueueGateway.html":{}}}],["matching",{"_index":111,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(total",{"_index":1533,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["math.floor",{"_index":2311,"title":{},"body":{"injectables/QueueService.html":{}}}],["mau",{"_index":2763,"title":{},"body":{"index.html":{}}}],["message",{"_index":1098,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1692,"title":{},"body":{"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["method",{"_index":1535,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":153,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middle",{"_index":69,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["middle_initial",{"_index":1928,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":2526,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":421,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["middlename",{"_index":25,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["migrationsrun",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["miguel",{"_index":1259,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["min",{"_index":78,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["min(1",{"_index":2558,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["minimum",{"_index":1269,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["minio",{"_index":1616,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["minio.client",{"_index":1614,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minio_access_key",{"_index":1678,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_bucket_name",{"_index":1680,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_endpoint",{"_index":1671,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_object_name",{"_index":1491,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minio_secret_key",{"_index":1679,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minioadmin",{"_index":1626,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioadmin123",{"_index":1628,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioclient",{"_index":1600,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioobjectname",{"_index":1474,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minioservice",{"_index":1465,"title":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}},"body":{"modules/DocumentApplicationsModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"coverage.html":{},"overview.html":{}}}],["minlength",{"_index":82,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(6",{"_index":1278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":102,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minute",{"_index":738,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["minutes",{"_index":2180,"title":{},"body":{"injectables/QueueService.html":{}}}],["miscellaneous",{"_index":2719,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2814,"title":{},"body":{"index.html":{}}}],["mm",{"_index":726,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["mode",{"_index":2744,"title":{},"body":{"index.html":{}}}],["module",{"_index":209,"title":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["modules",{"_index":211,"title":{"modules.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/announcement/announcement.module",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appointment/appointment.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/document",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/queue/queue.module",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":2283,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["multer",{"_index":2704,"title":{},"body":{"dependencies.html":{}}}],["multiple",{"_index":2256,"title":{},"body":{"injectables/QueueService.html":{}}}],["mysql",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":2706,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":2828,"title":{},"body":{"index.html":{}}}],["name",{"_index":63,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["name'})@isstring()@isnotempty",{"_index":1256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["name_extension",{"_index":2529,"title":{},"body":{"entities/User.html":{}}}],["namecomponents",{"_index":1017,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.firstname",{"_index":1028,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.lastname",{"_index":1030,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.middlename",{"_index":1029,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.nameextension",{"_index":1031,"title":{},"body":{"injectables/AuthService.html":{}}}],["nameextension",{"_index":26,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["namespace",{"_index":1996,"title":{},"body":{"classes/QueueGateway.html":{}}}],["need",{"_index":1404,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["nest",{"_index":2737,"title":{},"body":{"index.html":{}}}],["nested",{"_index":2353,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nestframework",{"_index":2832,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1120,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["nestjs/common",{"_index":188,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2409,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":874,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2488,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["nestjs/passport",{"_index":876,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1406,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":95,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":226,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1987,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":260,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["new_status",{"_index":401,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["newdate",{"_index":664,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["newfirstname",{"_index":1549,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname",{"_index":1551,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname}${newnameextension",{"_index":1554,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newmiddlename",{"_index":1550,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newnameextension",{"_index":1552,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newstatus",{"_index":380,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["newtime",{"_index":666,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["next",{"_index":924,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["nextcalled",{"_index":2299,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue",{"_index":2280,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.counternumber",{"_index":2286,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.id",{"_index":2289,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.status",{"_index":2285,"title":{},"body":{"injectables/QueueService.html":{}}}],["node.js",{"_index":2731,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":247,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`announcement",{"_index":261,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["notfoundexception(`appointment",{"_index":659,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["notfoundexception(`counter",{"_index":2276,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`details",{"_index":2214,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`queue",{"_index":2211,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`role",{"_index":2477,"title":{},"body":{"injectables/RolesService.html":{}}}],["notfoundexception(`user",{"_index":1534,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notification",{"_index":2097,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["notify",{"_index":2090,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["notifycounterupdate",{"_index":1955,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":1981,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":1956,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":1983,"title":{},"body":{"classes/QueueGateway.html":{}}}],["npm",{"_index":2741,"title":{},"body":{"index.html":{}}}],["null",{"_index":850,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["null/undefined",{"_index":2359,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nullable",{"_index":135,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":31,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["number'})@isoptional()@isstring",{"_index":1247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["number(createqueuedto.userid",{"_index":2186,"title":{},"body":{"injectables/QueueService.html":{}}}],["number(payload.sub",{"_index":1134,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["number(req.user.id",{"_index":859,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["number(targetuserid",{"_index":866,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["number/:number",{"_index":484,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["obj",{"_index":1705,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["object",{"_index":827,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["object.assign(announcement",{"_index":264,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["object.assign(appointment",{"_index":670,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["object.values(appointmentstatus).includes(status",{"_index":589,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object.values(appointmentstatus).join",{"_index":592,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object.values(queuestatus",{"_index":1882,"title":{},"body":{"controllers/QueueController.html":{}}}],["object.values(queuestatus).includes(body.status",{"_index":1878,"title":{},"body":{"controllers/QueueController.html":{}}}],["objectname",{"_index":1607,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["occurred",{"_index":1097,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["of(id",{"_index":1559,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":2811,"title":{},"body":{"index.html":{}}}],["official",{"_index":2764,"title":{},"body":{"index.html":{}}}],["ok",{"_index":280,"title":{},"body":{"controllers/AppController.html":{}}}],["old_status",{"_index":403,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["oldstatus",{"_index":381,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["omit",{"_index":1511,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["on'].includes(usesslvalue",{"_index":1677,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ondelete",{"_index":387,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["one",{"_index":591,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["ones",{"_index":1556,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":1316,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":1292,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetoone",{"_index":1153,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":1143,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":1946,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":1947,"title":{},"body":{"classes/QueueGateway.html":{}}}],["only)'})@apiresponse({status",{"_index":1366,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["onmoduleinit",{"_index":1654,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["open",{"_index":2816,"title":{},"body":{"index.html":{}}}],["operator",{"_index":2479,"title":{},"body":{"injectables/RolesService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["optional)'})@isoptional()@isstring",{"_index":1260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["options",{"_index":1514,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["order",{"_index":256,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["organize",{"_index":2250,"title":{},"body":{"injectables/QueueService.html":{}}}],["origin",{"_index":1991,"title":{},"body":{"classes/QueueGateway.html":{}}}],["original",{"_index":1639,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["out",{"_index":223,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outer",{"_index":1070,"title":{},"body":{"injectables/AuthService.html":{}}}],["override",{"_index":1857,"title":{},"body":{"controllers/QueueController.html":{}}}],["overview",{"_index":2836,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":578,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["package",{"_index":2690,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1499,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pages",{"_index":1717,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["paginatedusersresponsedto",{"_index":1710,"title":{"classes/PaginatedUsersResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["param",{"_index":184,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["param('fileid",{"_index":1449,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["param('id",{"_index":205,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":864,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["parameter",{"_index":561,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["parameters",{"_index":163,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":683,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseddate",{"_index":684,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseduserid",{"_index":2190,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseint(id",{"_index":2379,"title":{},"body":{"controllers/QueuesController.html":{}}}],["parseint(process.env.db_port",{"_index":2847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.minio_port",{"_index":1620,"title":{},"body":{"injectables/MinioService.html":{}}}],["parseint(stat.count",{"_index":1573,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["parseint(userid",{"_index":2319,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseintpipe",{"_index":186,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["parseiso",{"_index":636,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(createappointmentdto.appointmentdate",{"_index":642,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(date",{"_index":685,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["part",{"_index":2803,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":2487,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["partialtype(createannouncementdto",{"_index":2486,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{}}}],["partialtype(createappointmentdto",{"_index":2491,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["parts",{"_index":1014,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":1116,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":875,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":878,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1113,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1121,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":27,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":1099,"title":{},"body":{"injectables/AuthService.html":{}}}],["password123",{"_index":81,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["password123'})@isstring()@isnotempty",{"_index":1596,"title":{},"body":{"classes/LoginDto.html":{}}}],["passwords",{"_index":1528,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["passwordvalidation",{"_index":968,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordvalidation.isvalid",{"_index":970,"title":{},"body":{"injectables/AuthService.html":{}}}],["past",{"_index":653,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["patch",{"_index":183,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":180,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":510,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["patch(':id')@useguards(rolesguard)@roles('admin",{"_index":2605,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/status",{"_index":587,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/status')@roles('admin",{"_index":1392,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["patch(':id/status')@useguards(jwtauthguard",{"_index":513,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["patch(':id/status')@useguards(rolesguard)@roles('admin",{"_index":2608,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":2344,"title":{},"body":{"controllers/QueuesController.html":{}}}],["payload",{"_index":947,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.roles.map((role",{"_index":1137,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1132,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pdf",{"_index":1427,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["pending",{"_index":450,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["pendingaheadcount",{"_index":2236,"title":{},"body":{"injectables/QueueService.html":{}}}],["pendingcount",{"_index":713,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["pendingqueues",{"_index":2079,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.length",{"_index":2082,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.map(queue",{"_index":2087,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueueswithdetails",{"_index":2348,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pendingqueueswithdetails.length",{"_index":2350,"title":{},"body":{"controllers/QueuesController.html":{}}}],["per",{"_index":1374,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"classes/UserQueryDto.html":{}}}],["perform",{"_index":1061,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{}}}],["performance",{"_index":2245,"title":{},"body":{"injectables/QueueService.html":{}}}],["permission",{"_index":584,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["permissions",{"_index":862,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["permissions'})@apiresponse({status",{"_index":770,"title":{},"body":{"controllers/AuthController.html":{}}}],["permit",{"_index":1328,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["person",{"_index":2181,"title":{},"body":{"injectables/QueueService.html":{}}}],["phone_number",{"_index":1930,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":422,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["pickup",{"_index":1335,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["platform",{"_index":2762,"title":{},"body":{"index.html":{}}}],["please",{"_index":2788,"title":{},"body":{"index.html":{}}}],["pm",{"_index":697,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["png",{"_index":1426,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["port",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":2008,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["possible",{"_index":2758,"title":{},"body":{"index.html":{}}}],["post",{"_index":161,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["post(':id/files",{"_index":1415,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post(':id/files')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1397,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post('admin",{"_index":2590,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('admin/daily",{"_index":1820,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('admin/update",{"_index":863,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('bulk",{"_index":1807,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter",{"_index":1770,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter/:counterid/call",{"_index":1773,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('login",{"_index":831,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('manual",{"_index":1850,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('manual')@useguards(jwtauthguard",{"_index":1784,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('register",{"_index":839,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('update",{"_index":857,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post()@apioperation({summary",{"_index":470,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["post()@useguards(jwtauthguard",{"_index":1781,"title":{},"body":{"controllers/QueueController.html":{}}}],["potential",{"_index":2358,"title":{},"body":{"controllers/QueuesController.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["presigned",{"_index":1698,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["prevent",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{}}}],["primarycolumn",{"_index":1315,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarycolumn({length",{"_index":1298,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarygeneratedcolumn",{"_index":132,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":250,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["privileged",{"_index":1364,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["process",{"_index":2068,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["process.env.db_host",{"_index":2846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":2852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":2849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.minio_access_key",{"_index":1625,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_bucket_name",{"_index":1630,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_endpoint",{"_index":1618,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_secret_key",{"_index":1627,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_use_ssl",{"_index":1623,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.node_env",{"_index":2854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.ws_cors_origin",{"_index":1992,"title":{},"body":{"classes/QueueGateway.html":{}}}],["processing",{"_index":1329,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["production",{"_index":347,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":783,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["profile'})@apiresponse({status",{"_index":782,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["progress",{"_index":2065,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["progressive",{"_index":2730,"title":{},"body":{"index.html":{}}}],["project",{"_index":2739,"title":{},"body":{"index.html":{}}}],["promise",{"_index":241,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":1700,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["promise.all",{"_index":718,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["propagate",{"_index":2107,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["proper",{"_index":1049,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueSchedulerService.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"properties.html":{}}}],["provided",{"_index":1010,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["provided)'})@isoptional()@isstring",{"_index":1276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["provided)'})@isstring()@isoptional",{"_index":1264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["providedisguest",{"_index":2191,"title":{},"body":{"injectables/QueueService.html":{}}}],["provideduserid",{"_index":2189,"title":{},"body":{"injectables/QueueService.html":{}}}],["providers",{"_index":216,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["query",{"_index":187,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["query('end",{"_index":566,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('set",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["query('start",{"_index":565,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('status",{"_index":1437,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["query.dto",{"_index":2615,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto.ts",{"_index":2548,"title":{},"body":{"classes/UserQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":2551,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:26",{"_index":2550,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:34",{"_index":2556,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:42",{"_index":2553,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["querybuilder",{"_index":1516,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere('roles.name",{"_index":1524,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.getmanyandcount",{"_index":1527,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.orderby('user.createdat",{"_index":1525,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.where",{"_index":1523,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["questions",{"_index":2786,"title":{},"body":{"index.html":{}}}],["queue",{"_index":1142,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":2221,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.completedat.gettime",{"_index":2309,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.controller",{"_index":2028,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":1144,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":2223,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.createdat",{"_index":2363,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.createdat.gettime",{"_index":2310,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.details",{"_index":1932,"title":{},"body":{"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["queue.details[0",{"_index":2361,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.dto",{"_index":1832,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queue.dto.ts",{"_index":1230,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:11",{"_index":2500,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:13",{"_index":1238,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:17",{"_index":1239,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:21",{"_index":1233,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:25",{"_index":1240,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:29",{"_index":1241,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":1234,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:37",{"_index":1237,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:5",{"_index":1242,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":2502,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:9",{"_index":1235,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.entity",{"_index":1942,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.estimatedwaittime",{"_index":2364,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.gateway",{"_index":2030,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queue.id",{"_index":2262,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.queuenumber",{"_index":2362,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.service",{"_index":1831,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{}}}],["queue.status",{"_index":2220,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue/${id}/status",{"_index":1877,"title":{},"body":{"controllers/QueueController.html":{}}}],["queue/entities/queue.entity",{"_index":1154,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":1933,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":1741,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":1750,"title":{"controllers/QueueController.html":{}},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":1854,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":1735,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queuedetails.queue",{"_index":2203,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuedetailsrepository",{"_index":2122,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuegateway",{"_index":1944,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":1917,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queueids",{"_index":1874,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queueids.length",{"_index":2241,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuemodule",{"_index":288,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenumber",{"_index":1727,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queuerepository",{"_index":2040,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queues",{"_index":1853,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queues.controller",{"_index":2029,"title":{},"body":{"modules/QueueModule.html":{}}}],["queues.length",{"_index":2260,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues.map((queue",{"_index":2261,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues/user",{"_index":2373,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queues/walk",{"_index":2346,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queueschedulerservice",{"_index":1834,"title":{"injectables/QueueSchedulerService.html":{}},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"coverage.html":{},"overview.html":{}}}],["queuescontroller",{"_index":2027,"title":{"controllers/QueuesController.html":{}},"body":{"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queueservice",{"_index":1830,"title":{"injectables/QueueService.html":{}},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":1743,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":2088,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.completed",{"_index":2111,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.pending",{"_index":1749,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.serving",{"_index":2100,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["range",{"_index":564,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["range')@useguards(jwtauthguard",{"_index":502,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["rate",{"_index":2114,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["re",{"_index":1042,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":2824,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":196,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":1334,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["ready_for_pickup",{"_index":1333,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["real",{"_index":2801,"title":{},"body":{"index.html":{}}}],["reason",{"_index":2094,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["reason_of_visit",{"_index":1937,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":423,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["received",{"_index":834,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["recent",{"_index":1574,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recently",{"_index":2580,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["recentusers",{"_index":1510,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["recentusers.map((user",{"_index":1577,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":1206,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["referencedcolumnname",{"_index":2544,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":2710,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2408,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["register",{"_index":744,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":840,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["register(registerdto",{"_index":798,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":799,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registerdto})@post('register",{"_index":803,"title":{},"body":{"controllers/AuthController.html":{}}}],["registration",{"_index":801,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["registration'})@apiresponse({status",{"_index":800,"title":{},"body":{"controllers/AuthController.html":{}}}],["reject",{"_index":1701,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["rejected",{"_index":1331,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["relation",{"_index":2202,"title":{},"body":{"injectables/QueueService.html":{}}}],["relation(user",{"_index":1558,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":414,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"injectables/AuthService.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":158,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":207,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["remove(id",{"_index":175,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(user.roles",{"_index":1560,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["replaces",{"_index":2480,"title":{},"body":{"injectables/RolesService.html":{}}}],["repository",{"_index":237,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":780,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":853,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":854,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["request",{"_index":761,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":2405,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["request.user?.roles",{"_index":2418,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requestwithuser",{"_index":747,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["required",{"_index":562,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["requiredroles",{"_index":2413,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":2421,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requires",{"_index":1337,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requires_additional_info",{"_index":1336,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requiring",{"_index":2770,"title":{},"body":{"index.html":{}}}],["reset",{"_index":222,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["reset')@useguards(jwtauthguard",{"_index":1821,"title":{},"body":{"controllers/QueueController.html":{}}}],["resolve(files",{"_index":1709,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["resources",{"_index":2781,"title":{},"body":{"index.html":{}}}],["respect",{"_index":1844,"title":{},"body":{"controllers/QueueController.html":{}}}],["response",{"_index":954,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["response.dto",{"_index":1722,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["response.dto.ts",{"_index":1712,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":2565,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1716,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:20",{"_index":2575,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:21",{"_index":1715,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:23",{"_index":2582,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:26",{"_index":2566,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:27",{"_index":1713,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2578,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:32",{"_index":2570,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:33",{"_index":1718,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:35",{"_index":2579,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:38",{"_index":2569,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:41",{"_index":2584,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:44",{"_index":2571,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:47",{"_index":2581,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:50",{"_index":2572,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:56",{"_index":2559,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:62",{"_index":2568,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:68",{"_index":2562,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:74",{"_index":2574,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:8",{"_index":2567,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:81",{"_index":2573,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:87",{"_index":2563,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1721,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:93",{"_index":2564,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["result",{"_index":676,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["result.affected",{"_index":678,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["result.details",{"_index":1862,"title":{},"body":{"controllers/QueueController.html":{}}}],["result.length",{"_index":2267,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["result.queue",{"_index":1861,"title":{},"body":{"controllers/QueueController.html":{}}}],["results",{"_index":110,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1036,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieved",{"_index":784,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["retrieving",{"_index":1094,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":198,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":164,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["robert",{"_index":104,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["robert'})@isstring()@isoptional",{"_index":70,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["role",{"_index":35,"title":{"entities/Role.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["role'})@isoptional()@isstring",{"_index":2552,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["role.id",{"_index":1088,"title":{},"body":{"injectables/AuthService.html":{}}}],["role.name",{"_index":946,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["role_id",{"_index":2545,"title":{},"body":{"entities/User.html":{}}}],["roleid",{"_index":1075,"title":{},"body":{"injectables/AuthService.html":{}}}],["roleids",{"_index":19,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roleids.length",{"_index":1561,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolename",{"_index":1508,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["rolenames",{"_index":944,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["rolenames.includes(role",{"_index":2422,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["roles",{"_index":527,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":549,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["roles.controller",{"_index":2459,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":945,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":2442,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":2539,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":302,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["roles/roles.service",{"_index":917,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roles_key",{"_index":2410,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":2432,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":525,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesguard)@roles('admin",{"_index":496,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["rolesmodule",{"_index":289,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":2466,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":896,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["rolestats",{"_index":1565,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolestats.map((stat",{"_index":1571,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rollback",{"_index":985,"title":{},"body":{"injectables/AuthService.html":{}}}],["rolled",{"_index":990,"title":{},"body":{"injectables/AuthService.html":{}}}],["room",{"_index":2292,"title":{},"body":{"injectables/QueueService.html":{}}}],["rooms",{"_index":2017,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":2850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":2056,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"index.html":{}}}],["runs",{"_index":2756,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2712,"title":{},"body":{"dependencies.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s",{"_index":994,"title":{},"body":{"injectables/AuthService.html":{}}}],["salt",{"_index":972,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["san",{"_index":52,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["sanitizedrecentusers",{"_index":1576,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["sanitizedusers",{"_index":1529,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["save",{"_index":2175,"title":{},"body":{"injectables/QueueService.html":{}}}],["saved",{"_index":2206,"title":{},"body":{"injectables/QueueService.html":{}}}],["saveddetails",{"_index":2204,"title":{},"body":{"injectables/QueueService.html":{}}}],["saveddetails.isguest",{"_index":2207,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue",{"_index":2182,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue.id",{"_index":2194,"title":{},"body":{"injectables/QueueService.html":{}}}],["scalable",{"_index":2735,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["schedulemodule.forroot",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["scheduler.service",{"_index":1835,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{}}}],["scheduler.service.ts",{"_index":2034,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["scheduler.service.ts:10",{"_index":2053,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:11",{"_index":2039,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:113",{"_index":2049,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:146",{"_index":2051,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:152",{"_index":2041,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:24",{"_index":2046,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["schema",{"_index":793,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["search",{"_index":1500,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["searching",{"_index":2076,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["secret",{"_index":883,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":1122,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["secretorkey",{"_index":1130,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["seeddatabaseifneeded",{"_index":2673,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":2727,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":690,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["select('role.name",{"_index":1567,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["send",{"_index":2015,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{}}}],["sequence",{"_index":2153,"title":{},"body":{"injectables/QueueService.html":{}}}],["served",{"_index":2230,"title":{},"body":{"injectables/QueueService.html":{}}}],["server",{"_index":1948,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["service",{"_index":2187,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["services/minio.service",{"_index":1469,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["serving",{"_index":1747,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["servingcount",{"_index":2232,"title":{},"body":{"injectables/QueueService.html":{}}}],["servingqueues",{"_index":2099,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.length",{"_index":2101,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.map(queue",{"_index":2103,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueueswithdetails",{"_index":2349,"title":{},"body":{"controllers/QueuesController.html":{}}}],["servingqueueswithdetails.length",{"_index":2351,"title":{},"body":{"controllers/QueuesController.html":{}}}],["set",{"_index":356,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["setmetadata(roles_key",{"_index":2855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2740,"title":{},"body":{"index.html":{}}}],["shouldupdatename",{"_index":1016,"title":{},"body":{"injectables/AuthService.html":{}}}],["side",{"_index":2736,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":885,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":2178,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["simplify",{"_index":2184,"title":{},"body":{"injectables/QueueService.html":{}}}],["single",{"_index":2244,"title":{},"body":{"injectables/QueueService.html":{}}}],["size",{"_index":1694,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["skip",{"_index":1515,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["skipping",{"_index":2066,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["slot",{"_index":731,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["slots",{"_index":492,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["smart",{"_index":1632,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["socket",{"_index":1963,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":1988,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["soft",{"_index":267,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":1109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["specific",{"_index":1043,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["specified",{"_index":687,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["sponsors",{"_index":2819,"title":{},"body":{"index.html":{}}}],["sql",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["sr",{"_index":1266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../appointment.entity.ts",{"_index":2722,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../counter.entity.ts",{"_index":2723,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":2842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../document",{"_index":2721,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2726,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":2724,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":2844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":270,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":275,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":273,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":368,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":369,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":740,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:102",{"_index":804,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:112",{"_index":788,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:134",{"_index":810,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:183",{"_index":779,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:63",{"_index":797,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":872,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":889,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:104",{"_index":907,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":897,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:206",{"_index":905,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:211",{"_index":903,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:239",{"_index":909,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":914,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:383",{"_index":900,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":906,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:538",{"_index":911,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":2663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":2400,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1591,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:15",{"_index":1594,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:23",{"_index":1597,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":2384,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:22",{"_index":2388,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:30",{"_index":2399,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:40",{"_index":2397,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:48",{"_index":2390,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:56",{"_index":2393,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:64",{"_index":2392,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:72",{"_index":2394,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:80",{"_index":2395,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:87",{"_index":2386,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/update",{"_index":6,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":1584,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":2406,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:13",{"_index":2451,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:16",{"_index":2452,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1112,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":1589,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:35",{"_index":1590,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":2670,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":2671,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/announcement/announcement.controller.ts",{"_index":150,"title":{},"body":{"controllers/AnnouncementController.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.controller.ts:21",{"_index":162,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:26",{"_index":165,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:31",{"_index":171,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:36",{"_index":168,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:41",{"_index":181,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:49",{"_index":177,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.module.ts",{"_index":224,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["src/modules/announcement/announcement.service.ts",{"_index":233,"title":{},"body":{"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.service.ts:15",{"_index":240,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:24",{"_index":242,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:31",{"_index":243,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:43",{"_index":246,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:53",{"_index":245,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:59",{"_index":244,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:9",{"_index":238,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/dto/create",{"_index":1159,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/dto/update",{"_index":2485,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts",{"_index":115,"title":{},"body":{"entities/Announcement.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:12",{"_index":133,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:15",{"_index":141,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:18",{"_index":131,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:21",{"_index":137,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:24",{"_index":139,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:27",{"_index":129,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:30",{"_index":124,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:33",{"_index":143,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/appointment/appointment.controller.ts",{"_index":458,"title":{},"body":{"controllers/AppointmentController.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.controller.ts:110",{"_index":493,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:119",{"_index":486,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:125",{"_index":485,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:132",{"_index":511,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:157",{"_index":514,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:176",{"_index":508,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:44",{"_index":475,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:59",{"_index":481,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:66",{"_index":489,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:74",{"_index":506,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:82",{"_index":498,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:93",{"_index":503,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.module.ts",{"_index":602,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["src/modules/appointment/appointment.service.ts",{"_index":605,"title":{},"body":{"injectables/AppointmentService.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.service.ts:100",{"_index":621,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:114",{"_index":631,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:14",{"_index":613,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:149",{"_index":630,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:162",{"_index":632,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:177",{"_index":629,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:20",{"_index":617,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:209",{"_index":625,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:230",{"_index":627,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:253",{"_index":628,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:305",{"_index":616,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:330",{"_index":623,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:69",{"_index":618,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:78",{"_index":620,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:88",{"_index":622,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/dto/create",{"_index":1171,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/dto/update",{"_index":2490,"title":{},"body":{"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts",{"_index":416,"title":{},"body":{"entities/Appointment.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:22",{"_index":432,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:25",{"_index":428,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:28",{"_index":431,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:31",{"_index":435,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:34",{"_index":437,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:37",{"_index":425,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:40",{"_index":438,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:43",{"_index":439,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:46",{"_index":426,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:49",{"_index":429,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:56",{"_index":442,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:59",{"_index":448,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:66",{"_index":447,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:69",{"_index":434,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:72",{"_index":430,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:75",{"_index":443,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":1139,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":1149,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":1150,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":1152,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":1148,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":1147,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/document",{"_index":373,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/MinioService-1.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/dto/create",{"_index":1229,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":2499,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":1915,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":1723,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":1740,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":1742,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":1744,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":1733,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":1734,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":1729,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":1739,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":1737,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":1731,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue",{"_index":2033,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":1751,"title":{},"body":{"controllers/QueueController.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts:101",{"_index":1792,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:106",{"_index":1797,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:111",{"_index":1801,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:116",{"_index":1794,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:122",{"_index":1799,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:128",{"_index":1803,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:134",{"_index":1808,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:139",{"_index":1825,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:168",{"_index":1815,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:173",{"_index":1795,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:178",{"_index":1789,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:183",{"_index":1811,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:188",{"_index":1814,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:193",{"_index":1824,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:198",{"_index":1774,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:203",{"_index":1771,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:208",{"_index":1805,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:213",{"_index":1778,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:225",{"_index":1822,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:249",{"_index":1818,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:32",{"_index":1782,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:63",{"_index":1785,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:96",{"_index":1786,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":1945,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:23",{"_index":1960,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:26",{"_index":1958,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:34",{"_index":1964,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:39",{"_index":1968,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:44",{"_index":1977,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:51",{"_index":1971,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:57",{"_index":1974,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:63",{"_index":1980,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:70",{"_index":1984,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:75",{"_index":1982,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":2026,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":2118,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.service.ts:123",{"_index":2131,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:129",{"_index":2133,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:136",{"_index":2138,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:148",{"_index":2132,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:160",{"_index":2143,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:176",{"_index":2147,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:21",{"_index":2124,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:218",{"_index":2145,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:269",{"_index":2141,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:304",{"_index":2135,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:33",{"_index":2130,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:358",{"_index":2127,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:428",{"_index":2146,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:475",{"_index":2126,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:481",{"_index":2139,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:488",{"_index":2129,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:495",{"_index":2137,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queues.controller.ts",{"_index":2329,"title":{},"body":{"controllers/QueuesController.html":{},"coverage.html":{}}}],["src/modules/queue/queues.controller.ts:109",{"_index":2334,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:19",{"_index":2339,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:74",{"_index":2337,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":2423,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":2426,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":2424,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":2429,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":2425,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":2433,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":2436,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":2438,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":2441,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":2457,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":2461,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":2469,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":2472,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":2471,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":2473,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":2468,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":2465,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/services/minio.service.ts",{"_index":1598,"title":{},"body":{"injectables/MinioService.html":{},"coverage.html":{}}}],["src/services/minio.service.ts:22",{"_index":1611,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:46",{"_index":1609,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:59",{"_index":1606,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:6",{"_index":1613,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:7",{"_index":1615,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:8",{"_index":1604,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/users/dto/create",{"_index":1244,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/paginated",{"_index":1711,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":2509,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":2547,"title":{},"body":{"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":2513,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":2522,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":2520,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:23",{"_index":2537,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:26",{"_index":2531,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":2521,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":2527,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":2525,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:38",{"_index":2528,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:41",{"_index":2530,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":2515,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":2524,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":2516,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":2536,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:57",{"_index":2518,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:60",{"_index":2519,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:74",{"_index":2535,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":2587,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:106",{"_index":2606,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:121",{"_index":2604,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:135",{"_index":2609,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:153",{"_index":2594,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:46",{"_index":2596,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":2600,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":2602,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:80",{"_index":2598,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2640,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1498,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:108",{"_index":2646,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:210",{"_index":2653,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:220",{"_index":2654,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:230",{"_index":2652,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:273",{"_index":2649,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:280",{"_index":2650,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:287",{"_index":2647,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":2644,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":2648,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:87",{"_index":2651,"title":{},"body":{"injectables/UsersService.html":{}}}],["st",{"_index":51,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["staff",{"_index":478,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{}}}],["staff'].includes(role.name",{"_index":1439,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["start",{"_index":567,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["start:dev",{"_index":2745,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2746,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":504,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["started",{"_index":2729,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2738,"title":{},"body":{"index.html":{}}}],["starting",{"_index":2067,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday",{"_index":2050,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.todatestring",{"_index":2112,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.toisostring",{"_index":2077,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["stat.rolename",{"_index":1572,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["state",{"_index":988,"title":{},"body":{"injectables/AuthService.html":{}}}],["statement",{"_index":845,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["statements",{"_index":2658,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":557,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueSchedulerService.html":{},"controllers/UsersController.html":{}}}],["stats",{"_index":730,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["status",{"_index":276,"title":{},"body":{"controllers/AppController.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["status'})@isboolean",{"_index":2511,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status.dto",{"_index":2613,"title":{},"body":{"controllers/UsersController.html":{}}}],["status.dto.ts",{"_index":2510,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:10",{"_index":2512,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status_message",{"_index":405,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["statusdto",{"_index":1391,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.status",{"_index":1453,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.statusmessage",{"_index":1454,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statuses",{"_index":712,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["statushistory",{"_index":1284,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["statusmessage",{"_index":382,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["stay",{"_index":2805,"title":{},"body":{"index.html":{}}}],["steps",{"_index":2754,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":2768,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":1115,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1702,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('data",{"_index":1704,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('end",{"_index":1708,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('error",{"_index":1707,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["strength",{"_index":967,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":47,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":2272,"title":{},"body":{"injectables/QueueService.html":{}}}],["string(payload.email",{"_index":1135,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["string(todaycount",{"_index":2172,"title":{},"body":{"injectables/QueueService.html":{}}}],["structure",{"_index":2354,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sub",{"_index":948,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["submission",{"_index":1213,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["subscribemessage",{"_index":1986,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":1970,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('join_queue_updates",{"_index":1979,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":1973,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":1976,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subtype",{"_index":1197,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["success",{"_index":953,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{}}}],["successful",{"_index":792,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["successfully",{"_index":474,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":785,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":542,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1126,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":497,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@apioperation({summary",{"_index":479,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@post('admin/update",{"_index":777,"title":{},"body":{"controllers/AuthController.html":{}}}],["super_admin')@useguards(rolesguard)@apioperation({summary",{"_index":1369,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["super_admin'].includes(role.name",{"_index":582,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":2787,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supporting",{"_index":2341,"title":{},"body":{"controllers/QueuesController.html":{}}}],["svg",{"_index":2834,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2715,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":2689,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2688,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":268,"title":{},"body":{"injectables/AnnouncementService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["taken",{"_index":964,"title":{},"body":{"injectables/AuthService.html":{}}}],["target",{"_index":1058,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuser",{"_index":1059,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuserid",{"_index":748,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["temporarily",{"_index":2327,"title":{},"body":{"injectables/QueueService.html":{}}}],["term",{"_index":2554,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["test",{"_index":1595,"title":{},"body":{"classes/LoginDto.html":{},"index.html":{}}}],["test(password",{"_index":1100,"title":{},"body":{"injectables/AuthService.html":{}}}],["test:covdeployment",{"_index":2751,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2750,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":100,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isemail()@isnotempty",{"_index":2387,"title":{},"body":{"classes/RegisterDto.html":{}}}],["test@example.com'})@isemail()@isoptional",{"_index":60,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isnotempty",{"_index":1593,"title":{},"body":{"classes/LoginDto.html":{}}}],["testing",{"_index":2116,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["testminioconnection",{"_index":2674,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":2747,"title":{},"body":{"index.html":{}}}],["text",{"_index":130,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["thanks",{"_index":2818,"title":{},"body":{"index.html":{}}}],["this.announcementrepository.create",{"_index":252,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.find",{"_index":255,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.findone",{"_index":258,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.save(announcement",{"_index":254,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementservice.create(createannouncementdto",{"_index":199,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findall",{"_index":200,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findone(id",{"_index":204,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.getrecentannouncements(limit",{"_index":202,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.remove(id",{"_index":208,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.update(id",{"_index":206,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.appointmentrepository.count",{"_index":719,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.delete(id",{"_index":677,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.find",{"_index":656,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.findone",{"_index":658,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(appointment",{"_index":682,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(updated",{"_index":672,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentservice.create(createappointmentdto",{"_index":547,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findall",{"_index":551,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findallbyuser(user.id",{"_index":555,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findbyappointmentnumber(appointmentnumber",{"_index":575,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findone(+id",{"_index":573,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydate(date",{"_index":563,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydaterange",{"_index":569,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsstats",{"_index":558,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getavailableslots(date",{"_index":572,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.remove(+id",{"_index":598,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.update(+id",{"_index":586,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.updatestatus(+id",{"_index":594,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appservice.gethello",{"_index":279,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.adminupdateuser",{"_index":865,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.getprofile(number(req.user.id",{"_index":856,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":835,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(registerdto",{"_index":846,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.updateuserinfo",{"_index":858,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.bucketname",{"_index":1629,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.checktimeslotavailability(newdate",{"_index":668,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.configservice",{"_index":1674,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get",{"_index":1670,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('minio_port",{"_index":1672,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('ws_cors_origin",{"_index":2004,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.counterrepository.create",{"_index":2314,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.find",{"_index":2316,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.findone",{"_index":2275,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.save(counter",{"_index":2282,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.documentapplicationsservice.create(createdto",{"_index":1414,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall",{"_index":1459,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall(userid",{"_index":1441,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findone(id",{"_index":1447,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getallapplicationfiles",{"_index":1446,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationfiles",{"_index":1444,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationstats",{"_index":1461,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getfiledownloadurl",{"_index":1450,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.remove(id",{"_index":1455,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.update",{"_index":1451,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.updatestatus",{"_index":1452,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.uploadfile",{"_index":1436,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.ensurebucketexists",{"_index":1684,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.findone(id",{"_index":263,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.findone(queueid",{"_index":2212,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.generatealltimeslots",{"_index":701,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.getdetailsformultiplequeues(queueids",{"_index":2263,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getprofile(targetuserid",{"_index":1093,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getqueueposition(queueid",{"_index":2215,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(savedqueue.id",{"_index":2208,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.handledailyqueuereset",{"_index":2117,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isresetinprogress",{"_index":2063,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isvalidemail(email",{"_index":961,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isvalidemail(updateuserdto.email",{"_index":1003,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":951,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logdailystatistics(startofday",{"_index":2105,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.logger.error",{"_index":2106,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.logger.error('delete",{"_index":1648,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('error",{"_index":1689,"title":{},"body":{"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{}}}],["this.logger.error('get",{"_index":1646,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('upload",{"_index":1643,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.log",{"_index":593,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueSchedulerService.html":{}}}],["this.logger.log('fetching",{"_index":550,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`bucket",{"_index":1688,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`client",{"_index":2000,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`cors",{"_index":2003,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`creating",{"_index":546,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`deleting",{"_index":597,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`fetching",{"_index":554,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`file",{"_index":1641,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.logger.log(`minio",{"_index":1681,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`socket",{"_index":2011,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`updating",{"_index":585,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.warn",{"_index":2064,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.minioclient",{"_index":1617,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.bucketexists(this.bucketname",{"_index":1685,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.listobjects",{"_index":1703,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.makebucket(this.bucketname",{"_index":1686,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.presignedgetobject",{"_index":1644,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.putobject",{"_index":1634,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.removeobject(this.bucketname",{"_index":1647,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.statobject(this.bucketname",{"_index":1699,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.queuedetailsrepository.create",{"_index":2193,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.find",{"_index":2247,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.findone",{"_index":2213,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.save(queuedetails",{"_index":2205,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifycounterupdate(counterid",{"_index":2298,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(id",{"_index":2225,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(nextqueue.id",{"_index":2295,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(queue.id",{"_index":2092,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuegateway.server.emit('dailyqueuereset",{"_index":2098,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuegateway.server.emit('queuelistupdate",{"_index":2209,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.count",{"_index":2110,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["this.queuerepository.create",{"_index":2176,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.find",{"_index":2080,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["this.queuerepository.findone",{"_index":2210,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save",{"_index":2086,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.save(counter.currentqueue",{"_index":2279,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(nextqueue",{"_index":2288,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(queue",{"_index":2183,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queueschedulerservice.gettodaypendingcount",{"_index":1913,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueschedulerservice.manualdailyreset",{"_index":1910,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.addcounter(data.name",{"_index":1897,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.callnext(+counterid",{"_index":1895,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.checkexists(+id",{"_index":1900,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.create(createqueuedto",{"_index":1849,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.create(queuedata",{"_index":1860,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findall",{"_index":1863,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbyqueuenumber(queuenumber",{"_index":1888,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.completed",{"_index":1868,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.pending",{"_index":1866,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.serving",{"_index":1867,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(status",{"_index":1865,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.pending",{"_index":1869,"title":{},"body":{"controllers/QueueController.html":{},"controllers/QueuesController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.serving",{"_index":1870,"title":{},"body":{"controllers/QueueController.html":{},"controllers/QueuesController.html":{}}}],["this.queueservice.findbyuseridwithdetails(userid",{"_index":2375,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findone(+id",{"_index":1886,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findone(queueid",{"_index":2382,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.getcounters",{"_index":1898,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getdetailsformultiplequeues(body.queueids",{"_index":1875,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(+id",{"_index":1890,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":2007,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(+id",{"_index":1892,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":2009,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getstats",{"_index":1885,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.update(+id",{"_index":1883,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.reflector.getallandoverride",{"_index":2414,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":2475,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findby",{"_index":2483,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":2476,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.assignrolestouser",{"_index":1079,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.assignrolestouser(id",{"_index":1562,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.assignrolestouser(user.id",{"_index":981,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.findall",{"_index":2444,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findbyname('citizen",{"_index":980,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findone(+id",{"_index":2445,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(roleid",{"_index":1076,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findone(updateuserdto.defaultroleid",{"_index":1083,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":2447,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(adminid",{"_index":1052,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(targetuserid",{"_index":1085,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":943,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(userid",{"_index":999,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.emit('counterlistupdate",{"_index":2022,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":2019,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":2021,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":2018,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.updateuserinfo(targetuserid",{"_index":1066,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository",{"_index":1517,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.count",{"_index":1564,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":977,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(id",{"_index":1563,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(user.id",{"_index":989,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.find",{"_index":1575,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":919,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":978,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(id",{"_index":1555,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(targetuserid",{"_index":1091,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.update(userid",{"_index":1033,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.adminupdate(+id",{"_index":2627,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(userwithhashedpassword",{"_index":2633,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":2618,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(req.user.id",{"_index":2619,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.id",{"_index":2635,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(userid",{"_index":2625,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getstats",{"_index":2620,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":2628,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updatestatus(+id",{"_index":2629,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validatepasswordstrength(password",{"_index":969,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepasswordstrength(updateuserdto.password",{"_index":1012,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":259,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":357,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["time_zone",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["timestamp",{"_index":1911,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["timezone",{"_index":2044,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["title",{"_index":120,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["today",{"_index":654,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["today's",{"_index":722,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["today.getdate",{"_index":2073,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.getfullyear()}${string(today.getmonth",{"_index":2155,"title":{},"body":{"injectables/QueueService.html":{}}}],["today.getmonth",{"_index":2072,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.sethours(0",{"_index":655,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todayappointments",{"_index":723,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todaycount",{"_index":2165,"title":{},"body":{"injectables/QueueService.html":{}}}],["todayend",{"_index":2163,"title":{},"body":{"injectables/QueueService.html":{}}}],["todayend.sethours(23",{"_index":2164,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart",{"_index":2160,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart.sethours(0",{"_index":2162,"title":{},"body":{"injectables/QueueService.html":{}}}],["token",{"_index":950,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tokens",{"_index":1119,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1676,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["tomorrow",{"_index":707,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["tomorrow.sethours(0",{"_index":709,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["total",{"_index":728,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["totalcount",{"_index":717,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["totalpages",{"_index":1532,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["totalusers",{"_index":1504,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["totalwaittimems",{"_index":2307,"title":{},"body":{"injectables/QueueService.html":{}}}],["touch",{"_index":2825,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":2557,"title":{},"body":{"classes/UserQueryDto.html":{},"dependencies.html":{}}}],["trigger",{"_index":1903,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["triggered",{"_index":1909,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["triggering",{"_index":2270,"title":{},"body":{"injectables/QueueService.html":{}}}],["true",{"_index":136,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["true})@joincolumn({name",{"_index":444,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":640,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["turn",{"_index":2294,"title":{},"body":{"injectables/QueueService.html":{}}}],["twitter",{"_index":2831,"title":{},"body":{"index.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1039,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["typeorm",{"_index":145,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":225,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":1470,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["typeormmodule.forfeature([announcement",{"_index":230,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["typeormmodule.forfeature([appointment",{"_index":604,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":2032,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":2460,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":888,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":2489,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["typescript",{"_index":926,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["ui",{"_index":2716,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":765,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorized'})@apibearerauth('jwt",{"_index":786,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":807,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":811,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('admin",{"_index":1050,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{}}}],["unauthorizedexception('insufficient",{"_index":1057,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":855,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('user",{"_index":998,"title":{},"body":{"injectables/AuthService.html":{}}}],["uncomment",{"_index":1403,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"injectables/UsersService.html":{}}}],["undefined})@apiresponse({status",{"_index":794,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray()@isoptional",{"_index":45,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["undefined})@isenum(applicationtype",{"_index":1204,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isobject",{"_index":1210,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isoptional()@isarray()@isnumber",{"_index":1272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unexpected",{"_index":1045,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":455,"title":{},"body":{"entities/Appointment.html":{},"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["uniqueness",{"_index":1537,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":2748,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":476,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2841,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":2610,"title":{},"body":{"controllers/UsersController.html":{}}}],["unused",{"_index":928,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["update",{"_index":11,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update'})@apibody({type",{"_index":755,"title":{},"body":{"controllers/AuthController.html":{}}}],["update(@param('id",{"_index":1893,"title":{},"body":{"controllers/QueueController.html":{}}}],["update(id",{"_index":178,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["updateannouncementdto",{"_index":179,"title":{"classes/UpdateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["updateappointmentdto",{"_index":509,"title":{"classes/UpdateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["updateappointmentdto.appointmentdate",{"_index":662,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updateappointmentdto.appointmenttime",{"_index":663,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updated",{"_index":669,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated'})@apiresponse({status",{"_index":758,"title":{},"body":{"controllers/AuthController.html":{}}}],["updated_at",{"_index":1310,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedat",{"_index":121,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{}}}],["updatedata",{"_index":1539,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.contactnumber",{"_index":1544,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.defaultroleid",{"_index":1547,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.email",{"_index":1540,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.firstname",{"_index":1542,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.lastname",{"_index":1543,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.middlename",{"_index":1545,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.name",{"_index":1553,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.nameextension",{"_index":1546,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.username",{"_index":1541,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedatecolumn",{"_index":142,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedatecolumn({name",{"_index":1309,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedocumentapplicationdto",{"_index":1389,"title":{"classes/UpdateDocumentApplicationDto.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["updatedqueue",{"_index":2224,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatedto",{"_index":1388,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["updateduser",{"_index":1034,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateduser.defaultrole?.name",{"_index":1037,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateprofile",{"_index":745,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["updateprofile(req",{"_index":805,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatequeuedto",{"_index":1823,"title":{"classes/UpdateQueueDto.html":{}},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updatequeuedto.counternumber",{"_index":2222,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto.status",{"_index":2219,"title":{},"body":{"injectables/QueueService.html":{}}}],["updates",{"_index":1071,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"index.html":{}}}],["updatestatus",{"_index":466,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatus(id",{"_index":512,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatusdto",{"_index":2607,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatestatusdto.isactive",{"_index":2630,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":14,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.defaultroleid",{"_index":1082,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.email",{"_index":1002,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.firstname",{"_index":1018,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.lastname",{"_index":1022,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.middlename",{"_index":1020,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.nameextension",{"_index":1024,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.password",{"_index":1011,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids",{"_index":1072,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.includes(updateuserdto.defaultroleid",{"_index":1090,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.join",{"_index":1081,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.length",{"_index":1073,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.username",{"_index":1005,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto:22",{"_index":61,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:27",{"_index":86,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:37",{"_index":84,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:42",{"_index":65,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:47",{"_index":71,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:52",{"_index":68,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:60",{"_index":77,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:68",{"_index":59,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:76",{"_index":56,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto['name",{"_index":1032,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto})@useguards(jwtauthguard)@post('update",{"_index":809,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserinfo",{"_index":891,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserinfo(userid",{"_index":908,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserstatusdto",{"_index":2508,"title":{"classes/UpdateUserStatusDto.html":{}},"body":{"classes/UpdateUserStatusDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updating",{"_index":96,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["upload",{"_index":1399,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["uploaddocument",{"_index":1352,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaddocument(id",{"_index":1394,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaded",{"_index":1642,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploaded_at",{"_index":1493,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedat",{"_index":1475,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedfile",{"_index":1402,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploadfile",{"_index":1603,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploadfile(file",{"_index":1610,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploading",{"_index":1696,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["uppercase",{"_index":1103,"title":{},"body":{"injectables/AuthService.html":{}}}],["url",{"_index":1380,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["use",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["usefactory",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":515,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":538,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(rolesguard",{"_index":548,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":1401,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user",{"_index":12,"title":{"entities/User.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":752,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["user'})@isoptional()@isnumber",{"_index":1250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.defaultrole?.name",{"_index":956,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.defaultroleid",{"_index":983,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":817,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":7,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:102",{"_index":1251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":2504,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1277,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:36",{"_index":1271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":2507,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:42",{"_index":2505,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:44",{"_index":1257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:47",{"_index":2506,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:52",{"_index":1261,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:60",{"_index":1258,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1265,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:76",{"_index":1268,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:84",{"_index":1248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:90",{"_index":40,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":1274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":46,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":949,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1019,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":545,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{}}}],["user.lastname",{"_index":1023,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.middlename",{"_index":1021,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.nameextension",{"_index":1025,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":922,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":2428,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.roles.map((role",{"_index":1531,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.roles.some((role",{"_index":581,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["user.roles?.includes['admin",{"_index":1905,"title":{},"body":{"controllers/QueueController.html":{}}}],["user.roles?.includes['super_admin",{"_index":1906,"title":{},"body":{"controllers/QueueController.html":{}}}],["user.username",{"_index":1006,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user/:userid",{"_index":778,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["user?.id",{"_index":1440,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{}}}],["user?.roles.some((role",{"_index":1438,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user_id",{"_index":1312,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":2533,"title":{},"body":{"entities/User.html":{}}}],["userdetails",{"_index":2323,"title":{},"body":{"injectables/QueueService.html":{}}}],["userdetails.map((detail",{"_index":2324,"title":{},"body":{"injectables/QueueService.html":{}}}],["userentity",{"_index":1780,"title":{},"body":{"controllers/QueueController.html":{}}}],["userid",{"_index":424,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{}}}],["useridnumber",{"_index":2318,"title":{},"body":{"injectables/QueueService.html":{}}}],["username",{"_index":28,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username'})@isoptional()@isstring",{"_index":2555,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["userquerydto",{"_index":2546,"title":{"classes/UserQueryDto.html":{}},"body":{"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userqueues",{"_index":2374,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.length",{"_index":2376,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.map((queue",{"_index":2377,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userresponsedto",{"_index":1719,"title":{"classes/UserResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userroles",{"_index":1084,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.map((role",{"_index":2420,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.some",{"_index":1087,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":1365,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"controllers/QueueController.html":{},"entities/Role.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":2641,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map((user",{"_index":1530,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":2612,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":449,"title":{},"body":{"entities/Appointment.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/DocumentApplication.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["usersbyrole",{"_index":1507,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["usersbyroledto",{"_index":2583,"title":{"classes/UsersByRoleDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userscontroller",{"_index":2586,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":290,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":898,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":1512,"title":{"injectables/UsersService.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstats",{"_index":1503,"title":{"interfaces/UserStats.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userstatsresponsedto",{"_index":2576,"title":{"classes/UserStatsResponseDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userwithhashedpassword",{"_index":2632,"title":{},"body":{"controllers/UsersController.html":{}}}],["userwithoutpassword",{"_index":955,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userwithroles",{"_index":2634,"title":{},"body":{"controllers/UsersController.html":{}}}],["usessl",{"_index":1622,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["usesslvalue",{"_index":1673,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["using",{"_index":359,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["valid",{"_index":942,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":960,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{}}}],["validate(payload",{"_index":1131,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validatepasswordstrength",{"_index":892,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatepasswordstrength(password",{"_index":910,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":893,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":913,"title":{},"body":{"injectables/AuthService.html":{}}}],["validating",{"_index":1118,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validation",{"_index":996,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{}}}],["validator",{"_index":93,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"dependencies.html":{}}}],["validity",{"_index":641,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["validvalues",{"_index":1881,"title":{},"body":{"controllers/QueueController.html":{}}}],["value",{"_index":172,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/UserQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1848,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["varchar",{"_index":126,"title":{},"body":{"entities/Announcement.html":{}}}],["variable",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["variables",{"_index":1125,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":929,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["verify",{"_index":1048,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":2839,"title":{},"body":{"properties.html":{}}}],["video",{"_index":2795,"title":{},"body":{"index.html":{}}}],["view",{"_index":2621,"title":{},"body":{"controllers/UsersController.html":{}}}],["visit",{"_index":2784,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":2798,"title":{},"body":{"index.html":{}}}],["void",{"_index":1966,"title":{},"body":{"classes/QueueGateway.html":{}}}],["wait",{"_index":2302,"title":{},"body":{"injectables/QueueService.html":{}}}],["waiting",{"_index":2284,"title":{},"body":{"injectables/QueueService.html":{}}}],["walk",{"_index":2371,"title":{},"body":{"controllers/QueuesController.html":{}}}],["want",{"_index":1826,"title":{},"body":{"controllers/QueueController.html":{}}}],["watch",{"_index":2743,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":1063,"title":{},"body":{"injectables/AuthService.html":{}}}],["website",{"_index":2829,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":1985,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":1961,"title":{},"body":{"classes/QueueGateway.html":{}}}],["weekend",{"_index":645,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["weekends",{"_index":652,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["willbeassigned",{"_index":1089,"title":{},"body":{"injectables/AuthService.html":{}}}],["without",{"_index":2269,"title":{},"body":{"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":2783,"title":{},"body":{"index.html":{}}}],["world",{"_index":371,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":2808,"title":{},"body":{"index.html":{}}}],["xxx",{"_index":2168,"title":{},"body":{"injectables/QueueService.html":{}}}],["yes",{"_index":933,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{}}}],["you'd",{"_index":2822,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2752,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":725,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["yyyymmdd",{"_index":2167,"title":{},"body":{"injectables/QueueService.html":{}}}],["zone",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":221,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for admin to update any user\n\n            \n\n            \n                Extends\n            \n            \n                            UpdateUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Default role ID for the user', example: 2})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of role IDs to assign to the user', example: undefined, type: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:76\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:52\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:47\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:60\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Announcement.html":{"url":"entities/Announcement.html","title":"entity - Announcement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Announcement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/entities/announcement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, default: 'admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 500, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('announcements')\nexport class Announcement {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'varchar', length: 500, nullable: true })\n  image: string;\n\n  @Column({ type: 'boolean', default: true })\n  isActive: boolean;\n\n  @Column({ type: 'varchar', length: 100, default: 'admin' })\n  createdBy: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnnouncementController.html":{"url":"controllers/AnnouncementController.html","title":"controller - AnnouncementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnnouncementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                announcements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                getRecentAnnouncements\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('recent')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseIntPipe,\n  Query,\n} from '@nestjs/common';\nimport { AnnouncementService } from './announcement.service';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Controller('announcements')\nexport class AnnouncementController {\n  constructor(private readonly announcementService: AnnouncementService) {}\n\n  @Post()\n  create(@Body() createAnnouncementDto: CreateAnnouncementDto) {\n    return this.announcementService.create(createAnnouncementDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.announcementService.findAll();\n  }\n\n  @Get('recent')\n  getRecentAnnouncements(@Query('limit', ParseIntPipe) limit: number = 5) {\n    return this.announcementService.getRecentAnnouncements(limit);\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAnnouncementDto: UpdateAnnouncementDto,\n  ) {\n    return this.announcementService.update(id, updateAnnouncementDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnnouncementModule.html":{"url":"modules/AnnouncementModule.html","title":"module - AnnouncementModule","body":"\n                   \n\n\n\n\n    Modules\n    AnnouncementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/announcement/announcement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnnouncementController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnnouncementService } from './announcement.service';\nimport { AnnouncementController } from './announcement.controller';\nimport { Announcement } from './entities/announcement.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Announcement])],\n  controllers: [AnnouncementController],\n  providers: [AnnouncementService],\n  exports: [AnnouncementService],\n})\nexport class AnnouncementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnnouncementService.html":{"url":"injectables/AnnouncementService.html","title":"injectable - AnnouncementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnnouncementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getRecentAnnouncements\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(announcementRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/announcement/announcement.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        announcementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Announcement } from './entities/announcement.entity';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Injectable()\nexport class AnnouncementService {\n  constructor(\n    @InjectRepository(Announcement)\n    private announcementRepository: Repository,\n  ) {}\n\n  async create(\n    createAnnouncementDto: CreateAnnouncementDto,\n  ): Promise {\n    const announcement = this.announcementRepository.create(\n      createAnnouncementDto,\n    );\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async findAll(): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const announcement = await this.announcementRepository.findOne({\n      where: { id, isActive: true },\n    });\n\n    if (!announcement) {\n      throw new NotFoundException(`Announcement with ID ${id} not found`);\n    }\n\n    return announcement;\n  }\n\n  async update(\n    id: number,\n    updateAnnouncementDto: UpdateAnnouncementDto,\n  ): Promise {\n    const announcement = await this.findOne(id);\n\n    Object.assign(announcement, updateAnnouncementDto);\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async remove(id: number): Promise {\n    const announcement = await this.findOne(id);\n    announcement.isActive = false; // Soft delete\n    await this.announcementRepository.save(announcement);\n  }\n\n  async getRecentAnnouncements(limit: number = 5): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n      take: limit,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnnouncementModule\n                        \n                        \n                            AppointmentModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DocumentApplicationsModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\nimport { AppointmentModule } from './modules/appointment/appointment.module';\nimport { AnnouncementModule } from './modules/announcement/announcement.module';\nimport { DocumentApplicationsModule } from './modules/document-applications/document-applications.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('DB_SYNCHRONIZE') === 'true', // Use environment variable\n        logging: configService.get('DB_LOGGING') === 'true', // Use environment variable\n        logger: 'advanced-console',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone using environment variable\n            await conn.query(`SET time_zone = '${configService.get('DB_TIMEZONE') || '+08:00'}';`);\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n    AppointmentModule,\n    AnnouncementModule,\n    DocumentApplicationsModule,\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ApplicationStatusHistory.html":{"url":"entities/ApplicationStatusHistory.html","title":"entity - ApplicationStatusHistory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ApplicationStatusHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/application-status-history.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                changedAt\n                            \n                            \n                                    \n                                changedBy\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                newStatus\n                            \n                            \n                                    \n                                oldStatus\n                            \n                            \n                                    \n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.statusHistory, {onDelete: 'CASCADE', nullable: false})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'changed_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'changed_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        newStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'new_status', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        oldStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'old_status', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('application_status_history')\n@Index(['applicationId'])\n@Index(['changedAt'])\nexport class ApplicationStatusHistory {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'old_status', length: 50, nullable: true })\n  oldStatus: string;\n\n  @Column({ name: 'new_status', length: 50 })\n  newStatus: string;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'changed_by', nullable: true })\n  changedBy: number;\n\n  @CreateDateColumn({ name: 'changed_at' })\n  changedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.statusHistory, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Appointment.html":{"url":"entities/Appointment.html","title":"entity - Appointment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Appointment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/entities/appointment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                appointmentNumber\n                            \n                            \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: AppointmentStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'userId', foreignKeyConstraintName: 'FK_appointment_user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:59\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\n\nexport enum AppointmentStatus {\n  PENDING = 'pending',\n  CONFIRMED = 'confirmed',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('appointments')\nexport class Appointment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  appointmentNumber: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ nullable: true })\n  middleInitial: string;\n\n  @Column()\n  address: string;\n\n  @Column()\n  phoneNumber: string;\n\n  @Column()\n  reasonOfVisit: string;\n\n  @Column({ type: 'date' })\n  appointmentDate: string;\n\n  @Column()\n  appointmentTime: string;\n\n  @Column({\n    type: 'enum',\n    enum: AppointmentStatus,\n    default: AppointmentStatus.PENDING,\n  })\n  status: AppointmentStatus;\n\n  @Column({ nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({\n    name: 'userId',\n    foreignKeyConstraintName: 'FK_appointment_user',\n  })\n  user: User;\n\n  @Column({ default: false })\n  isGuest: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppointmentController.html":{"url":"controllers/AppointmentController.html","title":"controller - AppointmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppointmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appointments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findUserAppointments\n                            \n                            \n                                    \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDateRange\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new appointment'})@ApiResponse({status: 201, description: 'Appointment created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all appointments (Admin/Staff only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-number/:number')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findUserAppointments\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserAppointments(user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('mine')@ApiOperation({summary: 'Get user appointments'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('available-slots')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDate(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-date')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDateRange(startDate: string, endDate: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('date-range')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Delete appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAppointmentDto: UpdateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: AppointmentStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query,\n  BadRequestException,\n  HttpCode,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { AppointmentService } from './appointment.service';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { AppointmentStatus } from './entities/appointment.entity';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\n\n@ApiTags('Appointments')\n@Controller('appointments')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class AppointmentController {\n  private readonly logger = new Logger(AppointmentController.name);\n\n  constructor(private readonly appointmentService: AppointmentService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new appointment' })\n  @ApiResponse({ status: 201, description: 'Appointment created successfully' })\n  async create(\n    @Body() createAppointmentDto: CreateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Set the userId from the authenticated user\n    createAppointmentDto.userId = user.id;\n\n    this.logger.log(`Creating appointment for user ${user.id}`);\n    return this.appointmentService.create(createAppointmentDto);\n  }\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all appointments (Admin/Staff only)' })\n  async findAll() {\n    this.logger.log('Fetching all appointments');\n    return this.appointmentService.findAll();\n  }\n\n  @Get('mine')\n  @ApiOperation({ summary: 'Get user appointments' })\n  async findUserAppointments(@User() user: AuthenticatedUser) {\n    this.logger.log(`Fetching appointments for user ${user.id}`);\n    return this.appointmentService.findAllByUser(user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getStats() {\n    this.logger.log('Fetching appointment statistics');\n    return this.appointmentService.getAppointmentsStats();\n  }\n\n  @Get('by-date')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDate(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching appointments for date: ${date}`);\n    return this.appointmentService.getAppointmentsByDate(date);\n  }\n\n  @Get('date-range')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDateRange(\n    @Query('start') startDate: string,\n    @Query('end') endDate: string,\n  ) {\n    if (!startDate || !endDate) {\n      throw new BadRequestException(\n        'Start and end date parameters are required',\n      );\n    }\n    this.logger.log(`Fetching appointments from ${startDate} to ${endDate}`);\n    return this.appointmentService.getAppointmentsByDateRange(\n      startDate,\n      endDate,\n    );\n  }\n\n  @Get('available-slots')\n  async getAvailableSlots(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching available slots for date: ${date}`);\n    return this.appointmentService.getAvailableSlots(date);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    this.logger.log(`Fetching appointment with ID: ${id}`);\n    return this.appointmentService.findOne(+id);\n  }\n\n  @Get('by-number/:number')\n  async findByAppointmentNumber(@Param('number') appointmentNumber: string) {\n    this.logger.log(`Fetching appointment with number: ${appointmentNumber}`);\n    return this.appointmentService.findByAppointmentNumber(appointmentNumber);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update appointment' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateAppointmentDto: UpdateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow update\n    if (\n      !user.roles.some((role) => ['admin', 'staff', 'super_admin'].includes(role.name)) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to update this appointment',\n      );\n    }\n\n    this.logger.log(`Updating appointment with ID: ${id}`);\n    return this.appointmentService.update(+id, updateAppointmentDto);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body('status') status: AppointmentStatus,\n  ) {\n    if (!Object.values(AppointmentStatus).includes(status)) {\n      throw new BadRequestException(\n        `Invalid status. Must be one of: ${Object.values(AppointmentStatus).join(', ')}`,\n      );\n    }\n\n    this.logger.log(\n      `Updating status for appointment with ID: ${id} to ${status}`,\n    );\n    return this.appointmentService.updateStatus(+id, status);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Delete appointment' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow deletion\n    if (\n      !user.roles.some((role) => ['admin', 'staff', 'super_admin'].includes(role.name)) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to delete this appointment',\n      );\n    }\n\n    this.logger.log(`Deleting appointment with ID: ${id}`);\n    await this.appointmentService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppointmentModule.html":{"url":"modules/AppointmentModule.html","title":"module - AppointmentModule","body":"\n                   \n\n\n\n\n    Modules\n    AppointmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\n\nAppointmentService \n\nAppointmentService \n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appointment/appointment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppointmentService } from './appointment.service';\nimport { AppointmentController } from './appointment.controller';\nimport { Appointment } from './entities/appointment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Appointment])],\n  controllers: [AppointmentController],\n  providers: [AppointmentService],\n  exports: [AppointmentService],\n})\nexport class AppointmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppointmentService.html":{"url":"injectables/AppointmentService.html","title":"injectable - AppointmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppointmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkTimeSlotAvailability\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                generateAllTimeSlots\n                            \n                            \n                                    Async\n                                getAppointmentsByDate\n                            \n                            \n                                    Async\n                                getAppointmentsByDateRange\n                            \n                            \n                                    Async\n                                getAppointmentsStats\n                            \n                            \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appointmentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appointment/appointment.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appointmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkTimeSlotAvailability\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeSlotAvailability(date: string, time: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:305\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                time\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateAllTimeSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAllTimeSlots()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:330\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     string[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDate(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDateRange(startDate: string, endDate: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:230\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:253\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, status: AppointmentStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Appointment, AppointmentStatus } from './entities/appointment.entity';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { format, addDays, parseISO, isValid } from 'date-fns';\n\n@Injectable()\nexport class AppointmentService {\n  constructor(\n    @InjectRepository(Appointment)\n    private appointmentRepository: Repository,\n  ) {}\n\n  async create(\n    createAppointmentDto: CreateAppointmentDto,\n  ): Promise {\n    try {\n      // Check date validity\n      const date = parseISO(createAppointmentDto.appointmentDate);\n      if (!isValid(date)) {\n        throw new BadRequestException('Invalid appointment date');\n      }\n\n      // Check if date is a weekend\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        throw new BadRequestException('Cannot book appointments on weekends');\n      }\n\n      // Check if date is in the past\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      if (date  {\n    return this.appointmentRepository.find({\n      order: {\n        appointmentDate: 'ASC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findAllByUser(userId: number): Promise {\n    return this.appointmentRepository.find({\n      where: { userId },\n      order: {\n        appointmentDate: 'DESC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { id },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment with ID ${id} not found`);\n    }\n\n    return appointment;\n  }\n\n  async findByAppointmentNumber(\n    appointmentNumber: string,\n  ): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { appointmentNumber },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment ${appointmentNumber} not found`);\n    }\n\n    return appointment;\n  }\n\n  async update(\n    id: number,\n    updateAppointmentDto: UpdateAppointmentDto,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n\n      // If changing date or time, check availability\n      if (\n        updateAppointmentDto.appointmentDate ||\n        updateAppointmentDto.appointmentTime\n      ) {\n        const newDate =\n          updateAppointmentDto.appointmentDate || appointment.appointmentDate;\n        const newTime =\n          updateAppointmentDto.appointmentTime || appointment.appointmentTime;\n\n        if (\n          newDate !== appointment.appointmentDate ||\n          newTime !== appointment.appointmentTime\n        ) {\n          await this.checkTimeSlotAvailability(newDate, newTime);\n        }\n      }\n\n      // Update the appointment\n      const updated = Object.assign(appointment, updateAppointmentDto);\n      console.log(`Updated appointment ${id}:`, updated);\n      return this.appointmentRepository.save(updated);\n    } catch (error) {\n      console.error(`Error updating appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async remove(id: number): Promise {\n    try {\n      const result = await this.appointmentRepository.delete(id);\n      if (result.affected === 0) {\n        throw new NotFoundException(`Appointment with ID ${id} not found`);\n      }\n      console.log(`Deleted appointment ${id}`);\n    } catch (error) {\n      console.error(`Error deleting appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async updateStatus(\n    id: number,\n    status: AppointmentStatus,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n      appointment.status = status;\n      console.log(`Updated status for appointment ${id} to ${status}`);\n      return this.appointmentRepository.save(appointment);\n    } catch (error) {\n      console.error(`Error updating status for appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getAvailableSlots(date: string): Promise {\n    try {\n      // Parse the date\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      // Get all appointments for the specified date\n      const existingAppointments = await this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n        select: ['appointmentTime'],\n      });\n\n      const bookedSlots = existingAppointments.map(\n        (app) => app.appointmentTime,\n      );\n\n      // Generate all time slots (8:00 AM - 5:00 PM with 30min intervals)\n      const allTimeSlots = this.generateAllTimeSlots();\n\n      // Return only available slots\n      return allTimeSlots.filter((slot) => !bookedSlots.includes(slot));\n    } catch (error) {\n      console.error(`Error getting available slots for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDate(date: string): Promise {\n    try {\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n        },\n        order: {\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      console.error(`Error getting appointments for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDateRange(\n    startDate: string,\n    endDate: string,\n  ): Promise {\n    try {\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: Between(startDate, endDate),\n        },\n        order: {\n          appointmentDate: 'ASC',\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      console.error(\n        `Error getting appointments in range ${startDate} to ${endDate}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async getAppointmentsStats() {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      const tomorrow = addDays(today, 1);\n      tomorrow.setHours(0, 0, 0, 0);\n\n      // Get counts for different statuses\n      const [\n        pendingCount,\n        confirmedCount,\n        completedCount,\n        cancelledCount,\n        totalCount,\n      ] = await Promise.all([\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.PENDING },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CONFIRMED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.COMPLETED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CANCELLED },\n        }),\n        this.appointmentRepository.count(),\n      ]);\n\n      // Get today's appointments\n      const todayAppointments = await this.appointmentRepository.count({\n        where: {\n          appointmentDate: format(today, 'yyyy-MM-dd'),\n        },\n      });\n\n      return {\n        pending: pendingCount,\n        confirmed: confirmedCount,\n        completed: completedCount,\n        cancelled: cancelledCount,\n        total: totalCount,\n        today: todayAppointments,\n      };\n    } catch (error) {\n      console.error('Error getting appointment stats:', error);\n      throw error;\n    }\n  }\n\n  private async checkTimeSlotAvailability(\n    date: string,\n    time: string,\n  ): Promise {\n    try {\n      // Check if time slot is already booked\n      const existingAppointment = await this.appointmentRepository.findOne({\n        where: {\n          appointmentDate: date,\n          appointmentTime: time,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n      });\n\n      if (existingAppointment) {\n        throw new BadRequestException('This time slot is already booked');\n      }\n    } catch (error) {\n      console.error(\n        `Error checking time slot availability for ${date} at ${time}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n  private generateAllTimeSlots(): string[] {\n    const slots: string[] = [];\n    let hour = 8;\n    let minute = 0;\n\n    while (hour \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(req: RequestWithUser, targetUserId: string, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin update user', description: 'Allows administrators to update any user's information including role assignments'})@ApiParam({name: 'userId', description: 'ID of the user to update'})@ApiBody({type: AdminUpdateUserDto})@ApiResponse({status: 200, description: 'User successfully updated'})@ApiResponse({status: 400, description: 'Bad request - invalid input data'})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiResponse({status: 403, description: 'Forbidden - insufficient permissions'})@ApiResponse({status: 404, description: 'Not found - user or role not found'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@Post('admin/update-user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User login'})@ApiResponse({status: 200, description: 'Login successful', schema: undefined})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiBody({type: LoginDto})@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User registration'})@ApiResponse({status: 201, description: 'Registration successful', schema: undefined})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBody({type: RegisterDto})@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: RequestWithUser, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update user profile', description: 'Allows a user to update their own profile information'})@ApiResponse({status: 200, description: 'Profile updated successfully'})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@ApiBody({type: UpdateUserDto})@UseGuards(JwtAuthGuard)@Post('update-profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport { AuthenticatedUser } from './jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\n\ninterface RequestWithUser extends Request {\n  user: AuthenticatedUser;\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.id));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.id),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.id),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: '1d' },\n        };\n      },\n    }),\n    TypeOrmModule.forFeature([User]),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                updateUserInfo\n                            \n                            \n                                    Private\n                                validatePasswordStrength\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(adminId: number, targetUserId: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:383\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                adminId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:211\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:206\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserInfo(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:239\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validatePasswordStrength\n                        \n                    \n                \n            \n            \n                \n                        \n                    validatePasswordStrength(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:538\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    const passwordValidation = this.validatePasswordStrength(password);\n    if (!passwordValidation.isValid) {\n      throw new BadRequestException(passwordValidation.message);\n    }\n\n    // Hash password\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    try {\n      // Create new user with all fields\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password: hashedPassword,\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name,\n      });\n\n      await this.usersRepository.save(user);\n\n      // Add citizen role to the user\n      try {\n        const citizenRole = await this.rolesService.findByName('citizen');\n        await this.rolesService.assignRolesToUser(user.id, [citizenRole.id]);\n\n        // Set default role\n        user.defaultRoleId = citizenRole.id;\n        await this.usersRepository.save(user);\n      } catch (error) {\n        console.error('Error assigning citizen role:', error);\n        // Rollback: Delete the user to maintain a consistent state\n        await this.usersRepository.delete(user.id);\n        throw new ConflictException(\n          'Failed to assign citizen role. Registration rolled back.',\n        );\n      }\n\n      // Generate JWT token\n      const payload = { sub: user.id, email: user.email, roles: ['citizen'] };\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: this.jwtService.sign(payload),\n        user: {\n          ...userWithoutPassword,\n          roles: ['citizen'],\n          defaultRole: 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  async getProfile(userId: number) {\n    // Validation for userId\n    if (!userId || isNaN(userId)) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['defaultRole'],\n    });\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    // Get user roles\n    const roles = await this.rolesService.getUserRoles(userId);\n    const roleNames = roles.map((role) => role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  async updateUserInfo(userId: number, updateUserDto: UpdateUserDto) {\n    try {\n      // First get the existing user\n      const user = await this.usersRepository.findOne({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('User not found');\n      }\n\n      // Check if email is being updated and not already taken\n      if (updateUserDto.email && updateUserDto.email !== user.email) {\n        // Validate email format\n        if (!this.isValidEmail(updateUserDto.email)) {\n          throw new BadRequestException('Invalid email format');\n        }\n\n        const existingUserByEmail = await this.usersRepository.findOne({\n          where: { email: updateUserDto.email },\n        });\n\n        if (existingUserByEmail && existingUserByEmail.id !== userId) {\n          throw new ConflictException('Email already exists');\n        }\n      }\n\n      // Check if username is being updated and not already taken\n      if (updateUserDto.username && updateUserDto.username !== user.username) {\n        const existingUserByUsername = await this.usersRepository.findOne({\n          where: { username: updateUserDto.username },\n        });\n\n        if (existingUserByUsername && existingUserByUsername.id !== userId) {\n          throw new ConflictException('Username already exists');\n        }\n      }\n\n      // Handle password change if provided\n      if (updateUserDto.password) {\n        // Validate password strength\n        const passwordValidation = this.validatePasswordStrength(updateUserDto.password);\n        if (!passwordValidation.isValid) {\n          throw new BadRequestException(passwordValidation.message);\n        }\n\n        // Hash new password\n        const salt = await bcrypt.genSalt();\n        const hashedPassword = await bcrypt.hash(updateUserDto.password, salt);\n        updateUserDto.password = hashedPassword;\n      } else {\n        // Remove password from DTO if not being updated\n        delete updateUserDto.password;\n      }\n\n      // Update name if name parts are changed\n      let shouldUpdateName = false;\n      const nameComponents = {\n        firstName: updateUserDto.firstName || user.firstName,\n        middleName:\n          updateUserDto.middleName !== undefined\n            ? updateUserDto.middleName\n            : user.middleName,\n        lastName: updateUserDto.lastName || user.lastName,\n        nameExtension:\n          updateUserDto.nameExtension !== undefined\n            ? updateUserDto.nameExtension\n            : user.nameExtension,\n      };\n\n      if (\n        updateUserDto.firstName ||\n        updateUserDto.middleName !== undefined ||\n        updateUserDto.lastName ||\n        updateUserDto.nameExtension !== undefined\n      ) {\n        shouldUpdateName = true;\n      }\n\n      // Generate full name if any name component changed\n      if (shouldUpdateName) {\n        const fullName = `${nameComponents.firstName} ${\n          nameComponents.middleName ? nameComponents.middleName + ' ' : ''\n        }${nameComponents.lastName}${\n          nameComponents.nameExtension ? ' ' + nameComponents.nameExtension : ''\n        }`;\n        updateUserDto['name'] = fullName;\n      }\n\n      try {\n        // Update user with all provided fields\n        await this.usersRepository.update(userId, updateUserDto);\n\n        // Get updated user with relations\n        const updatedUser = await this.usersRepository.findOne({\n          where: { id: userId },\n          relations: ['defaultRole'],\n        });\n\n        if (!updatedUser) {\n          throw new BadRequestException('Failed to retrieve updated user');\n        }\n\n        // Get user roles\n        const roles = await this.rolesService.getUserRoles(userId);\n        const roleNames = roles.map((role) => role.name);\n\n        // Remove password from response\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { password: __password, ...result } = updatedUser;\n\n        return {\n          ...result,\n          roles: roleNames,\n          defaultRole: updatedUser.defaultRole?.name || 'citizen',\n        };\n      } catch (error: unknown) {\n        console.error('User update database error:', error);\n        if (\n          typeof error === 'object' &&\n          error !== null &&\n          'code' in error &&\n          error.code === 'ER_DUP_ENTRY'\n        ) {\n          throw new ConflictException('Email or username already exists');\n        }\n        throw new BadRequestException(\n          'Failed to update user information in database',\n        );\n      }\n    } catch (error) {\n      console.error('User update error:', error);\n      // Re-throw specific errors\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n      // For any other unexpected error\n      throw new BadRequestException('Failed to update user information');\n    }\n  }\n  async adminUpdateUser(\n    adminId: number,\n    targetUserId: number,\n    updateUserDto: AdminUpdateUserDto,\n  ) {\n    console.log(\n      `Admin ${adminId} attempting to update user ${targetUserId}`,\n      updateUserDto,\n    );\n\n    try {\n      // Verify the admin has proper permissions\n      const admin = await this.usersRepository.findOne({\n        where: { id: adminId },\n      });\n\n      if (!admin) {\n        throw new UnauthorizedException('Admin not found');\n      }\n\n      // Get admin roles\n      const adminRoles = await this.rolesService.getUserRoles(adminId);\n      const adminRoleNames = adminRoles.map((role) => role.name);\n\n      // Check if the user has admin or super_admin role\n      const isAuthorized = adminRoleNames.some(\n        (role) => role === 'admin' || role === 'super_admin',\n      );\n\n      if (!isAuthorized) {\n        throw new UnauthorizedException('Insufficient permissions');\n      }\n\n      // Check if target user exists\n      const targetUser = await this.usersRepository.findOne({\n        where: { id: targetUserId },\n      });\n\n      if (!targetUser) {\n        throw new BadRequestException(`User with ID ${targetUserId} not found`);\n      }\n\n      // First perform the basic user update\n      // We'll catch any errors here to handle them appropriately\n      try {\n        await this.updateUserInfo(targetUserId, updateUserDto);\n      } catch (err) {\n        console.error('Error during basic user update:', err);\n        throw err; // Re-throw to be caught by outer try-catch\n      }\n\n      // Handle role updates if provided\n      if (updateUserDto.roleIds && updateUserDto.roleIds.length > 0) {\n        try {\n          // Verify all roles exist before assigning\n          for (const roleId of updateUserDto.roleIds) {\n            try {\n              await this.rolesService.findOne(roleId);\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (_) {\n              throw new BadRequestException(`Role with ID ${roleId} not found`);\n            }\n          }\n\n          // Assign roles\n          await this.rolesService.assignRolesToUser(\n            targetUserId,\n            updateUserDto.roleIds,\n          );\n          console.log(\n            `Assigned roles ${updateUserDto.roleIds.join(', ')} to user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error assigning roles:', error);\n          throw new BadRequestException(\n            error instanceof Error ? error.message : 'Failed to assign roles',\n          );\n        }\n      }\n\n      // Update default role if provided\n      if (updateUserDto.defaultRoleId) {\n        try {\n          // Verify the role exists\n          try {\n            await this.rolesService.findOne(updateUserDto.defaultRoleId);\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          } catch (_) {\n            throw new BadRequestException(\n              `Default role with ID ${updateUserDto.defaultRoleId} not found`,\n            );\n          }\n\n          // Verify user has this role assigned or will have it assigned\n          const userRoles = await this.rolesService.getUserRoles(targetUserId);\n          const hasRoleAssigned = userRoles.some(\n            (role) => role.id === updateUserDto.defaultRoleId,\n          );\n\n          const willBeAssigned =\n            updateUserDto.roleIds &&\n            updateUserDto.roleIds.includes(updateUserDto.defaultRoleId);\n\n          if (!hasRoleAssigned && !willBeAssigned) {\n            throw new BadRequestException(\n              'Cannot set default role to a role the user does not have',\n            );\n          }\n\n          // Update the default role\n          await this.usersRepository.update(targetUserId, {\n            defaultRoleId: updateUserDto.defaultRoleId,\n          });\n          console.log(\n            `Updated default role to ${updateUserDto.defaultRoleId} for user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error updating default role:', error);\n          throw new BadRequestException(\n            error instanceof Error\n              ? error.message\n              : 'Failed to update default role',\n          );\n        }\n      }\n\n      // Return the fully updated user\n      try {\n        const updatedUser = await this.getProfile(targetUserId);\n        return updatedUser;\n      } catch (error) {\n        console.error('Error retrieving updated user profile:', error);\n        throw new BadRequestException(\n          'User was updated but profile could not be retrieved',\n        );\n      }\n    } catch (error) {\n      console.error('Admin update user error:', error);\n\n      // Re-throw specific exceptions\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      // For any other errors\n      throw new BadRequestException(\n        'Failed to update user: Unexpected error occurred',\n      );\n    }\n  }\n\n  private validatePasswordStrength(password: string): { isValid: boolean; message?: string } {\n    if (!password) {\n      return { isValid: false, message: 'Password is required' };\n    }\n\n    if (password.length ]/.test(password);\n\n    if (!hasUpperCase) {\n      return { isValid: false, message: 'Password must contain at least one uppercase letter' };\n    }\n\n    if (!hasLowerCase) {\n      return { isValid: false, message: 'Password must contain at least one lowercase letter' };\n    }\n\n    if (!hasNumbers) {\n      return { isValid: false, message: 'Password must contain at least one number' };\n    }\n\n    if (!hasSpecialChars) {\n      return { isValid: false, message: 'Password must contain at least one special character (!@#$%^&*(),.?\":{}|<>)' };\n    }\n\n    return { isValid: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedUser.html":{"url":"interfaces/AuthenticatedUser.html","title":"interface - AuthenticatedUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnnouncementDto.html":{"url":"classes/CreateAnnouncementDto.html","title":"class - CreateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/create-announcement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsBoolean } from 'class-validator';\n\nexport class CreateAnnouncementDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsString()\n  createdBy?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAppointmentDto.html":{"url":"classes/CreateAppointmentDto.html","title":"class - CreateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/create-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsOptional,\n  IsEnum,\n  IsDateString,\n} from 'class-validator';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class CreateAppointmentDto {\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @IsOptional()\n  @IsString()\n  middleInitial: string;\n\n  @IsNotEmpty()\n  @IsString()\n  address: string;\n\n  @IsNotEmpty()\n  @IsString()\n  phoneNumber: string;\n\n  @IsNotEmpty()\n  @IsString()\n  reasonOfVisit: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  appointmentDate: string;\n\n  @IsNotEmpty()\n  @IsString()\n  appointmentTime: string;\n\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n\n  @IsOptional()\n  userId?: number;\n\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDocumentApplicationDto.html":{"url":"classes/CreateDocumentApplicationDto.html","title":"class - CreateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/create-document-application.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                applicationSubtype\n                            \n                            \n                                    \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                    \n                                formData\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application subtype (optional)', example: 'Copy of Birth Certificate', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationType, description: 'Type of document application', example: undefined})@IsEnum(ApplicationType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Form data containing all application details', example: undefined})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional status message', example: 'Initial application submission', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional, IsObject, IsString } from 'class-validator';\nimport { ApplicationType } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateDocumentApplicationDto {\n  @ApiProperty({\n    enum: ApplicationType,\n    description: 'Type of document application',\n    example: ApplicationType.BIRTH_CERTIFICATE,\n  })\n  @IsEnum(ApplicationType)\n  applicationType: ApplicationType;\n\n  @ApiProperty({\n    description: 'Application subtype (optional)',\n    example: 'Copy of Birth Certificate',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  applicationSubtype?: string;\n\n  @ApiProperty({\n    description: 'Form data containing all application details',\n    example: {\n      firstName: 'Juan',\n      lastName: 'Dela Cruz',\n      birthDate: '1990-01-01',\n      birthPlace: 'Manila',\n    },\n  })\n  @IsObject()\n  formData: Record;\n\n  @ApiProperty({\n    description: 'Optional status message',\n    example: 'Initial application submission',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsOptional()\n  userId?: number | string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '+639123456789', description: 'Contact number'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID for the user'})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name (optional)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'John Miguel Doe Jr.', description: 'Full name (auto-generated if not provided)'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension (e.g., Jr., Sr., III)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password123', description: 'User password (minimum 6 characters)', minLength: 6})@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: undefined, description: 'Array of role IDs to assign to the user', type: undefined})@IsOptional()@IsArray()@IsNumber({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username (optional, will use email if not provided)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  MinLength,\n  IsArray,\n  IsNumber,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username (optional, will use email if not provided)',\n  })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({\n    example: 'password123',\n    description: 'User password (minimum 6 characters)',\n    minLength: 6,\n  })\n  @IsString()\n  @MinLength(6)\n  password: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name (optional)',\n  })\n  @IsOptional()\n  @IsString()\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    example: 'John Miguel Doe Jr.',\n    description: 'Full name (auto-generated if not provided)',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension (e.g., Jr., Sr., III)',\n  })\n  @IsOptional()\n  @IsString()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  @IsOptional()\n  @IsString()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    example: [2, 3],\n    description: 'Array of role IDs to assign to the user',\n    type: [Number],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  roleIds?: number[];\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID for the user',\n  })\n  @IsOptional()\n  @IsNumber()\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentApplication.html":{"url":"entities/DocumentApplication.html","title":"entity - DocumentApplication","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-application.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                applicationSubtype\n                            \n                            \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                files\n                            \n                            \n                                    \n                                formData\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastModifiedBy\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                statusHistory\n                            \n                            \n                                    \n                                statusMessage\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_subtype', length: 100, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationType, name: 'application_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.application, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'form_data', type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastModifiedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_modified_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusHistory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatusHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, history => history.application, {cascade: false, eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\nimport { DocumentFile } from './document-file.entity';\nimport { ApplicationStatusHistory } from './application-status-history.entity';\n\nexport enum ApplicationType {\n  BIRTH_CERTIFICATE = 'Birth Certificate',\n  MARRIAGE_CERTIFICATE = 'Marriage Certificate',\n  MARRIAGE_LICENSE = 'Marriage License',\n  DEATH_CERTIFICATE = 'Death Certificate',\n  BUSINESS_PERMIT = 'Business Permit',\n}\n\nexport enum ApplicationStatus {\n  PENDING = 'Pending',\n  PROCESSING = 'Processing',\n  APPROVED = 'Approved',\n  REJECTED = 'Rejected',\n  DECLINE = 'Decline',\n  READY_FOR_PICKUP = 'Ready for Pickup',\n  REQUIRES_ADDITIONAL_INFO = 'Requires Additional Info',\n}\n\n@Entity('document_applications')\n@Index(['userId'])\n@Index(['applicationType'])\n@Index(['status'])\n@Index(['createdAt'])\nexport class DocumentApplication {\n  @PrimaryColumn({ length: 50 })\n  id: string;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationType,\n    name: 'application_type',\n  })\n  applicationType: ApplicationType;\n\n  @Column({ name: 'application_subtype', length: 100, nullable: true })\n  applicationSubtype: string;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationStatus,\n    default: ApplicationStatus.PENDING,\n  })\n  status: ApplicationStatus;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'form_data', type: 'json' })\n  formData: Record;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @Column({ name: 'last_modified_by', nullable: true })\n  lastModifiedBy: number;\n\n  // Relations\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({ name: 'user_id' })\n  user: User;\n\n  @OneToMany(() => DocumentFile, (file) => file.application, { cascade: true })\n  files: DocumentFile[];\n\n  @OneToMany(() => ApplicationStatusHistory, (history) => history.application, {\n    cascade: false,\n    eager: false,\n  })\n  statusHistory: ApplicationStatusHistory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentApplicationsController.html":{"url":"controllers/DocumentApplicationsController.html","title":"controller - DocumentApplicationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentApplicationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                document-applications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplications\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getFileDownloadUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadDocument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new document application'})@ApiResponse({status: 201, description: 'Application created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(status?: string, user?: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get user applications'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get specific application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files/all')@ApiOperation({summary: 'Get all application files (privileged users only)'})@ApiResponse({status: 200, description: 'All files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplications\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplications()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/all')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get all applications (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:241\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files')@ApiOperation({summary: 'Get application files (latest per category)'})@ApiResponse({status: 200, description: 'Files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getFileDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileDownloadUrl(fileId: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:fileId/download')@ApiOperation({summary: 'Get file download URL'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/stats')@Roles('admin', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get application statistics (Admin/Super Admin only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:249\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:226\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, statusDto: literal type, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Update application status (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:211\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                statusDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        uploadDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadDocument(id: string, file: Express.Multer.File, documentCategory: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/files')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiOperation({summary: 'Upload document file'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                documentCategory\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Query,\n  UseGuards,\n  //Request, // Uncomment if you need to use Request object\n  BadRequestException,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { CreateDocumentApplicationDto } from './dto/create-document-application.dto';\nimport { UpdateDocumentApplicationDto } from './dto/update-document-application.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport { ApplicationStatus } from './entities/document-application.entity';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiConsumes,\n} from '@nestjs/swagger';\n\n@ApiTags('Document Applications')\n@Controller('document-applications')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class DocumentApplicationsController {\n  constructor(\n    private readonly documentApplicationsService: DocumentApplicationsService,\n  ) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new document application' })\n  @ApiResponse({ status: 201, description: 'Application created successfully' })\n  async create(\n    @Body() createDto: CreateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.create(createDto, user.id);\n  }\n\n  @Post(':id/files')\n  @UseInterceptors(\n    FileInterceptor('file', {\n      limits: {\n        fileSize: 10 * 1024 * 1024, // 10MB limit\n      },\n      fileFilter: (req, file, callback) => {\n        if (!file.mimetype.match(/\\/(jpg|jpeg|png|pdf)$/)) {\n          return callback(\n            new BadRequestException(\n              'Only JPEG, PNG, and PDF files are allowed',\n            ),\n            false,\n          );\n        }\n        callback(null, true);\n      },\n    }),\n  )\n  @ApiConsumes('multipart/form-data')\n  @ApiOperation({ summary: 'Upload document file' })\n  async uploadDocument(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n    @Body('documentCategory') documentCategory: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    console.log('Received document category:', documentCategory); // Debug log\n\n    if (!documentCategory) {\n      throw new BadRequestException('Document category is required');\n    }\n\n    return this.documentApplicationsService.uploadFile(\n      id,\n      file,\n      documentCategory,\n      user.id,\n    );\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get user applications' })\n  async findAll(\n    @Query('status') status?: string,\n    @User() user?: AuthenticatedUser,\n  ) {\n    const userId = user?.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user?.id;\n    return this.documentApplicationsService.findAll(userId);\n  }\n\n  @Get(':id/files')\n  @ApiOperation({ summary: 'Get application files (latest per category)' })\n  @ApiResponse({ status: 200, description: 'Files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    console.log(\n      `Getting files for application ${id}, user: ${user.email}, isPrivileged: ${!userId}`,\n    );\n\n    return await this.documentApplicationsService.getApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id/files/all')\n  @ApiOperation({ summary: 'Get all application files (privileged users only)' })\n  @ApiResponse({ status: 200, description: 'All files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getAllApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    return await this.documentApplicationsService.getAllApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get specific application' })\n  async findOne(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    return this.documentApplicationsService.findOne(id, userId);\n  }\n\n  @Get('files/:fileId/download')\n  @ApiOperation({ summary: 'Get file download URL' })\n  async getFileDownloadUrl(\n    @Param('fileId') fileId: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const url = await this.documentApplicationsService.getFileDownloadUrl(\n      +fileId,\n      userId,\n    );\n    return { url };\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update application' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: UpdateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const adminId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? user.id\n      : undefined;\n\n    return this.documentApplicationsService.update(\n      id,\n      updateDto,\n      userId,\n      adminId,\n    );\n  }\n\n  @Patch(':id/status')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Update application status (Privileged users only)' })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() statusDto: { status: string; statusMessage?: string },\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.updateStatus(\n      id,\n      statusDto.status as ApplicationStatus,\n      statusDto.statusMessage,\n      user.id,\n    );\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete application' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    await this.documentApplicationsService.remove(id, userId);\n    return { message: 'Application deleted successfully' };\n  }\n\n  // Admin endpoints\n  @Get('admin/all')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Get all applications (Privileged users only)' })\n  async getAllApplications() {\n    return this.documentApplicationsService.findAll();\n  }\n\n  @Get('admin/stats')\n  @Roles('admin', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Get application statistics (Admin/Super Admin only)' })\n  async getStats(): Promise\n  > {\n    return this.documentApplicationsService.getApplicationStats();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentApplicationsModule.html":{"url":"modules/DocumentApplicationsModule.html","title":"module - DocumentApplicationsModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentApplicationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\n\n\nMinioService \n\nMinioService \n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentApplicationsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { DocumentApplicationsController } from './document-applications.controller';\nimport { DocumentApplication } from './entities/document-application.entity';\nimport { DocumentFile } from './entities/document-file.entity';\nimport { ApplicationStatusHistory } from './entities/application-status-history.entity';\nimport { MinioService } from './services/minio.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DocumentApplication,\n      DocumentFile,\n      ApplicationStatusHistory,\n    ]),\n  ],\n  controllers: [DocumentApplicationsController],\n  providers: [DocumentApplicationsService, MinioService],\n  exports: [DocumentApplicationsService, MinioService],\n})\nexport class DocumentApplicationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentFile.html":{"url":"entities/DocumentFile.html","title":"entity - DocumentFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                documentCategory\n                            \n                            \n                                    \n                                fileName\n                            \n                            \n                                    \n                                fileSize\n                            \n                            \n                                    \n                                fileType\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                minioObjectName\n                            \n                            \n                                    \n                                uploadedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.files, {onDelete: 'CASCADE'})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'document_category', length: 250, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_name', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_size', type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_type', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        minioObjectName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'minio_object_name', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'uploaded_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('document_files')\n@Index(['applicationId'])\n@Index(['documentCategory'])\nexport class DocumentFile {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'file_name', length: 255 })\n  fileName: string;\n\n  @Column({ name: 'file_type', length: 100 })\n  fileType: string;\n\n  @Column({ name: 'file_size', type: 'bigint' })\n  fileSize: number;\n\n  @Column({ name: 'minio_object_name', length: 500 })\n  minioObjectName: string;\n\n  @Column({ name: 'document_category', length: 250, nullable: true })\n  documentCategory: string;\n\n  @CreateDateColumn({ name: 'uploaded_at' })\n  uploadedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.files, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindAllOptions.html":{"url":"interfaces/FindAllOptions.html","title":"interface - FindAllOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FindAllOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            search\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        search\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        search:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthenticatedUser\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email or username for login', example: 'test@example.com'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Test User password', example: 'password123'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'Email or username for login',\n    example: 'test@example.com',\n  })\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @ApiProperty({\n    description: 'Test User password',\n    example: 'password123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService.html":{"url":"injectables/MinioService.html","title":"injectable - MinioService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/minio.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadUrl(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor() {\n    this.minioClient = new Minio.Client({\n      endPoint: process.env.MINIO_ENDPOINT || 'localhost',\n      port: parseInt(process.env.MINIO_PORT || '9000'),\n      useSSL: process.env.MINIO_USE_SSL === 'true',\n      accessKey: process.env.MINIO_ACCESS_KEY || 'minioadmin',\n      secretKey: process.env.MINIO_SECRET_KEY || 'minioadmin123',\n    });\n\n    this.bucketName = process.env.MINIO_BUCKET_NAME || 'bulak-smart-connect';\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        {\n          'Content-Type': file.mimetype,\n          'Original-Name': file.originalname,\n        },\n      );\n\n      this.logger.log(`File uploaded: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Upload failed:', error);\n      throw error;\n    }\n  }\n\n  async getDownloadUrl(objectName: string): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        3600,\n      );\n    } catch (error) {\n      this.logger.error('Get URL failed:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Delete failed:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService-1.html":{"url":"injectables/MinioService-1.html","title":"injectable - MinioService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                ensureBucketExists\n                            \n                            \n                                    Async\n                                getFileInfo\n                            \n                            \n                                    Async\n                                getPresignedUrl\n                            \n                            \n                                    Async\n                                listFiles\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ensureBucketExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureBucketExists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFileInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileInfo(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresignedUrl(objectName: string, expiry: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                expiry\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3600\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    listFiles(prefix?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService implements OnModuleInit {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor(private configService: ConfigService) {\n    const endpoint = this.configService.get(\n      'MINIO_ENDPOINT',\n      'localhost',\n    );\n    const port = this.configService.get('MINIO_PORT', 9000);\n    const useSSLValue = this.configService\n      .get('MINIO_USE_SSL', 'false')\n      .toLowerCase();\n    const useSSL = ['true', '1', 'yes', 'on'].includes(useSSLValue);\n    const accessKey = this.configService.get(\n      'MINIO_ACCESS_KEY',\n      'minioadmin',\n    );\n    const secretKey = this.configService.get(\n      'MINIO_SECRET_KEY',\n      'minioadmin123',\n    );\n\n    this.minioClient = new Minio.Client({\n      endPoint: endpoint,\n      port: port,\n      useSSL: useSSL,\n      accessKey: accessKey,\n      secretKey: secretKey,\n    });\n\n    this.bucketName = this.configService.get(\n      'MINIO_BUCKET_NAME',\n      'bulak-smart-connect',\n    );\n\n    this.logger.log(`MinIO configured with endpoint: ${endpoint}:${port}`);\n  }\n\n  async onModuleInit() {\n    await this.ensureBucketExists();\n  }\n\n  async ensureBucketExists(): Promise {\n    try {\n      const exists = await this.minioClient.bucketExists(this.bucketName);\n      if (!exists) {\n        await this.minioClient.makeBucket(this.bucketName, 'us-east-1');\n        this.logger.log(`Bucket ${this.bucketName} created successfully`);\n      } else {\n        this.logger.log(`Bucket ${this.bucketName} already exists`);\n      }\n    } catch (error) {\n      this.logger.error('Error ensuring bucket exists:', error);\n      throw error;\n    }\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      const metaData = {\n        'Content-Type': file.mimetype,\n        'Original-Name': file.originalname,\n        'Upload-Date': new Date().toISOString(),\n        'File-Size': file.size.toString(),\n      };\n\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        metaData,\n      );\n\n      this.logger.log(`File uploaded successfully: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Error uploading file:', error);\n      throw error;\n    }\n  }\n\n  async getPresignedUrl(\n    objectName: string,\n    expiry: number = 3600,\n  ): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        expiry,\n      );\n    } catch (error) {\n      this.logger.error('Error generating presigned URL:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted successfully: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Error deleting file:', error);\n      throw error;\n    }\n  }\n\n  async getFileInfo(objectName: string): Promise {\n    try {\n      return await this.minioClient.statObject(this.bucketName, objectName);\n    } catch (error) {\n      this.logger.error('Error getting file info:', error);\n      throw error;\n    }\n  }\n\n  async listFiles(prefix?: string): Promise {\n    return new Promise((resolve, reject) => {\n      const files: any[] = [];\n      const stream = this.minioClient.listObjects(\n        this.bucketName,\n        prefix,\n        true,\n      );\n\n      stream.on('data', (obj) => files.push(obj));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(files));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedUsersResponseDto.html":{"url":"classes/PaginatedUsersResponseDto.html","title":"class - PaginatedUsersResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedUsersResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/paginated-users-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                limit\n                            \n                            \n                                    \n                                page\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                totalPages\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'Current page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Total number of pages'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Array of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nexport class PaginatedUsersResponseDto {\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Array of users',\n  })\n  users: UserResponseDto[];\n\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  total: number;\n\n  @ApiProperty({\n    example: 1,\n    description: 'Current page number',\n  })\n  page: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Number of items per page',\n  })\n  limit: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Total number of pages',\n  })\n  totalPages: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueueController.html":{"url":"controllers/QueueController.html","title":"controller - QueueController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueueController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queue\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addCounter\n                            \n                            \n                                    \n                                callNext\n                            \n                            \n                                    \n                                    Async\n                                checkQueueExists\n                            \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                createManualQueue\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findByQueueNumber\n                            \n                            \n                                    \n                                findByStatus\n                            \n                            \n                                    \n                                findCompleted\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findPending\n                            \n                            \n                                    \n                                findPendingWithDetails\n                            \n                            \n                                    \n                                findServing\n                            \n                            \n                                    \n                                findServingWithDetails\n                            \n                            \n                                    \n                                getCounters\n                            \n                            \n                                    \n                                getDetailsForMultipleQueues\n                            \n                            \n                                    \n                                getQueueDetails\n                            \n                            \n                                    \n                                getQueuePosition\n                            \n                            \n                                    \n                                getStats\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getTodayPendingCount\n                            \n                            \n                                    \n                                    \n                                    Async\n                                manualDailyReset\n                            \n                            \n                                    \n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:203\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter/:counterId/call-next')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkQueueExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkQueueExists(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/exists')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:213\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto, user?: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createManualQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManualQueue(createQueueDto: CreateQueueDto, user?: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('manual')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('number/:queueNumber')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:178\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status/:status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findCompleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCompleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('completed')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:116\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:173\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPending\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPending()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:106\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPendingWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPendingWithDetails()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:122\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServing\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServingWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServingWithDetails()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:128\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('counters')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:208\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDetailsForMultipleQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDetailsForMultipleQueues(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('bulk-details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/position')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:188\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:168\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getTodayPendingCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodayPendingCount()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/pending-count')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:249\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        manualDailyReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    manualDailyReset(user?: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('admin/daily-reset')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:225\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateQueueDto: UpdateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:193\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  //Delete, // Uncomment if you want to implement delete functionality\n  //Request, // Uncomment if you want to use Request object\n  UseGuards,\n  UnauthorizedException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueStatus } from './entities/queue.entity';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { User as UserEntity } from '../../users/entities/user.entity';\nimport { QueueSchedulerService } from './queue-scheduler.service';\n\n@Controller('queue')\nexport class QueueController {\n  constructor(\n    private readonly queueService: QueueService,\n    private readonly queueSchedulerService: QueueSchedulerService,\n  ) {}\n\n  @Post()\n  @UseGuards(JwtAuthGuard)\n  create(@Body() createQueueDto: CreateQueueDto, @User() user?: UserEntity) {\n    // Extract user ID from authenticated user\n    const userId = user?.id || null;\n\n    console.log('=== QUEUE CREATION BACKEND DEBUG ===');\n    console.log('Queue creation - User from JWT:', user);\n    console.log('Original DTO received:', createQueueDto);\n    console.log('DTO isGuest value:', createQueueDto.isGuest);\n    console.log('DTO isGuest type:', typeof createQueueDto.isGuest);\n\n    // Set userId and respect the isGuest boolean from frontend\n    if (userId) {\n      createQueueDto.userId = userId;\n      // If isGuest is not provided, default to false for authenticated users\n      if (createQueueDto.isGuest === undefined) {\n        createQueueDto.isGuest = false;\n      }\n    } else {\n      createQueueDto.userId = undefined;\n      createQueueDto.isGuest = true;\n    }\n\n    console.log('Final DTO values:');\n    console.log('- userId:', createQueueDto.userId);\n    console.log('- isGuest:', createQueueDto.isGuest);\n\n    return this.queueService.create(createQueueDto);\n  }\n\n  @Post('manual')\n  @UseGuards(JwtAuthGuard)\n  async createManualQueue(\n    @Body() createQueueDto: CreateQueueDto,\n    @User() user?: UserEntity,\n  ) {\n    try {\n      console.log('Manual queue creation by admin:', user?.id);\n      console.log('Received DTO:', createQueueDto);\n\n      // Set default values for manual/guest queues\n      const queueData: CreateQueueDto = {\n        ...createQueueDto,\n        userId: undefined, // Manual queues don't have user IDs\n        isGuest: true, // Always true for manual queues\n        // Don't override appointmentType - let it come from the frontend\n      };\n\n      console.log('Processed queue data:', queueData);\n\n      const result = await this.queueService.create(queueData);\n\n      return {\n        success: true,\n        queue: result.queue || result,\n        details: result.details,\n        message: 'Manual queue created successfully',\n      };\n    } catch (error) {\n      console.error('Error creating manual queue:', error);\n      throw error;\n    }\n  }\n\n  @Get()\n  findAll() {\n    return this.queueService.findAll();\n  }\n\n  @Get('status/:status')\n  findByStatus(@Param('status') status: QueueStatus) {\n    return this.queueService.findByStatus(status);\n  }\n\n  @Get('pending')\n  findPending() {\n    return this.queueService.findByStatus(QueueStatus.PENDING);\n  }\n\n  @Get('serving')\n  findServing() {\n    return this.queueService.findByStatus(QueueStatus.SERVING);\n  }\n\n  @Get('completed')\n  findCompleted() {\n    return this.queueService.findByStatus(QueueStatus.COMPLETED);\n  }\n\n  // Endpoint for pending queues with details\n  @Get('pending/details')\n  findPendingWithDetails() {\n    return this.queueService.findByStatusWithDetails(QueueStatus.PENDING);\n  }\n\n  // Endpoint for serving queues with details\n  @Get('serving/details')\n  findServingWithDetails() {\n    return this.queueService.findByStatusWithDetails(QueueStatus.SERVING);\n  }\n\n  // Endpoint for bulk fetching queue details\n  @Post('bulk-details')\n  getDetailsForMultipleQueues(@Body() body: { queueIds: number[] }) {\n    return this.queueService.getDetailsForMultipleQueues(body.queueIds);\n  }\n  // Endpoint for updating queue status\n  @Patch(':id/status')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() body: { status: QueueStatus },\n  ) {\n    console.log(`PATCH /queue/${id}/status with body:`, body);\n\n    try {\n      // Validate the status enum value\n      if (!Object.values(QueueStatus).includes(body.status)) {\n        console.error(`Invalid status value: ${body.status}`);\n        return {\n          error: 'Invalid status value',\n          validValues: Object.values(QueueStatus),\n        };\n      }\n\n      // Update the queue status\n      const result = await this.queueService.update(+id, {\n        status: body.status,\n      });\n      console.log(`Queue ${id} status updated successfully to ${body.status}`);\n      return result;\n    } catch (error) {\n      console.error(`Error updating queue ${id} status:`, error);\n      throw error;\n    }\n  }\n\n  @Get('stats')\n  getStats() {\n    return this.queueService.getStats();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.queueService.findOne(+id);\n  }\n\n  @Get('number/:queueNumber')\n  findByQueueNumber(@Param('queueNumber') queueNumber: string) {\n    return this.queueService.findByQueueNumber(queueNumber);\n  }\n\n  @Get(':id/details')\n  getQueueDetails(@Param('id') id: string) {\n    return this.queueService.getQueueDetails(+id);\n  }\n\n  @Get(':id/position')\n  getQueuePosition(@Param('id') id: string) {\n    return this.queueService.getQueuePosition(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateQueueDto: UpdateQueueDto) {\n    return this.queueService.update(+id, updateQueueDto);\n  }\n\n  @Post('counter/:counterId/call-next')\n  callNext(@Param('counterId') counterId: string) {\n    return this.queueService.callNext(+counterId);\n  }\n\n  @Post('counter')\n  addCounter(@Body() data: { name: string }) {\n    return this.queueService.addCounter(data.name);\n  }\n\n  @Get('counters')\n  getCounters() {\n    return this.queueService.getCounters();\n  }\n\n  @Get(':id/exists')\n  async checkQueueExists(@Param('id') id: string) {\n    try {\n      const exists = await this.queueService.checkExists(+id);\n      return { exists };\n    } catch (error) {\n      console.error(`Error checking if queue ${id} exists:`, error);\n      return { exists: false };\n    }\n  }\n\n  @Post('admin/daily-reset')\n  @UseGuards(JwtAuthGuard)\n  async manualDailyReset(@User() user?: UserEntity) {\n    // Only allow admins to trigger manual daily reset\n    if (!user || (!user.roles?.includes['admin'] && !user.roles?.includes['super_admin'])) {\n      throw new UnauthorizedException('Admin access required');\n    }\n\n    console.log(`Manual daily reset triggered by admin: ${user.username}`);\n    \n    try {\n      await this.queueSchedulerService.manualDailyReset();\n      \n      return {\n        success: true,\n        message: 'Daily queue reset completed successfully',\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      console.error('Error during manual daily reset:', error);\n      throw new InternalServerErrorException('Failed to perform daily reset');\n    }\n  }\n\n  @Get('admin/pending-count')\n  @UseGuards(JwtAuthGuard)\n  async getTodayPendingCount() {\n    const count = await this.queueSchedulerService.getTodayPendingCount();\n    return {\n      pendingCount: count,\n      date: new Date().toDateString(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_guest', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n\n  @Column({ name: 'is_guest', default: false })\n  isGuest: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueueUpdates\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueueUpdates\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueueUpdates(client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('join_queue_updates')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@WebSocketGateway({\n  cors: {\n    origin: process.env.WS_CORS_ORIGIN || 'http://localhost:5173',\n    methods: ['GET', 'POST'],\n    credentials: true,\n    allowedHeaders: ['Content-Type', 'Authorization'],\n  },\n  namespace: 'socket.io', // Add this to match client expectation\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n    this.logger.log(`CORS origin configured: ${this.configService.get('WS_CORS_ORIGIN')}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  @SubscribeMessage('join_queue_updates')\n  async handleJoinQueueUpdates(client: Socket) {\n    this.logger.log(`Socket ${client.id} joined queue updates`);\n    await client.join('queue_updates');\n    return { event: 'joined', data: 'Successfully joined queue updates' };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                        \n                            QueuesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueuesController } from './queues.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { QueueSchedulerService } from './queue-scheduler.service';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Queue, QueueDetails, Counter]),\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [QueueController, QueuesController],\n  providers: [QueueService, QueueGateway, QueueSchedulerService],\n  exports: [QueueService, QueueGateway, QueueSchedulerService],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueSchedulerService.html":{"url":"injectables/QueueSchedulerService.html","title":"injectable - QueueSchedulerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueSchedulerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue-scheduler.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isResetInProgress\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTodayPendingCount\n                            \n                            \n                                    \n                                    Async\n                                handleDailyQueueReset\n                            \n                            \n                                    Private\n                                    Async\n                                logDailyStatistics\n                            \n                            \n                                    Async\n                                manualDailyReset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTodayPendingCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodayPendingCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:152\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleDailyQueueReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDailyQueueReset()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('59 23 * * *', {name: 'daily-queue-reset', timeZone: 'Asia/Manila'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        logDailyStatistics\n                        \n                    \n                \n            \n            \n                \n                        \n                    logDailyStatistics(startOfDay: Date, endOfDay: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        manualDailyReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    manualDailyReset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isResetInProgress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueSchedulerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueSchedulerService {\n  private readonly logger = new Logger(QueueSchedulerService.name);\n  private isResetInProgress = false; \n\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    private queueGateway: QueueGateway,\n  ) {}\n\n  // Run every day at 11:59 PM (23:59)\n  @Cron('59 23 * * *', {\n    name: 'daily-queue-reset',\n    timeZone: 'Asia/Manila',\n  })\n  async handleDailyQueueReset() {\n    // ✅ FIXED: Prevent concurrent execution\n    if (this.isResetInProgress) {\n      this.logger.warn('🚫 Daily reset already in progress, skipping...');\n      return;\n    }\n\n    this.isResetInProgress = true;\n    this.logger.log('🔄 Starting daily queue reset process...');\n\n    try {\n      // ✅ FIXED: Better timezone handling\n      const today = new Date();\n      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n      const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59, 999);\n\n      this.logger.log(`🗓️ Searching for queues between: ${startOfDay.toISOString()} and ${endOfDay.toISOString()}`);\n\n      // Get all pending queues created today\n      const pendingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.PENDING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      this.logger.log(`📋 Found ${pendingQueues.length} pending queues to cancel`);\n\n      if (pendingQueues.length > 0) {\n        // Mark all pending queues as cancelled\n        const cancelledQueues = await this.queueRepository.save(\n          pendingQueues.map(queue => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          }))\n        );\n\n        this.logger.log(`❌ Cancelled ${cancelledQueues.length} pending queues`);\n\n        // Notify clients about cancellations\n        for (const queue of cancelledQueues) {\n          this.queueGateway.notifyQueueUpdate(queue.id, {\n            action: 'cancelled',\n            reason: 'End of day auto-cancellation',\n            queue: queue,\n          });\n        }\n\n        // Send general notification\n        this.queueGateway.server.emit('dailyQueueReset', {\n          cancelledCount: cancelledQueues.length,\n          timestamp: new Date(),\n          message: 'Daily queue reset completed. All pending queues have been cancelled.',\n        });\n      }\n\n      // Also cancel any serving queues\n      const servingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.SERVING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      if (servingQueues.length > 0) {\n        const cancelledServingQueues = await this.queueRepository.save(\n          servingQueues.map(queue => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          }))\n        );\n\n        this.logger.log(`❌ Cancelled ${cancelledServingQueues.length} serving queues`);\n      }\n\n      this.logger.log('✅ Daily queue reset completed successfully');\n      await this.logDailyStatistics(startOfDay, endOfDay);\n\n    } catch (error) {\n      this.logger.error('❌ Error during daily queue reset:', error);\n      throw error; // ✅ FIXED: Propagate error for proper handling\n    } finally {\n      this.isResetInProgress = false; // ✅ FIXED: Always reset flag\n    }\n  }\n\n  // Optional: Log daily statistics\n  private async logDailyStatistics(startOfDay: Date, endOfDay: Date) {\n    try {\n      const [completed, cancelled, total] = await Promise.all([\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.COMPLETED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.CANCELLED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n      ]);\n\n      this.logger.log(`📊 Daily Statistics for ${startOfDay.toDateString()}:`);\n      this.logger.log(`   Total Queues: ${total}`);\n      this.logger.log(`   Completed: ${completed}`);\n      this.logger.log(`   Cancelled: ${cancelled}`);\n      this.logger.log(`   Completion Rate: ${total > 0 ? ((completed / total) * 100).toFixed(1) : 0}%`);\n    } catch (error) {\n      this.logger.error('Error logging daily statistics:', error);\n    }\n  }\n\n  // Manual trigger for testing or admin use\n  async manualDailyReset() {\n    this.logger.log('🔄 Manual daily queue reset triggered');\n    return await this.handleDailyQueueReset(); // ✅ FIXED: Return result\n  }\n\n  // Get pending queues count for today\n  async getTodayPendingCount(): Promise {\n    const today = new Date();\n    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59, 999);\n\n    return await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: Between(startOfDay, endOfDay),\n      },\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCounter\n                            \n                            \n                                    Async\n                                callNext\n                            \n                            \n                                    Async\n                                checkExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByQueueNumber\n                            \n                            \n                                    Async\n                                findByStatus\n                            \n                            \n                                    Async\n                                findByStatusWithDetails\n                            \n                            \n                                    Async\n                                findByUserIdWithDetails\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCounters\n                            \n                            \n                                    Async\n                                getDetailsForMultipleQueues\n                            \n                            \n                                    Async\n                                getQueueDetails\n                            \n                            \n                                    Async\n                                getQueuePosition\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueDetailsRepository: Repository, counterRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueDetailsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        counterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:475\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:358\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkExists(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:488\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatusWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatusWithDetails(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:304\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUserIdWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserIdWithDetails(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:495\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:481\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDetailsForMultipleQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDetailsForMultipleQueues(queueIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:269\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:428\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateQueueDto: UpdateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual, LessThan, In, Between } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport {\n  Counter,\n  //CounterStatus, //Uncomment if you need to use CounterStatus\n} from '../counter/entities/counter.entity';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    @InjectRepository(QueueDetails)\n    private queueDetailsRepository: Repository,\n    @InjectRepository(Counter)\n    private counterRepository: Repository,\n    @Inject(forwardRef(() => QueueGateway))\n    private queueGateway: QueueGateway,\n  ) {}\n\n  async create(createQueueDto: CreateQueueDto) {\n    // Generate a queue number based on date and sequence\n    const today = new Date();\n    const dateStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;\n\n    // Get the start and end of today for accurate daily counting\n    const todayStart = new Date(today);\n    todayStart.setHours(0, 0, 0, 0);\n    \n    const todayEnd = new Date(today);\n    todayEnd.setHours(23, 59, 59, 999);\n\n    // Count ONLY queues created TODAY (this will reset to 0 each day)\n    const todayCount = await this.queueRepository.count({\n      where: {\n        createdAt: Between(todayStart, todayEnd),\n      },\n    });\n\n    // Format the queue number: YYYYMMDD-XXX (using 3 digits for daily sequence)\n    // This keeps your existing backend format but ensures daily reset\n    const queueNumber = `${dateStr}-${String(todayCount + 1).padStart(3, '0')}`;\n\n    console.log(`Creating queue number: ${queueNumber} for today. Daily count: ${todayCount + 1}`);\n\n    // Create and save the queue\n    const queue = this.queueRepository.create({\n      queueNumber,\n      status: QueueStatus.PENDING,\n      estimatedWaitTime: 15 * (todayCount + 1), // Simple estimation: 15 minutes per person\n    });\n\n    const savedQueue = await this.queueRepository.save(queue);\n\n    // Simplify the user ID handling\n    const userId =\n      typeof createQueueDto.userId === 'number'\n        ? createQueueDto.userId\n        : typeof createQueueDto.userId === 'string' &&\n            createQueueDto.userId !== 'guest'\n          ? Number(createQueueDto.userId)\n          : undefined;\n\n    // isGuest is already a boolean from the DTO validation\n    const isGuest = createQueueDto.isGuest ?? !userId;\n\n    // Log for debugging\n    console.log('=== QUEUE SERVICE CREATE DEBUG ===');\n    console.log('Creating queue details with:', {\n      providedUserId: createQueueDto.userId,\n      parsedUserId: userId,\n      providedIsGuest: createQueueDto.isGuest,\n      finalIsGuest: isGuest,\n    });\n\n    // Create queue details\n    const queueDetails = this.queueDetailsRepository.create({\n      queueId: savedQueue.id,\n      userId: userId,\n      firstName: createQueueDto.firstName,\n      lastName: createQueueDto.lastName,\n      middleInitial: createQueueDto.middleInitial,\n      address: createQueueDto.address,\n      phoneNumber: createQueueDto.phoneNumber,\n      reasonOfVisit: createQueueDto.reasonOfVisit,\n      appointmentType: createQueueDto.appointmentType,\n      isGuest: isGuest,\n    });\n\n    // Set the queue relation\n    queueDetails.queue = savedQueue;\n\n    const savedDetails = await this.queueDetailsRepository.save(queueDetails);\n\n    console.log('Queue details saved with isGuest:', savedDetails.isGuest);\n\n    // Get queue position\n    const position = await this.getQueuePosition(savedQueue.id);\n\n    const result = { queue: savedQueue, details: savedDetails, position };\n\n    // Notify all clients that a new queue has been created\n    this.queueGateway.server.emit('queueListUpdate', {\n      action: 'created',\n      queueId: savedQueue.id,\n    });\n\n    return result;\n  }\n\n  async findAll() {\n    return await this.queueRepository.find({\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findByStatus(status: QueueStatus) {\n    return await this.queueRepository.find({\n      where: { status },\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findOne(id: number) {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${id} not found`);\n    }\n\n    return queue;\n  }\n\n  async findByQueueNumber(queueNumber: string) {\n    const queue = await this.queueRepository.findOne({\n      where: { queueNumber },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${queueNumber} not found`);\n    }\n\n    return queue;\n  }\n\n  async getQueueDetails(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId },\n      relations: ['user'],\n    });\n\n    if (!details) {\n      throw new NotFoundException(`Details for queue #${queueId} not found`);\n    }\n\n    const position = await this.getQueuePosition(queueId);\n\n    return { queue, details, position };\n  }\n  async update(id: number, updateQueueDto: UpdateQueueDto) {\n    console.log(`Updating queue ${id} with:`, updateQueueDto);\n\n    try {\n      // Find the queue\n      const queue = await this.findOne(id);\n      console.log('Found queue:', queue);\n\n      if (updateQueueDto.status) {\n        // Log the status change\n        console.log(\n          `Changing status from ${queue.status} to ${updateQueueDto.status}`,\n        );\n        queue.status = updateQueueDto.status;\n\n        // If completed, set completion time\n        if (updateQueueDto.status === QueueStatus.COMPLETED) {\n          queue.completedAt = new Date();\n        }\n      }\n\n      if (updateQueueDto.counterNumber) {\n        queue.counterNumber = updateQueueDto.counterNumber;\n      }\n\n      // Save the updated queue\n      const updatedQueue = await this.queueRepository.save(queue);\n      console.log('Queue updated successfully:', updatedQueue);\n\n      // Notify clients about the queue update\n      this.queueGateway.notifyQueueUpdate(id, {\n        action: 'updated',\n        queue: updatedQueue,\n      });\n\n      return updatedQueue;\n    } catch (error) {\n      console.error(`Error updating queue ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getQueuePosition(queueId: number) {\n    console.log(`Getting position for queue ID: ${queueId}`);\n\n    const queue = await this.findOne(queueId);\n    console.log(`Found queue:`, queue);\n\n    // If the queue doesn't exist, return position 0\n    if (!queue) {\n      console.log('Queue not found');\n      return { position: 0 };\n    }\n\n    // If the queue is not pending, return special position values\n    if (queue.status === QueueStatus.SERVING) {\n      console.log('Queue is currently being served');\n      return { position: 0, status: 'serving' };\n    }\n\n    if (queue.status === QueueStatus.COMPLETED) {\n      console.log('Queue is completed');\n      return { position: 0, status: 'completed' };\n    }\n\n    if (queue.status !== QueueStatus.PENDING) {\n      console.log(`Queue status is ${queue.status}, not pending`);\n      return { position: 0, status: queue.status };\n    }\n\n    // Count serving queues (they are ahead of all pending queues)\n    const servingCount = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.SERVING,\n      },\n    });\n    console.log(`Serving queues count: ${servingCount}`);\n\n    // Count how many pending queues are ahead of this one (created earlier)\n    const pendingAheadCount = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: LessThan(queue.createdAt), // Queues created before this one\n      },\n    });\n    console.log(`Pending queues ahead: ${pendingAheadCount}`);\n\n    // Total position = serving queues + pending queues ahead + 1\n    const position = servingCount + pendingAheadCount + 1;\n    console.log(`Calculated position: ${position}`);\n\n    return { position, status: 'pending' };\n  }\n  async getDetailsForMultipleQueues(queueIds: number[]) {\n    console.log('Getting details for queue IDs:', queueIds);\n\n    if (!queueIds || queueIds.length === 0) {\n      return {};\n    }\n\n    const detailsMap = {};\n\n    try {\n      // Fetch all queue details in a single query for better performance\n      const allDetails = await this.queueDetailsRepository.find({\n        where: {\n          queueId: In(queueIds),\n        },\n        relations: ['user'],\n      });\n\n      console.log(\n        `Found ${allDetails.length} details for ${queueIds.length} queues`,\n      );\n\n      // Organize by queueId for easy lookup\n      allDetails.forEach((detail) => {\n        detailsMap[detail.queueId] = detail;\n      });\n\n      return detailsMap;\n    } catch (error: unknown) {\n      console.error('Error fetching details for multiple queues:', error);\n      // Return empty details rather than failing\n      return {};\n    }\n  }\n\n  async findByStatusWithDetails(status: QueueStatus) {\n    console.log(`Finding queues with status: ${status} and their details`);\n\n    try {\n      // First get all queues with this status\n      const queues = await this.queueRepository.find({\n        where: { status },\n        order: { createdAt: 'ASC' },\n      });\n\n      console.log(`Found ${queues.length} queues with status ${status}`);\n\n      if (queues.length === 0) {\n        return [];\n      }\n\n      // Get all queue IDs\n      const queueIds = queues.map((queue) => queue.id);\n\n      // Fetch details for all these queues\n      const detailsMap = await this.getDetailsForMultipleQueues(queueIds);\n\n      // Combine queue and details data\n      const result = queues.map((queue) => {\n        return {\n          ...queue,\n          details: detailsMap[queue.id] || null,\n        };\n      });\n\n      console.log(`Returning ${result.length} queues with details`);\n      return result;\n    } catch (error: unknown) {\n      // Handle error message extraction without triggering ESLint\n      let errorMessage: string;\n\n      if (error instanceof Error) {\n        errorMessage = error.message;\n      } else {\n        errorMessage = String(error);\n      }\n\n      console.error('Error in findByStatusWithDetails:', errorMessage);\n\n      if (error instanceof Error) {\n        throw new Error(`Failed to get queue details: ${error.message}`);\n      }\n      if (typeof error === 'string') {\n        throw new Error(`Failed to get queue details: ${error}`);\n      }\n      throw new Error('Failed to get queue details: An unknown error occurred');\n    }\n  }\n\n  async callNext(counterId: number) {\n    const counter = await this.counterRepository.findOne({\n      where: { id: counterId },\n      relations: ['currentQueue'],\n    });\n\n    if (!counter) {\n      throw new NotFoundException(`Counter #${counterId} not found`);\n    }\n\n    // Mark current queue as completed if exists\n    if (counter.currentQueue) {\n      counter.currentQueue.status = QueueStatus.COMPLETED;\n      counter.currentQueue.completedAt = new Date();\n      await this.queueRepository.save(counter.currentQueue);\n    }\n\n    // Find the next pending queue\n    const nextQueue = await this.queueRepository.findOne({\n      where: { status: QueueStatus.PENDING },\n      order: { createdAt: 'ASC' },\n    });\n\n    if (!nextQueue) {\n      counter.currentQueueId = null;\n      counter.currentQueue = null;\n      await this.counterRepository.save(counter);\n      return { counter, message: 'No more queues waiting' };\n    }\n\n    // Update the next queue\n    nextQueue.status = QueueStatus.SERVING;\n    nextQueue.counterNumber = counter.name;\n    await this.queueRepository.save(nextQueue);\n\n    // Update counter\n    counter.currentQueueId = nextQueue.id;\n    counter.currentQueue = nextQueue;\n    await this.counterRepository.save(counter);\n\n    // Get associated details\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId: nextQueue.id },\n    });\n\n    const result = {\n      counter,\n      queue: nextQueue,\n      details,\n      message: 'Next queue called successfully',\n    };\n\n    if (nextQueue) {\n      // Notify the specific queue room that it's their turn\n      this.queueGateway.notifyQueueUpdate(nextQueue.id, {\n        action: 'called',\n        counterName: counter.name,\n        counterId: counter.id,\n      });\n    }\n\n    // Notify counter clients\n    this.queueGateway.notifyCounterUpdate(counterId, {\n      action: 'nextCalled',\n      ...result,\n    });\n\n    return result;\n  }\n\n  async getStats() {\n    const [\n      pendingCount,\n      servingCount,\n      completedCount,\n      cancelledCount,\n      totalCount,\n    ] = await Promise.all([\n      this.queueRepository.count({ where: { status: QueueStatus.PENDING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.SERVING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.COMPLETED } }),\n      this.queueRepository.count({ where: { status: QueueStatus.CANCELLED } }),\n      this.queueRepository.count(),\n    ]);\n\n    // Calculate average wait time\n    const completedQueues = await this.queueRepository.find({\n      where: {\n        status: QueueStatus.COMPLETED,\n        completedAt: LessThanOrEqual(new Date()),\n      },\n      select: ['createdAt', 'completedAt'],\n    });\n\n    let averageWaitTime = 0;\n    if (completedQueues.length > 0) {\n      const totalWaitTimeMs = completedQueues.reduce((total, queue) => {\n        return (\n          total + (queue.completedAt.getTime() - queue.createdAt.getTime())\n        );\n      }, 0);\n      averageWaitTime = Math.floor(\n        totalWaitTimeMs / completedQueues.length / 60000,\n      ); // Convert to minutes\n    }\n\n    return {\n      pending: pendingCount,\n      serving: servingCount,\n      completed: completedCount,\n      cancelled: cancelledCount,\n      total: totalCount,\n      averageWaitTime,\n    };\n  }\n\n  // Add a counter\n  async addCounter(name: string) {\n    const counter = this.counterRepository.create({ name });\n    return await this.counterRepository.save(counter);\n  }\n\n  // Get all counters\n  async getCounters() {\n    return await this.counterRepository.find({\n      relations: ['currentQueue'],\n    });\n  }\n\n  // Check if queue exists\n  async checkExists(id: number): Promise {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n    return !!queue;\n  }\n\n  async findByUserIdWithDetails(userId: string) {\n    // Convert string userId to number since the database expects a number\n    const userIdNumber = parseInt(userId, 10);\n\n    if (isNaN(userIdNumber)) {\n      console.error('Invalid userId provided:', userId);\n      return [];\n    }\n\n    // First, let's find the user's queue details that contain the userId\n    const userDetails = await this.queueDetailsRepository.find({\n      where: {\n        userId: userIdNumber,\n      },\n      relations: ['queue'],\n    });\n\n    // Extract queue IDs from the details\n    const queueIds = userDetails.map((detail) => detail.queue.id);\n\n    if (queueIds.length === 0) {\n      return [];\n    }\n\n    // Find ALL queues (including completed ones) but filter them in the frontend\n    // Change this to include completed queues temporarily so we can clear them\n    return await this.queueRepository.find({\n      where: {\n        id: In(queueIds),\n        // Remove status filter to get all queues including completed ones\n      },\n      relations: ['details'],\n      order: { createdAt: 'ASC' },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueuesController.html":{"url":"controllers/QueuesController.html","title":"controller - QueuesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueuesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queues.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getQueueById\n                            \n                            \n                                    \n                                    Async\n                                getUserQueues\n                            \n                            \n                                    \n                                    Async\n                                getWalkInQueues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getQueueById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserQueues(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getWalkInQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWalkInQueues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('walk-in')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { QueueStatus } from './entities/queue.entity';\n\ninterface QueueDetails {\n  firstName?: string;\n  lastName?: string;\n  middleInitial?: string;\n  reasonOfVisit?: string;\n  address?: string;\n  phoneNumber?: string;\n}\n\n@Controller('queues')\nexport class QueuesController {\n  constructor(private readonly queueService: QueueService) {}\n  // This endpoint is for supporting the legacy API path that the frontend is using\n  @Get('walk-in')\n  async getWalkInQueues() {\n    console.log('GET /queues/walk-in endpoint called');\n    try {\n      // Get both pending and serving queues with details using the service methods\n      const [pendingQueuesWithDetails, servingQueuesWithDetails] =\n        await Promise.all([\n          this.queueService.findByStatusWithDetails(QueueStatus.PENDING),\n          this.queueService.findByStatusWithDetails(QueueStatus.SERVING),\n        ]);\n\n      console.log('Found pending queues:', pendingQueuesWithDetails.length);\n      console.log('Found serving queues:', servingQueuesWithDetails.length);\n\n      // Combine all queues\n      const allQueues = [\n        ...pendingQueuesWithDetails,\n        ...servingQueuesWithDetails,\n      ];\n\n      // Extract details from the nested structure and flatten them for the frontend\n      const result = allQueues.map((queue) => {\n        // For debugging\n        console.log('Processing queue:', queue.id, 'status:', queue.status);\n\n        // Handle potential null/undefined details\n        const details: QueueDetails | null = Array.isArray(queue.details)\n          ? (queue.details[0] as QueueDetails)\n          : (queue.details as QueueDetails);\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          estimatedWaitTime: queue.estimatedWaitTime,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          middleInitial: details?.middleInitial || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n          address: details?.address || null,\n          phoneNumber: details?.phoneNumber || null,\n        };\n      });\n\n      console.log(`Returning ${result.length} walk-in queues`);\n      return result;\n    } catch (err: unknown) {\n      console.error('Error fetching walk-in queues:', err);\n      throw err;\n    }\n  }\n\n  @Get('user/:userId')\n  async getUserQueues(@Param('userId') userId: string) {\n    console.log('GET /queues/user/' + userId + ' endpoint called');\n    try {\n      // Find queues for the specific user that are not completed\n      const userQueues =\n        await this.queueService.findByUserIdWithDetails(userId);\n\n      console.log('Found user queues:', userQueues.length);\n\n      const result = userQueues.map((queue) => {\n        const details = Array.isArray(queue.details)\n          ? queue.details[0]\n          : queue.details;\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n        };\n      });\n\n      return result;\n    } catch (err) {\n      console.error('Error fetching user queues:', err);\n      throw err;\n    }\n  }\n\n  @Get(':id')\n  async getQueueById(@Param('id') id: string) {\n    console.log('GET /queues/' + id + ' endpoint called');\n    try {\n      const queueId = parseInt(id, 10);\n      if (isNaN(queueId)) {\n        throw new Error('Invalid queue ID');\n      }\n\n      const queue = await this.queueService.findOne(queueId);\n\n      if (!queue) {\n        throw new Error('Queue not found');\n      }\n\n      const details = Array.isArray(queue.details)\n        ? queue.details[0]\n        : queue.details;\n\n      return {\n        id: queue.id,\n        queueNumber: queue.queueNumber,\n        status: queue.status,\n        counterNumber: queue.counterNumber,\n        createdAt: queue.createdAt,\n        completedAt: queue.completedAt,\n        firstName: details?.firstName || null,\n        lastName: details?.lastName || null,\n        reasonOfVisit: details?.reasonOfVisit || null,\n      };\n    } catch (err) {\n      console.error('Error fetching queue:', err);\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User middle name (optional)', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Full name (auto-generated)', example: 'John Robert Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for login', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\n\nexport class RegisterDto {\n  @ApiProperty({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Username for login',\n    example: 'john_doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    description: 'User middle name (optional)',\n    example: 'Robert',\n  })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    description: 'Full name (auto-generated)',\n    example: 'John Robert Doe',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  contactNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport { AuthenticatedUser } from './jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\n\ninterface RequestWithUser extends Request {\n  user: AuthenticatedUser;\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.id));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.id),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.id),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/decorators/user.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { AuthenticatedUser } from '../jwt.strategy';\n\ninterface RequestWithUser {\n  user: AuthenticatedUser;\n}\n\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-2.html":{"url":"interfaces/RequestWithUser-2.html","title":"interface - RequestWithUser-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles using In operator (replaces deprecated findByIds)\n    const roles = await this.rolesRepository.findBy({\n      id: In(roleIds),\n    });\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnnouncementDto.html":{"url":"classes/UpdateAnnouncementDto.html","title":"class - UpdateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/update-announcement.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAnnouncementDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnnouncementDto } from './create-announcement.dto';\n\nexport class UpdateAnnouncementDto extends PartialType(CreateAnnouncementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAppointmentDto.html":{"url":"classes/UpdateAppointmentDto.html","title":"class - UpdateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/update-appointment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAppointmentDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/update-appointment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsOptional, IsEnum } from 'class-validator';\nimport { CreateAppointmentDto } from './create-appointment.dto';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class UpdateAppointmentDto extends PartialType(CreateAppointmentDto) {\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDocumentApplicationDto.html":{"url":"classes/UpdateDocumentApplicationDto.html","title":"class - UpdateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/update-document-application.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  CreateDocumentApplicationDto,\n)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationStatus, description: 'Application status', example: undefined, required: false})@IsOptional()@IsEnum(ApplicationStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status message', example: 'Application approved and ready for pickup', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateDocumentApplicationDto } from './create-document-application.dto';\nimport { IsEnum, IsOptional, IsString } from 'class-validator';\nimport { ApplicationStatus } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateDocumentApplicationDto extends PartialType(\n  CreateDocumentApplicationDto,\n) {\n  @ApiProperty({\n    enum: ApplicationStatus,\n    description: 'Application status',\n    example: ApplicationStatus.APPROVED,\n    required: false,\n  })\n  @IsOptional()\n  @IsEnum(ApplicationStatus)\n  status?: ApplicationStatus;\n\n  @ApiProperty({\n    description: 'Status message',\n    example: 'Application approved and ready for pickup',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating user information (citizen)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserStatusDto.html":{"url":"classes/UpdateUserStatusDto.html","title":"class - UpdateUserStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-status.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                isActive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-status.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean } from 'class-validator';\n\nexport class UpdateUserStatusDto {\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  @IsBoolean()\n  isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_active', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @Column({ name: 'is_active', default: true })\n  isActive: boolean;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDto.html":{"url":"classes/UserQueryDto.html","title":"class - UserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 10, description: 'Number of items per page', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 1, description: 'Page number', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'citizen', description: 'Filter by role'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'john', description: 'Search term for name, email, or username'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsNumber, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class UserQueryDto {\n  @ApiPropertyOptional({\n    example: 1,\n    description: 'Page number',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number = 1;\n\n  @ApiPropertyOptional({\n    example: 10,\n    description: 'Number of items per page',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    example: 'john',\n    description: 'Search term for name, email, or username',\n  })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @ApiPropertyOptional({\n    example: 'citizen',\n    description: 'Filter by role',\n  })\n  @IsOptional()\n  @IsString()\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponseDto.html":{"url":"classes/UserResponseDto.html","title":"class - UserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+639123456789', description: 'Contact number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User creation date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Default role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'User ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Miguel Doe', description: 'Full name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'User roles', type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User last update date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class UserResponseDto {\n  @ApiProperty({\n    example: 1,\n    description: 'User ID',\n  })\n  id: number;\n\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username',\n  })\n  username?: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name',\n  })\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  lastName: string;\n\n  @ApiProperty({\n    example: 'John Miguel Doe',\n    description: 'Full name',\n  })\n  name: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension',\n  })\n  nameExtension?: string;\n\n  @ApiProperty({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  contactNumber: string;\n\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  isActive: boolean;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User creation date',\n  })\n  createdAt: Date;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User last update date',\n  })\n  updatedAt: Date;\n\n  @ApiProperty({\n    example: ['citizen', 'staff'],\n    description: 'User roles',\n    type: [String],\n  })\n  roles: string[];\n\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Default role name',\n  })\n  defaultRole: string;\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID',\n  })\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserStats.html":{"url":"interfaces/UserStats.html","title":"interface - UserStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            activeUsers\n                                        \n                                \n                                \n                                        \n                                            inactiveUsers\n                                        \n                                \n                                \n                                        \n                                            recentUsers\n                                        \n                                \n                                \n                                        \n                                            totalUsers\n                                        \n                                \n                                \n                                        \n                                            usersByRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        activeUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inactiveUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recentUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        recentUsers:         Omit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Omit[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usersByRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        usersByRole:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserStatsResponseDto.html":{"url":"classes/UserStatsResponseDto.html","title":"class - UserStatsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserStatsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activeUsers\n                            \n                            \n                                    \n                                inactiveUsers\n                            \n                            \n                                    \n                                recentUsers\n                            \n                            \n                                    \n                                totalUsers\n                            \n                            \n                                    \n                                usersByRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 85, description: 'Number of active users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        inactiveUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 15, description: 'Number of inactive users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recentUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Recently created users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usersByRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersByRoleDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'User count by role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersByRoleDto.html":{"url":"classes/UsersByRoleDto.html","title":"class - UsersByRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersByRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                            \n                                    \n                                roleName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 25, description: 'Number of users with this role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminCreateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminCreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminCreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('admin-create')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Admin creates user with role assignment'})@ApiResponse({status: 201, description: 'User created successfully', type: UserResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: UserQueryDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all users (Admin only)'})@ApiResponse({status: 200, description: 'Users retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user by ID (Admin only)'})@ApiResponse({status: 200, description: 'User found'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiOperation({summary: 'Get current user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user statistics (Admin only)'})@ApiResponse({status: 200, description: 'Statistics retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Delete user (Admin only)'})@ApiResponse({status: 200, description: 'User deleted successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: AdminUpdateUserDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user (Admin only)'})@ApiResponse({status: 200, description: 'User updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, updateStatusDto: UpdateUserStatusDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user status (Admin only)'})@ApiResponse({status: 200, description: 'User status updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateStatusDto\n                                            \n                                                            UpdateUserStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { UpdateUserStatusDto } from './dto/update-user-status.dto';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { AuthenticatedUser } from '../auth/jwt.strategy';\nimport * as bcrypt from 'bcrypt';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserResponseDto } from './dto/user-response.dto';\n\n@ApiTags('users')\n@Controller('users')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all users (Admin only)' })\n  @ApiResponse({ status: 200, description: 'Users retrieved successfully' })\n  async findAll(\n    @Query() query: UserQueryDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    const { page = 1, limit = 10, search, role } = query;\n    return this.usersService.findAll({ page, limit, search, role });\n  }\n\n  @Get('profile')\n  @ApiOperation({ summary: 'Get current user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  async getProfile(@Request() req: { user: AuthenticatedUser }) {\n    return this.usersService.findOne(req.user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user statistics (Admin only)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Statistics retrieved successfully',\n  })\n  async getStats() {\n    return this.usersService.getStats();\n  }\n\n  @Get(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user by ID (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User found' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async findOne(\n    @Param('id') id: string,\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    // Allow users to view their own profile\n    const userId = +id;\n    const currentUser = req.user;\n\n    if (\n      userId === currentUser.id ||\n      currentUser.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      )\n    ) {\n      return this.usersService.findOne(userId);\n    }\n\n    throw new Error('Unauthorized');\n  }\n\n  @Patch(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.adminUpdate(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Delete user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async remove(\n    @Param('id') id: string,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.remove(+id);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user status (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User status updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() updateStatusDto: UpdateUserStatusDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.updateStatus(+id, updateStatusDto.isActive);\n  }\n\n  @Post('admin-create')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Admin creates user with role assignment' })\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully',\n    type: UserResponseDto,\n  })\n  async adminCreateUser(\n    @Body() createUserDto: CreateUserDto,\n  ): Promise {\n    try {\n      // Hash password\n      const salt = await bcrypt.genSalt();\n      const hashedPassword = await bcrypt.hash(createUserDto.password, salt);\n\n      // Create user with hashed password\n      const userWithHashedPassword = {\n        ...createUserDto,\n        password: hashedPassword,\n      };\n\n      const user = await this.usersService.create(userWithHashedPassword);\n\n      // Return user without password\n\n      const { password, ...userWithoutPassword } = user;\n\n      // Get user with roles for response\n\n      const userWithRoles = await this.usersService.findOne(user.id);\n\n      return userWithRoles;\n    } catch (error) {\n      console.error('Error in admin create user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User } from './entities/user.entity';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), RolesModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService, TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdate(id: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:287\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options: FindAllOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            FindAllOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:273\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:280\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:230\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:210\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:220\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            AuthenticatedUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            testMinIOConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.controller.ts\n            \n            controller\n            AnnouncementController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.service.ts\n            \n            injectable\n            AnnouncementService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/create-announcement.dto.ts\n            \n            class\n            CreateAnnouncementDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/update-announcement.dto.ts\n            \n            class\n            UpdateAnnouncementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/entities/announcement.entity.ts\n            \n            entity\n            Announcement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.controller.ts\n            \n            controller\n            AppointmentController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.service.ts\n            \n            injectable\n            AppointmentService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/create-appointment.dto.ts\n            \n            class\n            CreateAppointmentDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/update-appointment.dto.ts\n            \n            class\n            UpdateAppointmentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/appointment/entities/appointment.entity.ts\n            \n            entity\n            Appointment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.controller.ts\n            \n            controller\n            DocumentApplicationsController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.service.ts\n            \n            injectable\n            DocumentApplicationsService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/create-document-application.dto.ts\n            \n            class\n            CreateDocumentApplicationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/update-document-application.dto.ts\n            \n            class\n            UpdateDocumentApplicationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            entity\n            ApplicationStatusHistory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            class\n            ApplicationStatusHistory\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            entity\n            DocumentApplication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            class\n            DocumentApplication\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            entity\n            DocumentFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            class\n            DocumentFile\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/document-applications/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue-scheduler.service.ts\n            \n            injectable\n            QueueSchedulerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            controller\n            QueuesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            interface\n            QueueDetails\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/dto/paginated-users-response.dto.ts\n            \n            class\n            PaginatedUsersResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-status.dto.ts\n            \n            class\n            UpdateUserStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/user-query.dto.ts\n            \n            class\n            UserQueryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/user-response.dto.ts\n            \n            class\n            UserResponseDto\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UsersByRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UserStatsResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            FindAllOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            UserStats\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            date-fns : ^4.1.0\n        \n            dotenv : ^16.5.0\n        \n            minio : ^8.0.5\n        \n            multer : ^2.0.0\n        \n            mysql2 : ^3.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApplicationStatus   (src/.../document-application.entity.ts)\n                        \n                        \n                            ApplicationType   (src/.../document-application.entity.ts)\n                        \n                        \n                            AppointmentStatus   (src/.../appointment.entity.ts)\n                        \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/document-applications/entities/document-application.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ApplicationStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : Pending\n                            \n                        \n                        \n                            \n                                 PROCESSING\n                            \n                        \n                        \n                            \n                                Value : Processing\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : Approved\n                            \n                        \n                        \n                            \n                                 REJECTED\n                            \n                        \n                        \n                            \n                                Value : Rejected\n                            \n                        \n                        \n                            \n                                 DECLINE\n                            \n                        \n                        \n                            \n                                Value : Decline\n                            \n                        \n                        \n                            \n                                 READY_FOR_PICKUP\n                            \n                        \n                        \n                            \n                                Value : Ready for Pickup\n                            \n                        \n                        \n                            \n                                 REQUIRES_ADDITIONAL_INFO\n                            \n                        \n                        \n                            \n                                Value : Requires Additional Info\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ApplicationType\n                    \n                \n                        \n                            \n                                 BIRTH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Birth Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Marriage Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_LICENSE\n                            \n                        \n                        \n                            \n                                Value : Marriage License\n                            \n                        \n                        \n                            \n                                 DEATH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Death Certificate\n                            \n                        \n                        \n                            \n                                 BUSINESS_PERMIT\n                            \n                        \n                        \n                            \n                                Value : Business Permit\n                            \n                        \n            \n        \n\n    src/modules/appointment/entities/appointment.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        AppointmentStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                        \n                            testMinIOConnection   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testMinIOConnection\n                        \n                    \n                \n            \n            \n                \ntestMinIOConnection()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnnouncementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppointmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentApplicationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\n\n\nMinioService \n\nMinioService \n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    23 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
