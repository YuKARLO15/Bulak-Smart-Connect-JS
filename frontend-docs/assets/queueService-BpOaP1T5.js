import{a as s}from"./index-xsH4HHeE.js";import{a as u}from"./api-DR_qaoiX.js";const o="http://localhost:3000",l={fetchWalkInQueues:async()=>{try{console.log(`Making request to: ${o}/queues/walk-in`);const e=await s.get(`${o}/queues/walk-in`);return console.log("Walk-in queues API response:",e.data),e.data}catch(e){throw console.error("API error getting walk-in queues:",e),e}},fetchCurrentQueues:async()=>{try{console.log(`Making request to: ${o}/queue/serving`);const e=await s.get(`${o}/queue/serving`);return console.log("Current queues API response:",e.data),e.data}catch(e){throw console.error("API error getting current queues:",e),e}},fetchPendingQueues:async()=>(await s.get(`${o}/queue/pending`)).data,getQueuePosition:async e=>{try{console.log(`Making request to: ${o}/queue/${e}/position`);const t=await s.get(`${o}/queue/${e}/position`);return console.log("Position API response:",t.data),t.data}catch(t){throw console.error("API error getting position:",t),t}},createQueue:async e=>{try{console.log("Creating queue with data:",e);const t=localStorage.getItem("token");console.log("Token being used:",t?"Valid token present":"No token");const n=await u.post("/queue",e);return console.log("Queue creation response:",n.data),n.data}catch(t){throw console.error("Error creating queue:",t),t}},checkQueueExists:async e=>{try{return(await s.get(`${o}/queue/${e}/exists`)).data.exists}catch(t){return console.error("Error checking if queue exists:",t),!1}},fetchQueueDetails:async e=>{try{console.log(`Making request to: ${o}/queue/${e}/details`);const t=await s.get(`${o}/queue/${e}/details`);return console.log(`Details for queue ${e}:`,t.data),t.data}catch(t){throw console.error(`Error fetching details for queue ${e}:`,t),t}},fetchPendingQueuesWithDetails:async()=>{try{console.log(`Making request to: ${o}/queue/pending/details`);const e=await s.get(`${o}/queue/pending/details`);return console.log("Pending queues with details:",e.data),e.data}catch(e){throw console.error("Error fetching pending queues with details:",e),e}},fetchCurrentQueuesWithDetails:async()=>{try{console.log(`Making request to: ${o}/queue/serving/details`);const e=await s.get(`${o}/queue/serving/details`);return console.log("Current queues with details:",e.data),e.data}catch(e){throw console.error("Error fetching current queues with details:",e),e}},fetchDetailsForMultipleQueues:async e=>{try{console.log(`Making request to: ${o}/queue/bulk-details`);const t=await s.post(`${o}/queue/bulk-details`,{queueIds:e});return console.log("Bulk queue details:",t.data),t.data}catch(t){throw console.error("Error fetching bulk queue details:",t),t}},updateQueueStatus:async(e,t)=>{var n;try{console.log(`Updating queue ${e} status to ${t}`);let r;switch(t){case"in-progress":r="serving";break;case"completed":r="completed";break;case"pending":r="pending";break;default:r=t}console.log(`Mapped status: ${t} -> ${r}`),console.log(`Making request to: ${o}/queue/${e}/status`);const a=await s.patch(`${o}/queue/${e}/status`,{status:r});return console.log("Update status response:",a.data),a.data}catch(r){throw console.error(`Error updating queue ${e} status:`,r),console.error("Error details:",((n=r.response)==null?void 0:n.data)||r.message),r}}};export{l as q};
