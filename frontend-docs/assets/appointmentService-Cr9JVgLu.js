import{a as n}from"./api-DR_qaoiX.js";const r={createAppointment:async t=>{var e;try{console.log("Creating appointment with data:",t);const o=await n.post("/appointments",t);return console.log("Appointment created successfully:",o.data),o.data}catch(o){throw console.error("Error creating appointment:",o),console.error("Error details:",((e=o.response)==null?void 0:e.data)||o.message),o}},fetchUserAppointments:async()=>{try{console.log("Fetching user appointments from /appointments/mine");const t=await n.get("/appointments/mine");return console.log("User appointments fetched:",t.data),t.data}catch(t){throw console.error("Error fetching user appointments:",t),t}},fetchAllAppointments:async()=>{try{console.log("Fetching all appointments from /appointments");const t=await n.get("/appointments");return console.log("All appointments fetched:",t.data),t.data}catch(t){throw console.error("Error fetching all appointments:",t),t}},getAppointmentById:async t=>{try{console.log(`Fetching appointment by ID: ${t}`);const e=await n.get(`/appointments/${t}`);return console.log("Appointment fetched by ID:",e.data),e.data}catch(e){throw console.error(`Error fetching appointment ${t}:`,e),e}},getAppointmentByNumber:async t=>{try{console.log(`Fetching appointment by number: ${t}`);const e=await n.get(`/appointments/by-number/${t}`);return console.log("Appointment fetched by number:",e.data),e.data}catch(e){throw console.error(`Error fetching appointment by number ${t}:`,e),e}},fetchAppointmentsByDate:async t=>{try{console.log(`Fetching appointments for date: ${t}`);const e=await n.get("/appointments/by-date",{params:{date:t}});return console.log(`Appointments for date ${t}:`,e.data),e.data}catch(e){throw console.error(`Error fetching appointments for date ${t}:`,e),e}},getAppointmentStats:async()=>{try{console.log("Fetching appointment statistics");const t=await n.get("/appointments/stats");return console.log("Appointment stats:",t.data),t.data}catch(t){throw console.error("Error fetching appointment stats:",t),t}},fetchAppointmentsByDateRange:async(t,e)=>{try{console.log(`Fetching appointments from ${t} to ${e}`);const o=await n.get("/appointments/date-range",{params:{startDate:t,endDate:e}});return console.log("Appointments in date range:",o.data),o.data}catch(o){throw console.error("Error fetching appointments by date range:",o),o}},fetchAvailableSlots:async t=>{try{console.log(`Fetching available slots for date: ${t}`);const e=await n.get("/appointments/available-slots",{params:{date:t}});return console.log("Available slots:",e.data),e.data}catch(e){throw console.error("Error fetching available slots:",e),e}},updateAppointment:async(t,e)=>{try{console.log(`Updating appointment ${t}:`,e);const o=await n.patch(`/appointments/${t}`,e);return console.log("Appointment updated:",o.data),o.data}catch(o){throw console.error(`Error updating appointment ${t}:`,o),o}},updateAppointmentStatus:async(t,e)=>{try{console.log(`Updating appointment ${t} status to: ${e}`);const o=await n.patch(`/appointments/${t}/status`,{status:e});return console.log("Appointment status updated:",o.data),o.data}catch(o){throw console.error(`Error updating appointment ${t} status:`,o),o}},deleteAppointment:async t=>{try{console.log(`Deleting appointment: ${t}`);const e=await n.delete(`/appointments/${t}`);return console.log("Appointment deleted:",e.data),e.data}catch(e){throw console.error(`Error deleting appointment ${t}:`,e),e}},confirmAppointment:async t=>r.updateAppointmentStatus(t,"confirmed"),cancelAppointment:async t=>r.updateAppointmentStatus(t,"cancelled"),completeAppointment:async t=>r.updateAppointmentStatus(t,"completed")};export{r as a};
